<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随笔：如何判断自己是否走在“对的”路上</title>
      <link href="/2021/11/20/Dairy-2021-11-20/"/>
      <url>/2021/11/20/Dairy-2021-11-20/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我是一个忠实的沙盒RPG游戏玩家，对于角色扮演游戏的爱好，让我把自己的一生视为一局“一命通关”的游戏，我是这场游戏的主角，我只是我，我不为任何人而活，我只为探索与体验这个世界的点点滴滴，为了临终闭眼之前，不会后悔有那么一件小事我还没有做过，有那么一个选择受制于当时的环境，有那么一个人我没有付出真心。</p><p>说来好笑， 曾经有一个人问我：你想活到多大？ </p><p>我说：我想不死。 </p><p>我无比热爱这个世界。</p></blockquote><p><strong>摘自KnowYourself</strong></p><p><strong>策划、撰文 / fufu</strong></p><p><strong>编辑 / KY主创们</strong></p><p>我一个在银行工作了三年的朋友最近在考虑跨行去游戏公司，纠结到头都要秃了。</p><blockquote><p>先前面过一个游戏公司，已经收到offer了，开的薪资和现在的工作差不多，可是工作在一线城市，生活成本远比我这个小城市要高……</p><p>我爸妈现在觉得我脑子有问题，好好的生活不过非给自己找罪受。</p><p>我也担心自己是不是没想清楚，我很想去游戏行业发展，可是要是我做不好怎么办…… </p></blockquote><p>朋友害怕自己只是一时兴起走了条“弯路”，也不甘心就这么放弃自己最感兴趣的领域。这让我想到一位对我人生影响很大的教授，和我分享过他的人生经历：</p><p>他本科读的工科，但是大四第一次接触心理学之后，决心改道成为一名认知心理行业的科研工作者，而好不容易有所成就时，又出于对哲学的浓厚兴趣，转而开始钻研哲学心理学。</p><p>他的每次选择在身边人看来都很突然，很不理智，因为他浪费了自己在前一段经历中积累的经验和履历，选择从头开始投入到陌生的领域，而结果是成功还是失败没有人能预测。</p><p>这种全然因为好奇和兴趣作出的改变人生的选择，可能是大部分人都不敢冒的险。不过这位教授却表示自己当初下定决心时，并没有特别焦虑或纠结，也没觉得自己做了很有勇气的事。</p><p>我朋友非常羡慕这位教授的人生态度，但又认为自己学不来，觉得这个教授能够这么选是因为足够优秀，而普通人如果这样，就是自找苦吃自走弯路。</p><p>个人能力当然很重要，但我身边即便是很优秀的朋友照样在人生选择上会遭遇很多焦虑和迷茫，以及对于“走弯路”的恐惧。</p><p>其实，之所以会产生这些想法，是因为我们太在乎社会主流评判中对于成功人生的定义了，却很少<strong>向内挖掘我们自己的人生目标</strong>。</p><p>今天这篇文章决定和大家聊一聊，“走弯路”的勇气，是如何帮助我们找到更适合自己的发展与幸福之路的。</p><p><img src="/2021/11/20/Dairy-2021-11-20/640-20211120220453806" alt="图片"></p><p>社会上普遍存在的对于“走弯路”的恐惧，让我想到了心理学教授Shigehiro Oishi和Erin C. Westgate (2021) 提出了“心理富足感” (psychologically richness) 的概念。 </p><p>心理富足感的定义很简单——<strong>体验尽可能多元的、复杂的人生</strong>。就好像有人追求快乐，有人追求成功，<strong>Oishi教授指出，有些人既不追求快乐也不追求成功，而是追求心理富足感</strong>。</p><p>在调查中，Oishi和Westgate发现，<strong>在不同文化当中，都有一定比例的人，过着既非享乐，也不以意义感/目标为导向的人生，即追求“心理富足感”的人生</strong>。</p><p><img src="/2021/11/20/Dairy-2021-11-20/640-20211120220453916" alt="图片"></p><p>虽然追求心理富足感的人相对占少数，但在不同文化中都有较为固定的比例。（截图自Oishi, S., &amp; Westgate, E. C. (2021). A psychologically rich life: Beyond happiness and meaning. Psychological Review.） </p><p>追求心理富足感的人总会对不一样的体验感到好奇，想尝试新鲜的事物。如果给不同的人生赋予一个主题，那追求心理富足感的人的主题大概叫做“<strong>探索</strong>”。</p><p>小到下班放学时发现的一条从没走过的小路，大到一个陌生的值得一探究竟的专业领域，<strong>ta们对世界的好奇心让ta们像是装载了“不普通探测器”一样，总能发现想去探索一番的风景</strong>。</p><p>这并非因为ta们刻意追逐新奇感或者“标新立异”，只是注意力会不由自主地落在普通生活中不普通的部分，并且遵循自己的好奇心行事。</p><p>出于好奇而行动——这很可能让我们联想到小时候长辈批评的“三分钟热度”、“缺乏恒心”，<strong>ta们对于多元体验的追求体现在人生道路上，也很容易被视为一群走了很多“弯路”的人</strong>。</p><p>然而，Oishi教授则认为，<strong>“弯路”，不过是一条路，甚至可能是一条很不错的路</strong>。</p><p>这个观点可能对于我们从小接受的观念而言是一种挑战。如果就因为自己想要“探索生活”，去做出一些冒险的决定，或者是让自己之前付出的努力前功尽弃，怎么可能有所成就呢？难道不是白费了自己一生吗？ </p><p>如果对于这些少数派们有所理解，你可能会发现，ta们的生活一点儿都不白费，甚至可以说非常精彩——</p><p><img src="/2021/11/20/Dairy-2021-11-20/640-20211120220519616" alt="图片"></p><ul><li><strong>充盈丰满的精神世界</strong></li></ul><p>我从追求心理富足感的朋友身上体验到的最强烈也是最明显的特征可以用三个字概括——“<strong>不无聊</strong>”。不仅和ta们相处过程非常有趣，ta们自己也很少感到无聊。</p><p>在ta们“不无聊”的表现背后，其实深藏着<strong>ta们在不断接触着新信息的过程中，形成的****灵活而复杂的认知体系</strong> (Oishi &amp; Westgate, 2021)。</p><p><strong>追求心理富足感的人往往青睐变化、未知，以及超出ta们认知理解范围的信息。</strong>Ta们十分享受原有认知被挑战的状态，也随时准备好接纳新的观点和看法。即便过程和结果不一定完美，单单是接触到世界的不同面，对ta们而言就足够有吸引力。</p><p><strong>这样灵活复杂的认知能力，也让ta们逐渐具备整合能力更强的思维方式，并进一步促进自身认知体系的复杂性，为ta们丰富的精神世界创造出良性循环</strong>。</p><p>拥有这样的内心世界，自然很难无聊。</p><ul><li><strong>面对苦难时的ta们有特殊的浪漫</strong></li></ul><p>在大家想象中，一个能够挺过苦难的人是什么样的？可能最容易联想到的品质是坚韧、顽强、勇敢，等等。</p><p>很多坚韧顽强的人得以挺过苦难，往往靠着内心强大的信念——比如，相信一切痛苦都是一场磨炼，相信自己一定能从苦难中成长。</p><p>苦难是无常的，让我们感到自己失去了对命运的掌控，而信念则赋予苦难额外的意义，比如“苦尽甘来”、“天降大任于斯人也”。这些附加在苦难之上的意义让我们拥有了渡过难关的希望感。 </p><p>然而，追求心理富足感的人，却并不依靠信念。对ta们而言，<strong>苦难就是苦难，既无意义也无目的</strong>。相比其他人，ta们会更为坦然而直接地面对世事的无常。</p><p><strong>之所以能够坦然面对，并非因为ta们的内心格外强大，而是因为内心格外浪漫</strong>。</p><p>追求心理富足感的人对待人生的欢乐与痛苦，就好像细心的画家对待自己画作中的光亮和阴影。画家会细细打磨和研究每一处阴影，因为光和影在ta眼里对于这幅作品而言同样重要，<strong>甚至很多时候，阴影才是一幅画作的点睛之笔</strong>。</p><p>在很多追求心理富足感的人的眼里，<strong>ta们的人生，就是独属于ta们的艺术作品，哪怕苦难也会成为其中的精妙一笔</strong>。而这也使得ta们能够非常坦荡且发自内心地愿意投入自己的苦难体验当中。</p><p>尼采的《查拉图斯特拉如是说》中有这样一段查拉图斯特拉的内心独白，很适合用来展现追求心理富足感的人面对磨难时浪漫的内心：</p><p><img src="/2021/11/20/Dairy-2021-11-20/640-20211120220550643" alt="图片"></p><p>“在人世上行走，我愿意坦然面对并接纳生命中所遭遇的一切好与坏，因为那都是我探险的一个部分。”</p><p>这大概就是ta们浪漫的勇气。</p><p><img src="/2021/11/20/Dairy-2021-11-20/640-20211120220603017" alt="图片"></p><p>可能有人依然会觉得，这样的生活方式太过理想，没有借鉴意义，而我的教授之所以能够做出这样冒险的选择，也只是因为他非常坚定地相信自己能够成功。</p><p>其实恰恰相反，<strong>心理富足感强的人，是很少有关于“成功”的概念的</strong>。Ta们往往会认为，世界太多样太复杂太随机，何必规定哪一个方向是成功，哪一个方向是失败呢？</p><p>没有了追求成功给生活带来的压力，追求心理富足感的人获得满足感的方式非常简单——只要能活着去看这个世界就够了。</p><p><strong>这里说的容易感到满足并不等于过得快乐，而是对于人生的一种无悔感</strong>。Ta们做的每个决定，经历的每件事情，都无所谓成败，也就不存在“如果我当初做了别的选择，可能会过得更好”的悔意。</p><p>追求心理富足感作为一种相对少数派的生活方式，不一定适合所有人。但“心理富足感”本身，却是我们每个人都可以拥有的。<strong>通过增强自己内心的心理富足感，我们能够更坦然地应对生活中的挑战，其中当然也包括对于“弯路”的恐惧</strong>。</p><p>培养心理富足感也并不是一件难事，它只需要我们在日常生活中做出一些小改变——</p><ul><li>列一份好奇清单</li></ul><p>在培养心理富足感前，我们需要先启动自己的好奇心和想象力。这不需要多么复杂的练习，只需要我们列出一份“好奇清单”。</p><p>清单里不需要特别宏大的旅游计划/人生目标，只需要是对我们而言陌生的、新奇的事物。比如，“如果我去摆一天夜市，能赚多少钱？”、“上一节舞蹈课然后录个视频，能跳成什么样？”、“和坐在火车邻座的人聊10分钟的天，能够交上朋友吗？”</p><p>调动想象力，去找寻我们日常生活中被忽略的细节并放大它，然后找到其中让我们感到好奇的事情，将它列下来——这个属于你的好奇清单会慢慢地越来越长。</p><ul><li>在生活中设置一些“尝试日”</li></ul><p>好奇清单里的内容可能看起来会有些挑战，所以不妨给自己设置一些“尝试日”，在这一天，我们可以放下自己所有的评判，去尝试自己不熟悉的事物，挑战自己的好奇清单。</p><p>在“尝试日”中，只需要有这样一条规则：<strong>允许陌生的体验冲击我们原有的认知，不管是观点的冲突，还是审美的差异，只要是“尝试日”中发生的一切，就去拥抱它</strong>。 </p><ul><li>全身心地投入我们的生活体验，包括那些痛苦和难过的体验</li></ul><p>一般情况下我们在产生负面情绪时，第一时间想的可能是去消解或避开这些情绪，不过这也使得我们常常不了解自己完整的生活体验和情绪体验。 </p><p>当然，<strong>投入这些体验指的不是让我们沉浸在自己的痛苦之中，而是抱持着一种好奇心去探索这些体验当下的每一个细节</strong>： </p><p>我们的胸口是什么感觉？</p><p>身体会不由自主地作出什么反应吗？</p><p>如果用颜色来表达，这种感觉是什么颜色的？</p><p>……</p><p>在这个过程中，你会发现，你对于不同体验和情绪的包容程度在逐渐提升，你对于事物的看法也发生了变化，连一些曾经讨厌的体验可能也会变得有它的魅力——当这种感觉出现时，就说明，你内心的心理富足感，已经在不知不觉中成长了。 </p><p>Oishi在他的文章中写到，追求心理富足感的人在过完ta们的一生后，大概会感叹：“What a journey!”</p><p>其实，即便不追求心理富足感，对于来到这个世界的每个人，我想也是同样的：</p><p>难得来这一遭，不好好体验一次多亏呀。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔：再出发</title>
      <link href="/2021/10/04/Dairy_2021_10_4/"/>
      <url>/2021/10/04/Dairy_2021_10_4/</url>
      
        <content type="html"><![CDATA[<p>转眼已经研三，这是我研究生阶段的最后一年，也有可能是我学生生涯的最后一年。</p><span id="more"></span><p>从三月份开始，我就已经开始着手找工作，应该是算比较早的，当时也是想找一家公司去做暑假实习，提前感受一下商业软件的工作流，提前适应一下工作强度。之后陆陆续续面了大概有一个半月吧，国内互联网的Top10我大概也都面了一遍，最后拿到了美团的Offer，是一个我完全没有接触过的业务方向（风控），但却也是我曾经比较感兴趣的一个相邻方向（网络攻防）。</p><p>部门里的同学都很nice，有大哥带我打球，详细的给我讲了从L5到L8的晋升条件，我感觉我现在就差入职了，能阻碍我晋升的就只有窗口期；Leader很温柔，对我的生活、工作甚至感情都很关心，甚至教唆我离职前在内网BBS发一条征友帖；甚至还遇到了同道中人，一个n l不分很腻害的湖北人，他的爸爸也是公务员，我问他：你爸没有叫你去考公务员吗？他说：叫了，但我觉得公务员太闲了，太无聊了。</p><p>我知道，如果我回到老家，把这些话在饭桌上讲出来，是会被笑的。他们不理解，闲着不好吗？</p><p>对于我来说，这三个月过得太快了，每天都很充实，有工作就工作，没工作就看看书看看论坛，一天很快就过去了。记得离职那天下午，我把我的机器都交还给了公司，四点多，我打算吃个晚饭再回家，我就在工位上玩手机硬生生熬过了两个小时，吃饭的时候我跟他们说：没有事情做，时间过的太慢了。</p><p>他们深以为然。</p><p>我认为我的人生到目前为止是三个阶段，第一个阶段是大学以前，我为了成绩而学习，那时候的我对于学校的科目是谈不上喜欢，也说不上讨厌，跟着学就是了；第二个阶段是大学四年，我在探索自己的内心，在这段时间里，我遵从自己的内心，喜欢什么就做什么，这些事情后来也慢慢变成了自己的爱好，直到现在，我也依旧从中受益，临近毕业，我开始质问自己我要的是什么，我一直强调这个事情很重要，因为这是一个人的锚点；第三个阶段就是现在，我在规划我自己的生活方式，不同的工作对我来说，意味着不同的生活方式，是选择让我感到有价值的工作，还是选择更清闲的生活，两者没有高下之分，只是一个选择问题。</p><p>现在的我，正在迈向第四阶段的过渡期，我依旧在不断的微调未来三年的生活。</p><p><img src="/2021/10/04/Dairy_2021_10_4/%E6%88%AA%E5%B1%8F2020-12-10-14.21.59.png"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2020年终总结</title>
      <link href="/2021/01/02/2020Report/"/>
      <url>/2021/01/02/2020Report/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我是旅途中的行人 </p><p>驻足于日落或是清晨</p></blockquote><p>这次总结写于2021年元旦凌晨五点半的上海，地点是在嘉定的一张沙发上。</p><p>2020年这一年对我来说，是我人生的第二个十二年，人们都说本命年会走背字，我这一年谈不上顺或者不顺，学习还是那样不上不下，生活也是那样不好不坏，朋友们也都还在，大家都健健康康的度过这多舛的2020。</p><p>这一年对很多人来说，都是被偷走的一年，有的人在家度过了自己的毕业季，有的人躺在沙发上把钱挣了，有的人申到了自己心仪的学校却只能网课，有的人走出家门开始了一边旅行一边工作的生活。对我来说亦是如此，这一年有大半的时间都在家度过，我爸说从某种程度上也感谢疫情，我才能在家这么长时间。</p><p>这一年匆匆而过，也不知道该写些什么，在家躺了半年多，每天的生活就是用各种方式打发时间。</p><p><img src="/2021/01/02/2020Report/IMG_8018.jpg" alt="img_1"></p><p>一月，年三十的晚上，发小在高中校门口求婚，俨然在我们这群家伙中打响了结婚的第一枪，这一年身边的朋友也陆陆续续订婚、结婚，直到现在脑子有时还转不过来，原来我们已经到结婚的年龄了吗？</p><p><img src="/2021/01/02/2020Report/IMG_8323-2600071.jpg" alt="img_2"></p><p>三月，春天到了，疫情终于开始有了变好的趋势，慢慢开始走出了家门。说来好笑，时隔一个月第一次下楼，腿都是软的，每一次出门都感觉自己是在做康复。也是在这个月，我完成了自己的第一个混剪，从一开始的毫无头绪，到后来的得心应手，可见相对于行不行，做不做显得更为重要。</p><p><img src="/2021/01/02/2020Report/img2.jpg" alt="img_3"></p><p>四月，随着形势渐好，朋友们开始希冀着开学，学校要求我们每天上报自己的体温，填了一张又一张，总是给我们一种“快开学了“的错觉。五月会开学的吧，六月会开学的吧，七月、八月，九月总该开学了吧。那时候我怎么也不会想到这一个学期居然就这么在家里度过了。上一次这么想要开学，还是高考完的那个夏天，已经是六年前了。</p><p><img src="/2021/01/02/2020Report/img3.jpg" alt="img_4"></p><p>五月，这应该是这半年我做的最有意义的一件事了，我拔掉了四颗智齿。最初的智齿应该是17年了，这两年时不时地就会提醒我一下“你还有颗牙支棱着呢”，所以趁着疫情，索性去拔掉算了。福无双至，祸不单行，一颗智齿变成了四颗，一颗都长不出来，我躺在椅子上，医生掰着我的嘴问我：”拔几个？“ 可能在家憋的太久的压力有些大，身体想要给自己找个刺激，脑子还没反应，嘴上却已经回答了”全拔啊”。然后五月紧接着六月，都是在拔牙和吐血中度过的。一定要保护好自己的牙齿。</p><p><img src="/2021/01/02/2020Report/image-20210210014108109.png" alt="img_5"></p><p>到了七月，最大的感受就是这一年已经过半了，我们要开始走向2021年了。</p><p><img src="/2021/01/02/2020Report/img4.jpg" alt="img_6"></p><p>八月对我来说是个新的开始，开始学习自洽，变得更加专注。回过头看自己走过的这几年，也还是充实的、开心的，像海边拾贝收集一个个新的爱好，做了一次又一次新的尝试，虽然大多失败了，但也不是一场徒然，永远不要忘记自己来自哪里，继续向前走就是了。</p><p><img src="/2021/01/02/2020Report/img5.jpg" alt="img_7"></p><p>在九月，我们终于回到了学校，明明只是上了一个学期的课，现在我们却好像直接跳到了第二年。这是我所经历的最长的一次停课，上一次停课还是初中那时，下了一场大雪埋了路，休息了三天。</p><p><img src="/2021/01/02/2020Report/img7-3147518.jpg" alt="img_8"></p><p>整个十月生活都很规律，每天总会有一个多小时的时间运动，体重也从150回到了140，身体机能也从抖着腿下楼恢复到了疫情前的 “毫无训练痕迹”。我是一个极易产生行为惯性的人，所以也就很容易形成生活规律，有时候可以十天半个月不出门，有时候也可以每天锻炼直到浑身“残废”。有时候打破这种行为惯性，会让我潜意识的感觉到不适，貌似只是简单的遵从这种行为就可以让我享受来自多巴胺的快乐。</p><p><img src="/2021/01/02/2020Report/img6.jpg" alt="img_9"></p><p>十一月重读了《人月神话》，Brooks对于在软件工程中“没有银弹”的预言显然已经应验，十年过去了，软件工程的生产效率依旧没有应该数量级上的提高。其称系统开发是一座焦油坑，或大或小的系统看似都可以顺利运行，其中单独出现的一些问题也都可以被解决，但是当他们相互纠缠和累积在一起的时候，团队的行为就会变得越来越慢，仿佛史前巨兽在焦油坑内的垂死挣扎。</p><p><img src="/2021/01/02/2020Report/2020-12-31235741.jpg" alt="img_10"></p><p>十二月，这魔幻的一年真的就要过去了，这个月开始有些焦虑，焦虑的原因是这一年过的十分囫囵，回头想想也没有什么可以被记录的，或者说值得被记录的，也仅仅是我自己知道就够了。所以为了给这一年认真的结个尾，并维系一下与大学同学的感情，我决定去上海跨年，当时也不知道去做什么，去哪跨年，直到启程前两天才决定去看史炎老师的脱口秀。说到史炎，还真有那么三分童年的味道，那时候我还在上初中，东方卫视有个节目叫《今晚80后脱口秀》，刚开始演员只有一个嘴里含着枣的王自健，他有三个活在段子里的好朋友，蛋蛋、建国和赖宝，赖宝在今年离开了这个世界，其余两个如今风生水起。后来史炎作为常驻Cast每次都会表演一个十分钟的脱口秀，因为表情、肢体语言丰富，以及夜以继日的重复自己毕业于上海交大的梗，所以我对他印象十分深刻。现在除了线下和商演，应该也很难再看到史炎的演出了吧。</p><p>这一年其实本该是轻松的一年才对，因为明年又要为工作重拾课本开始学习了，研究生的摸鱼阶段结束了，要为迈入下一阶段提前做些准备了。幸运的是，到目前为止编程带给我的更多的还是乐趣，这种快乐来自于凭空创造事物而产生的成就感，Brooks称这种快乐是“上帝创造世界的折射”，是一种呈现在每片独特的、崭新的树叶和雪花上的喜悦。每一行代码都是自己的创作，这些代码以特定的顺序啮合在一起，以一种美妙的方式运行起来，从而实现不同的功能，这些功能直接或间接的帮助到别人，甚至被越来越多的人接受，这带给作者的快乐是无法形容的，或许这也是开源的魅力吧。“编程的快乐在于它不仅满足了我们内心深处进行创造的渴望，而且还唤醒了每个人内心的情感。”</p><p>2020无论如何也不能称为平凡的一年，这一年发生了太多不平凡的事，但它对于大多数人来说又是极为平凡的一年，我们日复一日做着最平凡的事，活着，或者渴望活着。生命从未拥有如此这般强烈的存在感，每天都有人离去，他们中的大多数还没有做好准备与这个世界告别，却被意外扼住了喉咙。</p><p>其实我是很怕死的，记得之前有个朋友问我 “你梦想活到多少岁？”，我说：“我想不死。”</p><p>因为我对现在的生活很满意，有希望也有烦恼，比例刚刚好；因为身边这群朋友让我感到快乐，没有感觉到孤单；因为我没有什么后悔的事情，我一直活在今天；因为我不知道有没有轮回，我不想再回去高考了；因为，我爱这个世界。</p><blockquote><p>我对自己的要求很低：我活在世上，无非想要明白些道理，遇见些有趣的事。倘能如我愿，我的一生就算成功的。</p></blockquote><p>最后，是例行这一年里拍过最喜欢的八张照片。</p><p><img src="/2021/01/02/2020Report/image-20210213004833857.png" alt="selected_1"></p><p><img src="/2021/01/02/2020Report/img8.jpg" alt="selected_2"></p><p><img src="/2021/01/02/2020Report/img9.jpg" alt="selected_3"></p><p><img src="/2021/01/02/2020Report/img10.jpg" alt="selected_4"></p><p><img src="/2021/01/02/2020Report/img11.jpg" alt="selected_5"></p><p><img src="/2021/01/02/2020Report/img12.jpg" alt="selected_6"></p><p><img src="/2021/01/02/2020Report/IMG_6797.jpg" alt="selected_7"></p><p><img src="/2021/01/02/2020Report/IMG_6964.jpg" alt="selected_8"></p><p><strong>活着的意义，就是在你快死的瞬间划过你脑海的那些事啊。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态管理模式 — Vuex如何使用？</title>
      <link href="/2020/12/01/vuex_DOC/"/>
      <url>/2020/12/01/vuex_DOC/</url>
      
        <content type="html"><![CDATA[<p>试想当我们在开发一个Vue应用程序时，如果在一个项目中频繁的使用组件传参的方式来同步data中的值，一旦项目结构变得复杂，管理和维护这些数据将变得十分繁琐，为此，Vue为这些被多个组件共同使用的data提供了一个统一的管理工具—Vuex。</p><p>Vuex是专为Vue.js应用程序开发的状态管理模式，集中存储管理应用的所有组件的状态（数据），并以相同的规则保证状态以一种可预测的方式发生变化。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可在项目目录下直接通过<code>npm</code>安装，其他安装方式详见<a href="https://vuex.vuejs.org/zh/installation.html">Vuex安装</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先需要创建一个<code>store</code>实例，引入你创建的所有<code>modules</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">目录结构</span><br><span class="line">/src</span><br><span class="line">｜-main.js</span><br><span class="line">｜-/store</span><br><span class="line">｜-/modules</span><br><span class="line">｜-index.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> team <span class="keyword">from</span> <span class="string">&#x27;./modules/team&#x27;</span></span><br><span class="line"><span class="keyword">import</span> product <span class="keyword">from</span> <span class="string">&quot;./modules/product&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> chat <span class="keyword">from</span> <span class="string">&quot;./modules/chat&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> notification <span class="keyword">from</span> <span class="string">&quot;./modules/notification&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        user,team,product,chat,notification</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">strict</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在<code>main.js</code>中，引入<code>store</code>实例并暴露出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>State是Vuex的基本属性，称为单一状态树，如果熟悉Java面向对象编程的话，我们可以将其类比为成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">//State</span></span><br><span class="line">    <span class="attr">users</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="attr">name</span>: ...,</span><br><span class="line">    <span class="attr">age</span>: ...,</span><br><span class="line">    <span class="attr">gender</span>: ...,        </span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在Vue组件中获得Vuex状态可通过以下两种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一：在根实例中注册store选项，该实例会注入到根组件下的所有子组件中</span></span><br><span class="line"><span class="built_in">this</span>.$store.state.name</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：使用mapState辅助函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">computed</span>: mapState(&#123;</span><br><span class="line">    <span class="comment">// 箭头函数可使代码更简练</span></span><br><span class="line">    <span class="attr">count</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传字符串参数 &#x27;count&#x27; 等同于 `state =&gt; state.count`</span></span><br><span class="line">    <span class="attr">countAlias</span>: <span class="string">&#x27;count&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class="line">    countPlusLocalState (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + <span class="built_in">this</span>.localCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p><code>getter</code>的使用可类比为Java中的<code>get</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//State</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">users</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="attr">name</span>: ...,</span><br><span class="line">    <span class="attr">age</span>: ...,</span><br><span class="line">    <span class="attr">gender</span>: ...,        </span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//getter</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="attr">users</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.users,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果仅仅如此，为何不直接获取<code>state</code>呢？因为有时候我们需要从<code>state</code>中派生出一些状态，例如对列表进行过滤，同样我们可与Java实现类比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回18岁及以下用户对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;;</span><br><span class="line">        <span class="keyword">for</span> (User item: <span class="keyword">this</span>.users) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.age &lt;= <span class="number">18</span>) &#123;</span><br><span class="line">                children.add(item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//State</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">users</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="attr">name</span>: ...,</span><br><span class="line">    <span class="attr">age</span>: ...,</span><br><span class="line">    <span class="attr">gender</span>: ...,        </span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//getter</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="attr">users</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.users,</span><br><span class="line">    <span class="comment">//返回18岁及以下用户对象</span></span><br><span class="line">    <span class="attr">children</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.users,filter(</span><br><span class="line">    <span class="function"><span class="params">user</span> =&gt;</span> user.age &lt;= <span class="number">18</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Vue组件中我们可以通过属性访问或者通过<code>mapGetters</code>来获取对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        <span class="attr">computed</span>: &#123;</span><br><span class="line">            ...mapGetters([</span><br><span class="line">                <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">            ]),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="function"><span class="title">printUsers</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="comment">//通过mapGetters访问</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.users)</span><br><span class="line">                <span class="comment">//通过属性访问</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.$store.getters.users)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>提交<code>mutation</code>是更改Vuex的<code>store</code>中状态的唯一方法，Vuex中的<code>mutation</code>类似于事件：每个<code>mutation</code>都有一个字符串的事件类型（type）和一个回调函数（handler）。这个回调函数就是我们实际进行状态更改的方法，并且他会接受<code>state</code>作为第一个参数。</p><p><code>mutation</code>的实际使用类似于Java中的<code>set</code>方法，是设置<code>state</code>值的唯一方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">    <span class="keyword">private</span> Boolean status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.status = <span class="keyword">true</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//State</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">users</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="attr">name</span>: ...,</span><br><span class="line">    <span class="attr">age</span>: ...,</span><br><span class="line">    <span class="attr">gender</span>: ...,        </span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">status</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//mutation</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="function"><span class="title">setStatus</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">        state.status = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但不同于Java中<code>set</code>的使用方式，我们不能直接调用一个<code>mutation handler</code>，而是提交一个名为<code>xxx</code>的<code>mutation</code>，触发相应的<code>mutation handler</code>执行具体的变更。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Users users = <span class="keyword">new</span> Users();</span><br><span class="line">users.setStatus();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&quot;setStatus&quot;</span>)</span><br></pre></td></tr></table></figure><p>在Java中<code>set</code>函数可以传入参数进而变更成员变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">    <span class="keyword">private</span> Boolean status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.status = <span class="keyword">true</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>set</code>函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Users users = <span class="keyword">new</span> Users();</span><br><span class="line">users.setUser(newUser);</span><br></pre></td></tr></table></figure><p>在Vuex中我们也可以通过提交载荷（Payload）的方式向<code>store.commit</code>传入额外的参数，即<code>mutation</code>的载荷。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//State</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">users</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="attr">name</span>: ...,</span><br><span class="line">    <span class="attr">age</span>: ...,</span><br><span class="line">    <span class="attr">gender</span>: ...,        </span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">status</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//mutation</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="function"><span class="title">setStatus</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">        state.status = <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">setUser</span>(<span class="params">state, user</span>)</span> &#123;</span><br><span class="line">        state.users.push(user)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中提交携带载荷的<code>mutation</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;setUser&#x27;</span>, user)</span><br></pre></td></tr></table></figure><p>或者使用<code>mapMutations</code>映射出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      <span class="string">&#x27;setUser&#x27;</span>,</span><br><span class="line">    ]),</span><br><span class="line">      <span class="function"><span class="title">appendUser</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.setUser(user)</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上看来，<code>mutation</code>的使用与<code>set</code>函数的目的是相同，但<code>mutation</code>在使用中最大的原则 — 必须是同步函数。</p><p>在<code>mutation</code>中混合异步调用会导致你的程序很难调试，当我们调用了两个包含异步回调的<code>mutation</code>来改变状态，我们无法知道什么时候回调以及哪个先回调，因此在Vuex中，<strong>mutation都是同步事务</strong>。</p><p>所以为了处理异步操作，Vuex引入了<code>action</code>这一概念。</p><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p><code>action</code>类似于<code>mutation</code>是可“调用”的方法，两者不同点在于：</p><ul><li><code>action</code>提交<code>mutation</code>，而不直接变更状态；</li><li><strong><code>action</code>可以包含任意异步操作</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//State</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">users</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="attr">name</span>: ...,</span><br><span class="line">    <span class="attr">age</span>: ...,</span><br><span class="line">    <span class="attr">gender</span>: ...,        </span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">status</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//action</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="function"><span class="title">updateUser</span>(<span class="params">&#123;commit&#125;</span>)</span> &#123;</span><br><span class="line">request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/user/getNewUser&#x27;</span></span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            commit(<span class="string">&#x27;setUser&#x27;</span>, res.data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//mutation</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="function"><span class="title">setStatus</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">        state.status = <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">setUser</span>(<span class="params">state, user</span>)</span> &#123;</span><br><span class="line">        state.users.push(user)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中我们注册了一个简单的异步<code>action</code>，我们通过<code>request</code>向后端发送请求，请求新用户，然后我们在回调函数中提交<code>mutation</code>变更状态。</p><p><code>action</code>通过<code>store.dispatch</code>触发：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;updateUser&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>action</code>同样可以通过提交载荷的方式进行分发：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//State</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">users</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="attr">name</span>: ...,</span><br><span class="line">    <span class="attr">age</span>: ...,</span><br><span class="line">    <span class="attr">gender</span>: ...,        </span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">status</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//action</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line"><span class="function"><span class="title">appendUser</span>(<span class="params">&#123;commit&#125;, user</span>)</span> &#123;</span><br><span class="line">        commit(<span class="string">&#x27;setUser&#x27;</span>, user)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//mutation</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="function"><span class="title">setStatus</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">        state.status = <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">setUser</span>(<span class="params">state, user</span>)</span> &#123;</span><br><span class="line">        state.users.push(user)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;appendUser&#x27;</span>, newUser)</span><br></pre></td></tr></table></figure><p>或者使用<code>mapAction</code>映射出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">&#x27;appendUser&#x27;</span>,</span><br><span class="line">    ]),</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="title">test</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.appendUser(user)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>使用单一状态树，应用的所有状态都会集中到一个较大的对象，随着应用迭代变得越来越复杂，<code>store</code>对象会变得越来越臃肿。为了解决以上问题，Vuex允许我们将对象模块（Module）化，每个模块拥有自己的<code>state</code>、<code>mutation</code>、<code>action</code>、<code>getter</code>甚至嵌套子模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><p>在默认情况下，模块内部的<code>action</code>、<code>mutation</code>和<code>getter</code>是注册在全局命名空间的，这样使得多个模块能够对同一<code>mutation</code>或<code>action</code>作出响应。</p><p>如果你希望你的模块具有更高的封装度和复用性，可以通过添加``namespaces: true`的方式使其成为带命名空间的模块。</p><p>下面我们重新复习下Vuex的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">目录结构</span><br><span class="line">/src</span><br><span class="line">｜-main.js</span><br><span class="line">｜-/store</span><br><span class="line">｜-/modules</span><br><span class="line">|-user.js</span><br><span class="line">|-team.js</span><br><span class="line">|-product.js</span><br><span class="line">|-chat.js</span><br><span class="line">|-notification.js</span><br><span class="line">｜-index.js</span><br></pre></td></tr></table></figure><p>以<code>user.js</code>为例，让我们看一下一个完整的Module是怎样的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//user.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&#x27;../../lib/network/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//State</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">users</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="attr">name</span>: ...,</span><br><span class="line">    <span class="attr">age</span>: ...,</span><br><span class="line">    <span class="attr">gender</span>: ...,        </span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">status</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//action</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="function"><span class="title">updateUser</span>(<span class="params">&#123;commit&#125;</span>)</span> &#123;</span><br><span class="line">request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/user/getNewUser&#x27;</span></span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            commit(<span class="string">&#x27;setUser&#x27;</span>, res.data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getter</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="attr">users</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.users,</span><br><span class="line">    <span class="comment">//返回18岁及以下用户对象</span></span><br><span class="line">    <span class="attr">children</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.users,filter(</span><br><span class="line">    <span class="function"><span class="params">user</span> =&gt;</span> user.age &lt;= <span class="number">18</span>),</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//mutation</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="function"><span class="title">setStatus</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">        state.status = <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">setUser</span>(<span class="params">state, user</span>)</span> &#123;</span><br><span class="line">        state.users.push(user)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">    actions,</span><br><span class="line">    mutations</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后需要在<code>/modules</code>目录下的<code>index.js</code>中将各个<code>module</code>注册到<code>store</code>对象中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> team <span class="keyword">from</span> <span class="string">&#x27;./modules/team&#x27;</span></span><br><span class="line"><span class="keyword">import</span> product <span class="keyword">from</span> <span class="string">&quot;./modules/product&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> chat <span class="keyword">from</span> <span class="string">&quot;./modules/chat&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> notification <span class="keyword">from</span> <span class="string">&quot;./modules/notification&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        user,team,product,chat,notification</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//严格模式：无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。</span></span><br><span class="line">    <span class="attr">strict</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在<code>main.js</code>中将<code>store</code>放进我们的Vue应用程序中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>至此，这便是一个完整的Vuex的使用实例，虽然在Vue中我们也可以通过属性传递的方式在不同组件之间传递data，但是当同一个data需要被多个组件同时调用，数据的一致性便很难保证，Vuex的引入则很好的解决了这一问题，Vuex中状态的变化是全局的，是实时计算的，当我们<code>getter</code>的计算依托于多个<code>state</code>时，当我们提交了新的<code>commit</code>变更状态，相应的<code>getter</code>返回值也会变化，这让我们不用过多分心于数据的一致性。</p><p>Vuex可以帮助我们管理共享状态，在应用并不复杂的情况下使用Vuex可能会有些多余，但是当构建一个复杂应用程序时，Vuex对于管理共享状态会是一个很好的选择。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户行为日志监控数据可视化</title>
      <link href="/2020/10/01/LogMonitor/"/>
      <url>/2020/10/01/LogMonitor/</url>
      
        <content type="html"><![CDATA[<p>被老师安排将用户的行为做可视化分析，咋整，干呗。</p><span id="more"></span><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ol><li>Vue；</li><li>Echarts。</li></ol><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>语言： Python；</p><p>库： pymongo、pyecharts、Flask</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>前端对后端发送请求，然后后端获取存储的日志信息，对日志进行的解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取日志创建日期</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDateLog</span>():</span></span><br><span class="line">    data = db.getDateLog()</span><br><span class="line">    dataList = <span class="built_in">list</span>()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(item[<span class="string">&#x27;date&#x27;</span>]) == <span class="built_in">str</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                item[<span class="string">&#x27;date&#x27;</span>] = datetime.datetime.strptime(</span><br><span class="line">                    item[<span class="string">&#x27;date&#x27;</span>],</span><br><span class="line">                    <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                item[<span class="string">&#x27;date&#x27;</span>] = datetime.datetime.strptime(</span><br><span class="line">                    item[<span class="string">&#x27;date&#x27;</span>],</span><br><span class="line">                    <span class="string">&quot;%m/%d/%Y, %I:%M:%S %p&quot;</span></span><br><span class="line">                )</span><br><span class="line">        dataList.append(item)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> dataList:</span><br><span class="line">        item[<span class="string">&#x27;date&#x27;</span>] = (item[<span class="string">&#x27;date&#x27;</span>] + datetime.timedelta(hours=<span class="number">8</span>))</span><br><span class="line">    <span class="keyword">return</span> dataList</span><br></pre></td></tr></table></figure><p>将有效数据封装成echarts对象，返回给前端。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/logHeatMap&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLogHeatMap</span>():</span></span><br><span class="line">    value = [[<span class="number">0</span>] * <span class="number">7</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>)]</span><br><span class="line">    data = UserService.getDateLog()</span><br><span class="line">    mapData = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        i = value[item[<span class="string">&#x27;date&#x27;</span>].hour][item[<span class="string">&#x27;date&#x27;</span>].weekday()]</span><br><span class="line">        value[item[<span class="string">&#x27;date&#x27;</span>].hour][item[<span class="string">&#x27;date&#x27;</span>].weekday()] = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">            mapData.append([i, j, value[i][j]])</span><br><span class="line">    heatMap = (</span><br><span class="line">        HeatMap()</span><br><span class="line">        .add_xaxis(Faker.clock)</span><br><span class="line">        .add_yaxis(<span class="string">&quot;Action&quot;</span>, Faker.week, mapData)</span><br><span class="line">        .set_global_opts(</span><br><span class="line">            visualmap_opts=options.VisualMapOpts(</span><br><span class="line">                max_=<span class="number">3000</span>, min_=<span class="number">100</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> heatMap.dump_options_with_quotes()</span><br></pre></td></tr></table></figure><p>前端使用``Echarts`对数据进行解析，渲染数据可视化图表。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:style</span>=<span class="string">&quot;&#123;width: &#x27;1200px&#x27;, height: &#x27;600px&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&quot;@/lib/network/request&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;ActionLogHeatMap&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">computed</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.getChart()</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">getChart</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> map = <span class="built_in">this</span>.$echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;map&#x27;</span>))</span></span><br><span class="line"><span class="javascript">                request(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>: <span class="string">&#x27;/api/user/logHeatMap&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    map.setOption(res.data)</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><h3 id="用户行为日志可视化"><a href="#用户行为日志可视化" class="headerlink" title="用户行为日志可视化"></a>用户行为日志可视化</h3><p><img src="/2020/10/01/LogMonitor/image-20201001105904156.png" alt="用户行为日志"></p><p>对日志按照创建日期进行解析可知，用户行为主要发生在上午``9:00 - 11:00<code>以及下午</code>1:00 - 5:00`，并在周一至周五存在一定的加班情况，周天较为空闲。</p><p>此处用户行为并没有区别<code>action</code>的类别，如果去除掉<code>open action·</code>，视图会更接近于<code>github</code>的提交热度图。</p><p><img src="/2020/10/01/LogMonitor/image-20201001110807658.png" alt="gitee贡献度视图"></p><h3 id="Project-amp-Task旭日图"><a href="#Project-amp-Task旭日图" class="headerlink" title="Project&amp;Task旭日图"></a>Project&amp;Task旭日图</h3><p>将日志根据Project以及Task进行划分，展示Project以及Task的提交热度数据，考虑到数据量庞大，可追加时间以及Top10 Project的限制。</p><p>即便如此，在构造Echarts对象时，依旧出现了频繁查询数据库导致的程序运行缓慢，考虑可使用索引的方式，加快查询速度。</p><p><img src="/2020/10/01/LogMonitor/image-20201001112139407.png" alt="旭日图"></p><h3 id="Project河流图"><a href="#Project河流图" class="headerlink" title="Project河流图"></a>Project河流图</h3><p>单个Project中的多个Task在同一时间段可能是并行推进，河流图可以展示在某一时间段，各个Task提交或保存Action的次数，从而推算每一个Task从开始到结束大致平均需要的时间，帮助管理者制定合适的Deadline。</p><p><img src="/2020/10/01/LogMonitor/image-20201001145857444.png" alt="河流图实例"></p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Vue </tag>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s 调用Java接口创建容器</title>
      <link href="/2020/09/07/K8s_client/"/>
      <url>/2020/09/07/K8s_client/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.kubernetes.org.cn/"><strong>Kubernetes</strong></a>是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）, Kubernetes提供了应用部署，规划，更新，维护的一种机制。</p><p>控制台<code>kubectl</code>命令可以帮助我们操作K8s部署Deployment、pod、Service等，但当遇到批量部署的情况，以及实现自动化云端服务的时候，如何在后端调用接口则显得尤为重要。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>引入Maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.kubernetes<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>client-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.kubernetes<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>client-java-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p><img src="/2020/09/07/K8s_client/image-20200907210934572.png" alt="image-20200907210934572"></p><p>根据官方更新日志，<code>9.0.0+</code> 版本以上更新了<code>GenericKubernetesApi</code>，但是经过我的使用发现，该接口在创建容器失败后，没有合适的对象封装异常，我们无法得知容器创建失败的原因，经过在github询问贡献者得知：</p><p><img src="/2020/09/07/K8s_client/image-20200907211507320.png" alt="image-20200907211507320"></p><p>根据现有版本的设计，需要使用<code>V1Status</code>接收返回的对象排查错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      Call call = callBuilder.build();</span><br><span class="line">      call = tweakCallForCoreV1Group(call);</span><br><span class="line">      JsonElement element = apiClient.&lt;JsonElement&gt;execute(call, JsonElement.class).getData();</span><br><span class="line">      <span class="keyword">return</span> getKubernetesApiResponse(dataClass, element, apiClient.getJSON().getGson());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ApiException e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.getCause() <span class="keyword">instanceof</span> IOException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getCause()); <span class="comment">// make this a checked exception?</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">final</span> V1Status status;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        status = apiClient.getJSON().deserialize(e.getResponseBody(), V1Status.class);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (JsonSyntaxException jsonEx) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(jsonEx);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">null</span> == status) &#123; <span class="comment">// the response body can be something unexpected sometimes..</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> KubernetesApiResponse&lt;&gt;(status, e.getCode());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以下出于使用方便考虑，依旧采用旧版本的接口调用K8s。</p><p>通过K8s接口创建容器大致分三步：</p><blockquote><pre><code>1. 创建与K8s api-server的连接； 2. 构造容器接口； 3. 构造容器对象； 4. 调用容器接口创建容器。</code></pre></blockquote><h3 id="创建Deployment"><a href="#创建Deployment" class="headerlink" title="创建Deployment"></a>创建Deployment</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">   ApiClient apiClient = <span class="keyword">new</span> ApiClient();</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置K8s ApiServer地址</span></span><br><span class="line">   apiClient.setBasePath(<span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line">   Configuration.setDefaultApiClient(<span class="keyword">this</span>.apiClient);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置Deployment接口</span></span><br><span class="line">   <span class="keyword">private</span> AppsV1Api appsV1Api;</span><br><span class="line">   appsV1Api = <span class="keyword">new</span> AppsV1Api(<span class="keyword">this</span>.apiClient);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置标签</span></span><br><span class="line">   Map&lt;String, String&gt; matchLabels = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   matchLabels.put(<span class="string">&quot;app&quot;</span>, podName);</span><br><span class="line">   matchLabels.put(<span class="string">&quot;env&quot;</span>, env);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置端口</span></span><br><span class="line">   List&lt;V1ContainerPort&gt; portList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   V1ContainerPort port = <span class="keyword">new</span> V1ContainerPort();</span><br><span class="line">   port.setName(<span class="string">&quot;httpd&quot;</span>);</span><br><span class="line">   port.setContainerPort(<span class="number">80</span>);</span><br><span class="line">   portList.add(port);</span><br><span class="line"></span><br><span class="line">   List&lt;V1EnvVar&gt; envs = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">   V1EnvVar clientIdEnv = <span class="keyword">new</span> V1EnvVar();</span><br><span class="line">   clientIdEnv.setName(<span class="string">&quot;client_id&quot;</span>);</span><br><span class="line">   clientIdEnv.setValue(clientId);</span><br><span class="line">   envs.add(clientIdEnv);</span><br><span class="line">   V1EnvVar clientSecretEnv = <span class="keyword">new</span> V1EnvVar();</span><br><span class="line">   clientSecretEnv.setName(<span class="string">&quot;client_secret&quot;</span>);</span><br><span class="line">   clientSecretEnv.setValue(clientSecret);</span><br><span class="line">   envs.add(clientSecretEnv);</span><br><span class="line">   V1EnvVar redirectEnv = <span class="keyword">new</span> V1EnvVar();</span><br><span class="line">   redirectEnv.setName(<span class="string">&quot;redirect_uri&quot;</span>);</span><br><span class="line">   redirectEnv.setValue(redirectUri);</span><br><span class="line">   envs.add(redirectEnv);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用对象封装Deployment</span></span><br><span class="line">   V1Deployment deploy =</span><br><span class="line">       <span class="keyword">new</span> V1DeploymentBuilder()</span><br><span class="line">           .withApiVersion(<span class="string">&quot;apps/v1&quot;</span>)</span><br><span class="line">           .withKind(<span class="string">&quot;Deployment&quot;</span>)</span><br><span class="line">           .withNewMetadata()</span><br><span class="line">           .withName(deploymentName)</span><br><span class="line">           .withNamespace(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">           .endMetadata()</span><br><span class="line">           .withNewSpec()</span><br><span class="line">           .withReplicas(<span class="number">1</span>)</span><br><span class="line">           .withNewSelector()</span><br><span class="line">           .withMatchLabels(matchLabels)</span><br><span class="line">           .endSelector()</span><br><span class="line">           .withNewTemplate()</span><br><span class="line">           .withNewMetadata()</span><br><span class="line">           .withLabels(matchLabels)</span><br><span class="line">           .endMetadata()</span><br><span class="line">           .withNewSpec()</span><br><span class="line">           .withContainers(</span><br><span class="line">               <span class="keyword">new</span> V1Container()</span><br><span class="line">                   .name(podName)</span><br><span class="line">                   .image(<span class="string">&quot;cgwire&quot;</span>)</span><br><span class="line">                   .imagePullPolicy(<span class="string">&quot;Never&quot;</span>)</span><br><span class="line">                   .ports(portList)</span><br><span class="line">                   .env(envs))</span><br><span class="line">           .endSpec()</span><br><span class="line">           .endTemplate()</span><br><span class="line">           .endSpec().build();</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//调用容器接口创建Deployment</span></span><br><span class="line">               appsV1Api.createNamespacedDeployment(</span><br><span class="line">                   <span class="string">&quot;default&quot;</span>,<span class="comment">//namespace</span></span><br><span class="line">                   deploy,<span class="comment">//Deployment对象</span></span><br><span class="line">                   <span class="string">&quot;true&quot;</span>,<span class="comment">//pretty</span></span><br><span class="line">                   <span class="keyword">null</span>,<span class="comment">//dryRun</span></span><br><span class="line">                   <span class="keyword">null</span>);<span class="comment">//fieldManager               </span></span><br><span class="line">         &#125; <span class="keyword">catch</span> (ApiException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> FastRuntimeException(BizCode.SERVICE_UNAVAILABLE.getCode(),e.getResponseBody());</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><h3 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service"></a>创建Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">   ApiClient apiClient = <span class="keyword">new</span> ApiClient();</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置K8s ApiServer地址</span></span><br><span class="line">   apiClient.setBasePath(<span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line">   Configuration.setDefaultApiClient(<span class="keyword">this</span>.apiClient);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置Service接口</span></span><br><span class="line">CoreV1Api coreV1Api = <span class="keyword">new</span> CoreV1Api(apiClient);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造Service对象</span></span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   map.put(<span class="string">&quot;app&quot;</span>, podName);</span><br><span class="line">   map.put(<span class="string">&quot;env&quot;</span>, env);</span><br><span class="line">   V1Service svc =</span><br><span class="line">       <span class="keyword">new</span> V1ServiceBuilder()</span><br><span class="line">           .withApiVersion(<span class="string">&quot;v1&quot;</span>)</span><br><span class="line">           .withKind(<span class="string">&quot;Service&quot;</span>)</span><br><span class="line">           .withNewMetadata()</span><br><span class="line">           .withName(serviceName)</span><br><span class="line">           .withNamespace(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">           .endMetadata()</span><br><span class="line">           .withNewSpec()</span><br><span class="line">           .withSelector(map)</span><br><span class="line">           .addNewPort()</span><br><span class="line">           .withName(<span class="string">&quot;http&quot;</span>)</span><br><span class="line">           .withPort(<span class="number">80</span>)</span><br><span class="line">           .withTargetPort(<span class="keyword">new</span> IntOrString(<span class="number">80</span>))</span><br><span class="line">           .endPort()</span><br><span class="line">           .endSpec()</span><br><span class="line">           .build();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//调用接口操作K8s创建Service</span></span><br><span class="line">         coreV1Api.createNamespacedService(</span><br><span class="line">             svc.getMetadata().getNamespace(),<span class="comment">//namespace</span></span><br><span class="line">             svc,<span class="comment">//Service对象</span></span><br><span class="line">             <span class="string">&quot;true&quot;</span>,<span class="comment">//pretty</span></span><br><span class="line">             <span class="keyword">null</span>,<span class="comment">//dryRun</span></span><br><span class="line">             <span class="keyword">null</span><span class="comment">//fieldManager</span></span><br><span class="line">         );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ApiException e) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> FastRuntimeException(BizCode.SERVICE_UNAVAILABLE.getCode(),e.getResponseBody());</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="创建Ingress"><a href="#创建Ingress" class="headerlink" title="创建Ingress"></a>创建Ingress</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">   ApiClient apiClient = <span class="keyword">new</span> ApiClient();</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置K8s ApiServer地址</span></span><br><span class="line">   apiClient.setBasePath(<span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line">   Configuration.setDefaultApiClient(<span class="keyword">this</span>.apiClient);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置Ingress接口</span></span><br><span class="line">ExtensionV1beta1Api extensionsV1beta1Api = <span class="keyword">new</span> ExtensionsV1beta1Api(<span class="keyword">this</span>.apiClient);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造Ingress对象</span></span><br><span class="line">Map&lt;String, String&gt; annotations = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   annotations.put(<span class="string">&quot;kubernetes.io/ingress.class&quot;</span>, <span class="string">&quot;nginx&quot;</span>);</span><br><span class="line"></span><br><span class="line">   List&lt;ExtensionsV1beta1HTTPIngressPath&gt; ingressPaths = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   ExtensionsV1beta1HTTPIngressPath path =</span><br><span class="line">       <span class="keyword">new</span> ExtensionsV1beta1HTTPIngressPath()</span><br><span class="line">           .path(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">           .backend(</span><br><span class="line">               <span class="keyword">new</span> ExtensionsV1beta1IngressBackend()</span><br><span class="line">                   .serviceName(serviceName)</span><br><span class="line">                   .servicePort(<span class="keyword">new</span> IntOrString(<span class="number">80</span>)));</span><br><span class="line">   ingressPaths.add(path);</span><br><span class="line"></span><br><span class="line">   ExtensionsV1beta1Ingress ingress =</span><br><span class="line">       <span class="keyword">new</span> ExtensionsV1beta1IngressBuilder()</span><br><span class="line">           .withApiVersion(<span class="string">&quot;extensions/v1beta1&quot;</span>)</span><br><span class="line">           .withKind(<span class="string">&quot;Ingress&quot;</span>)</span><br><span class="line">           .withNewMetadata()</span><br><span class="line">           .withName(<span class="string">&quot;ingress-&quot;</span> + subDomain)</span><br><span class="line">           .withNamespace(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">           .withAnnotations(annotations)</span><br><span class="line">           .endMetadata()</span><br><span class="line">           .withNewSpec()</span><br><span class="line">           .withRules(</span><br><span class="line">               <span class="keyword">new</span> ExtensionsV1beta1IngressRule()</span><br><span class="line">                   .host(subDomain+<span class="string">&quot;.cgclass.net&quot;</span>)</span><br><span class="line">                   .http(</span><br><span class="line">                       <span class="keyword">new</span> ExtensionsV1beta1HTTPIngressRuleValue()</span><br><span class="line">                           .paths(ingressPaths)))</span><br><span class="line">           .endSpec()</span><br><span class="line">           .build();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//调用容器接口创建Ingress</span></span><br><span class="line">     extensionsV1beta1Api.createNamespacedIngress(</span><br><span class="line">         ingress.getMetadata().getNamespace(),<span class="comment">//namespace</span></span><br><span class="line">         ingress,<span class="comment">//Ingress对象</span></span><br><span class="line">         <span class="string">&quot;true&quot;</span>,<span class="comment">//pretty</span></span><br><span class="line">         <span class="keyword">null</span>,<span class="comment">//dryRun</span></span><br><span class="line">         <span class="keyword">null</span><span class="comment">//fieldManager</span></span><br><span class="line">     );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ApiException e) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> FastRuntimeException(BizCode.SERVICE_UNAVAILABLE.getCode(),e.getResponseBody());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>该版本的容器接口会抛出封装好的异常对象<code>ApiException</code>，通过捕获<code>ApiException</code>我们可以找到容器创建失败的原因：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  extensionsV1beta1Api.createNamespacedIngress(</span><br><span class="line">      ingress.getMetadata().getNamespace(),</span><br><span class="line">      ingress,</span><br><span class="line">      <span class="string">&quot;true&quot;</span>,</span><br><span class="line">      <span class="keyword">null</span>,</span><br><span class="line">      <span class="keyword">null</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ApiException e) &#123;</span><br><span class="line">  System.out.println(e.getCause());</span><br><span class="line">  System.out.println(e.getMessage());</span><br><span class="line">  System.out.println(e.getResponseBody());</span><br><span class="line">  System.out.println(e.getStackTrace());</span><br><span class="line">  System.out.println(e.getCode());</span><br><span class="line">  System.out.println(e.getResponseHeaders());</span><br><span class="line">  System.out.println(e.getLocalizedMessage());</span><br><span class="line">  System.out.println(e.getSuppressed());</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> FastRuntimeException(BizCode.SERVICE_UNAVAILABLE.getCode(),e.getResponseBody());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>创建容器的流程看似复杂，但是思路十分清晰，先通过<code>ApiClient</code>创建与K8s的连接，然后初始化与该容器相匹配的容器接口，如<code>AppsV1Api</code> , <code>CoreV1Api</code> 或<code>ExtensionsV1beta1Api</code> ，将容器信息封装到对象<code>V1Deployment</code> , <code>V1Service</code> , <code>ExtensionsV1beta1Ingress</code> 中，最后调用容器接口创建容器并处理异常信息。</p><p><code>kubernetes-client/java</code> 目前网上教程内容较少并且质量堪忧（CSDN最近复制粘贴风气堪忧），只能借助于官方文档与实例，所以我将我的理解分享给大家，如有更好的解决方案，也欢迎大家与我交流。</p><p><strong>Talk is cheap, show me the code.</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘阅：《在怀疑的时代依然需要信仰》</title>
      <link href="/2020/09/06/Extract_2020_2_6/"/>
      <url>/2020/09/06/Extract_2020_2_6/</url>
      
        <content type="html"><![CDATA[<p>卢新宁 在北京大学中文系毕业典礼上的演讲</p><span id="more"></span><p>敬爱的老师和亲爱的同学们：</p><p>上午好！</p><p>谢谢你们叫我回家。让我有幸再次聆听老师的教诲，分享我亲爱的学弟学妹们的特殊喜悦。一进家门，光阴倒转，刚才那些美好的视频，同学的发言，老师的讲话，都让我觉得所有年轻的故事都不曾走远。可是，站在你们面前，亲爱的同学们，我才发现，自己真的老了。1988年，我本科毕业的时候，你们中的绝大多数人还没有出生。那个时候你们的朗朗部长还是众女生仰慕的帅师兄，你们的渭毅老师正与我的同屋女孩爱得地老天荒。而他们的孩子都该考大学了。</p><p>就像刚才那首歌唱的，“记忆中最美的春天，难以再回首的昨天”。如果把生活比作一段将理想“变现”的历程，我们只是一叠面额有限的现钞，而你们是即将上市的股票。从一张白纸起步的书写，前程无远弗届，一切皆有可能。面对你们，我甚至缺少一分抒发“过来人”心得的勇气。</p><p>但我先生力劝我来，我的朋友也劝我来，他们都是84级的中文系学长。今天，他们有的仍然是一介文人，清贫淡泊；有的已经主政一方，功成名就；有的发了财做了“富二代”的爹，也有的离了婚、生活并不如意，但在网上交流时，听说有今天这样一个机会，他们都无一例外地让我一定要来，代表他们，代表那一代人，向自己的弟弟妹妹说点什么。</p><p>是的，跟你们一样，我们曾在中文系就读，甚至读过同一门课程，青涩的背影都曾被燕园的阳光，定格在五院青藤缠满的绿墙上。但那是上个世纪的事了，我们之间横亘着20多年的时光。那个时候我们称为理想的，今天或许你们笑称其为空想；那时的我们流行书生论政，今天的你们要面对诫勉谈话；那时的我们熟悉的热词是民主、自由，今天的你们记住的是“拼爹”、“躲猫猫”、“打酱油”；那个时候的我们喜欢在三角地游荡，而今天的你们习惯隐形于伟大的互联网。</p><p>我们那时的中国依然贫穷却豪情万丈，而今天这个世界第二大经济体，还在苦苦寻找迷失的幸福，无数和你们一样的青年喜欢用“囧”形容自己的处境。</p><p>20多年时光，中国到底走了多远？存放我们青春记忆的“三角地”早已荡然无存，见证你们少年心绪的“一塔湖图”正在创造新的历史。你们这一代人，有着远比我们当年更优越的条件，更广博的见识，更成熟的内心，站在更高的起点。</p><p>我们想说的是，站在这样高的起点，由北大中文系出发，你们不缺前辈大师的庇荫，更不少历史文化的熏染。《诗经》《楚辞》的世界，老庄孔孟的思想，李白杜甫的词章，构成了你们生命中最为激荡的青春时光。我不需要提醒你们，未来将如何以具体琐碎消磨这份浪漫与绚烂；也不需要提醒你们，人生将以怎样的平庸世故，消解你们的万丈雄心；更不需要提醒你们，走入社会，要如何变得务实与现实，因为你们终将以一生浸淫其中。</p><p>我唯一的害怕，是你们已经不相信了——不相信规则能战胜潜规则，不相信学场有别于官场，不相信学术不等于权术，不相信风骨远胜于媚骨。</p><p>你们或许不相信了，因为追求级别的越来越多，追求真理的越来越少；讲待遇的越来越多，讲理想的越来越少；大官越来越多，大师越来越少。</p><p>因此，在你们走向社会之际，我想说的只是，请看护好你曾经的激情和理想。在这个怀疑的时代，我们依然需要信仰。</p><p>也许有同学会笑话，大师姐写报社论写多了吧，这么高的调子。可如果我告诉各位，这是我的那些中文系同学，那些不管今天处于怎样的职位，遭遇过怎样的人生的同学共同的想法，你们是否会稍微有些重视？是否会多想一下为什么二十多年过去，他们依然如此？</p><p>我知道，与我们这一代相比，你们这一代人的社会化远在你们踏上社会之前就已经开始了，国家的盛世集中在你们的大学时代，但社会的问题也凸显在你们的青春岁月。你们有我们不曾拥有的机遇，但也有我们不曾经历的挑战。</p><p>文学理论无法识别毒奶粉的成分，古典文献挡不住地沟油的泛滥。当利益成为唯一的价值，很多人把信仰、理想、道德都当成交易的筹码，我很担心，“怀疑”会不会成为我们时代否定一切、解构一切的“粉碎机”？我们会不会因为心灰意冷而随波逐流，变成钱理群先生所言“精致利己主义”，世故老到，善于表演，懂得配合？而北大会不会像那个日本年轻人所说的，“有的是人才，却并不培养精英”？</p><p>我有一位清华毕业的同事，从大学开始，就自称是“北大的跟屁虫”。对北大人甚是敬重。谈到“大清王朝北大荒”江湖传言，他特认真地对我说：“这个社会更需要的，不是北大人的适应，而是北大人的坚守。”</p><p>这让我想起中文系百年时，陈平原先生的一席话。他提到西南联大时的老照片给自己的感动：一群衣衫褴褛的知识分子，器宇轩昂地屹立于天地间。这应当就是国人眼里北大人的形象。不管将来的你们身处何处，不管将来的你们从事什么职业，是否都能常常自问，作为北大人，我们是否还存有那种浩然之气？那种精神的魅力，充实的人生，“天地之心、生民之命、往圣绝学”，是否还能在我们心中激起共鸣？</p><p>马克思曾慨叹，法兰西不缺少有智慧的人但缺少有骨气的人。今天的中国，同样不缺少有智慧的人但缺少有信仰的人。也正因此，中文系给我们的教育，才格外珍贵。</p><p>从母校的教诲出发，20多年社会生活给的我最大启示是：当许多同龄人都陷于时代的车轮下，那些能幸免的人，不仅因为坚强，更因为信仰。不用害怕圆滑的人说你不够成熟，不用在意聪明的人说你不够明智，不要照原样接受别人推荐给你的生活，选择坚守、选择理想，选择倾听内心的呼唤，才能拥有最饱满的人生。</p><p>梁漱溟先生写过一本书《这个世界会好吗？》。我很喜欢这个书名，它以朴素的设问提出了人生的大问题。这个世界会好吗？事在人为，未来中国的分量和质量，就在各位的手上。</p><p>最后，我想将一位学者的话送给亲爱的学弟学妹——无论中国怎样，请记得：你所站立的地方，就是你的中国；你怎么样，中国便怎么样；你是什么，中国便是什么；你有光明，中国便不会黑暗。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 摘阅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Spring Cloud搭建Zpikin数据链路追踪系统</title>
      <link href="/2020/06/07/Springcloud_zipkin/"/>
      <url>/2020/06/07/Springcloud_zipkin/</url>
      
        <content type="html"><![CDATA[<p>Zipkin是一个开源的分布式实时数据追踪系统（Distributed Tracking System），每个Service向Zipkin报告请求数据，Zipkin会根据调用关系通过Zipkin UI生成依赖关系图，让开发者通过一个Web前端轻松的收集和分析数据，如用户每次请求服务的处理事件等，可方便分析系统中存在的瓶颈。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着业务越来越复杂，系统也随之需要进行拆分，特别是随着微服务架构和容器技术的兴起，看似简单的应用，后端可能需要多个Service的支持。当前端向后发送请求，后端可能需要进行多次Service调用才能完成，当请求变慢或者不可用时，单凭我们无法得知是哪个后端Service引起的，这时就需要快速定位故障点，Zipkin就可以很好的解决这样的问题。</p><p>这里我是在Spring Cloud的基础上搭建的Zipkin。</p><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>创建Zipkin微服务，并引入依赖，主要是两个<code>zipkin-server</code>和<code>zipkin-autoconfigure-ui</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是：</p><ol><li> 这里的version如果不匹配会发生各种奇怪的异常导致程序跑不起来，所以如果你的程序报异常，建议你检查一下zipkin版本以及SpringBoot、SpringCloud的版本；</li><li> <code>zipkin-server</code>中包含了<code>log4j-slf4j-impl</code>这个组件，这可能会与springboot中的<code>logback</code>重复产生异常如下，如果出现只需在<code>zipkin-server</code>的dependency中添加<code>&lt;exclusion&gt;</code>将<code>log4j-slf4j-impl</code>排除即可。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] [XXX Enforcer Rules] find DuplicateClasses</span><br><span class="line"></span><br><span class="line">Found in:</span><br><span class="line">org.apache.logging.log4j:log4j-slf4j-impl:jar:2.6.2:compile</span><br><span class="line">ch.qos.logback:logback-classic:jar:1.1.7:compile</span><br><span class="line">Duplicate classes:</span><br><span class="line">org/slf4j/impl/StaticMDCBinder.class</span><br><span class="line">org/slf4j/impl/StaticMarkerBinder.class</span><br><span class="line">org/slf4j/impl/StaticLoggerBinder.class</span><br></pre></td></tr></table></figure><p>另外引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>修改配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将zipkin注册到erueka上</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置zipkin端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8769</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置服务名字</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-zipkin2</span></span><br></pre></td></tr></table></figure><p>上面就是我们给zipkin的配置，但是若是在启动过程中报出异常<code>[java.lang.IllegalArgumentException: Prometheus requires that all meters with the same name have the same set of tag keys.]</code>，此时我们就需要在配置文件中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">auto-time-requests:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>修改Application添加注解<code>@EnableEurekaClient</code>以及<code>EnableZipkinServer</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.giotto.demozipkin2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> zipkin2.server.internal.EnableZipkinServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZipkinServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoZipkin2Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoZipkin2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Service端"><a href="#Service端" class="headerlink" title="Service端"></a>Service端</h2><p>当ZipkinServer端配置好后，我们同样需要在Service中配置Zipkin，这样才能将数据实时发送到ZipkinServer，首先给需要配置Zipkin的Service添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置文件中，配置Zipkin：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">zipkin:</span></span><br><span class="line"><span class="attr">base-url:</span> <span class="string">http://localhost:port</span></span><br><span class="line"><span class="attr">sleuth:</span></span><br><span class="line"><span class="attr">sampler:</span></span><br><span class="line"><span class="attr">probability:</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>启动后，只需访问<code>http://localhost:port/zipkin/</code>即可。</p><p><img src="/2020/06/07/Springcloud_zipkin/image-20200607212054704.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Zipkin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2019年终总结</title>
      <link href="/2020/01/02/2019Report/"/>
      <url>/2020/01/02/2019Report/</url>
      
        <content type="html"><![CDATA[<font face="楷体"><blockquote><p>满桌的旧瓶新酒，放不下旧恨新愁 </p><p>荒废了光阴锦绣，愧对一身行头 </p><p>仰望漫天的星斗，便梦回功成名就</p></blockquote><p>&emsp;&emsp;2019年，这一年就像上了发条的铁皮青蛙，没头没脑的闯进了23岁的九局下半，我没有将帽子反戴，但也还依旧期待着逆转。</p><p><img src="/2020/01/02/2019Report/img01.JPG" alt="img01"></p><p>一月，刚刚结束了研究生初试，我又回到了烟台，休息了几天，收拾收拾了行李便准备回家过年了。奇怪的是今年一点都没有考完试的兴奋感。</p><p><img src="/2020/01/02/2019Report/img02.JPG" alt="img02"></p><p>二月，本该是享受假期的时候，结果得了急性咽炎伴随着低烧，每天只能吃面条、忌辛辣、忌油腻，如果我记得不错，那天是大年初一，运气还真是不太好。后来，二月中旬考研初试成绩公布了，数学和政治依旧不是很好，对于政治总感觉像是一拳打在了棉花上，无处发力。数学成绩反而令我有些意外，因为交完卷子的时候，自我感觉还不错，但是我一向自我感觉还不错就是了。</p><p><img src="/2020/01/02/2019Report/img03.JPG" alt="img03"></p><p>三月，距离复试的时间越来越近，为了多尽尽人事，我提前结束了假期，选择了校内调剂，去济南准备软件工程的复试，此时距离复试大概还有二十多天，等我到了济南，才发现两个学院的复试科目不一样，我只好从头开始复习，也是从一头雾水到略知一二，最后是终于把复试应付过去了。</p><p>之后，回到烟台没呆几天，一方面确实有点闲，另一方面为了给自己多一条后路，在收到黑龙江大学的复试通知后的第三天，琪琪和我就飞去了哈尔滨，准备参加黑大的复试，这也是我第一次来到东北。复试大概只花了一天时间，内容也比较简单，只是纯粹的面试。作为在哈尔滨的最后一餐，我们寻着人生一串纪录片的指引找到哈尔滨的这家烧烤店，地方不大，味道不错，烤牛肉干很有嚼劲。当我知道自己会被黑大录取的时候，我的心情比没被录取还纠结，山大的录取结果还没出，如果黑大先出了，那我就不得不在规定时间内确认录取，还好当我抵达蓬莱国际机场，关掉了手机的飞行模式，我收到了姑父发给我的录取公示名单。这一次我的运气依旧不错。</p><p><img src="/2020/01/02/2019Report/img04.jpg" alt="img04"></p><p>四月，这是我在烟台的最后一个月，我开始真正开始享受我的Gap year。每天吃吃喝喝玩玩，这时候我应该有150斤。这个月和琪琪去了威海的野生动物园，是我突然想到的的，这个动物园在我印象中很大，但我不确定它还在不在，因为我上一次去还是我四年级的时候，那时候还是和我哥一起去的，想想都已经是十二年前的事了，有些唏嘘。</p><p><img src="/2020/01/02/2019Report/img05.JPG" alt="img05"></p><p>五月，我终于抵挡不住来自导师的攻势，我提前来到了实验室学习。也是这个月我的网站<a href="giottolee.com">SilverBullet</a>也开始搭建起来了。主要目的其实也不是分享，只是作为方便自己以后需要做点什么东西，以前做过，我就可以直接上去找到，省去了一些百度的麻烦，可能主要还是因为懒。我的生活开始变得极其规律，早上七点起床，吃个早饭然后去实验室，看看新闻刷会B站看看球，看看老师给安排的内容。到点就去吃午饭，然后回去睡个一个小时午觉，下午回到实验室继续消磨时间，到了四五点钟，就偷偷溜去球场打打球，也因为篮球，我又认识了一群新的球友。那时候的生活规律的简直不像是自己，比如上个月我们宿舍去实验室的时间一度拖延到上午十点，现在是晚上的01:52，我还依旧在写着这些乱七八糟的东西。</p><p><img src="/2020/01/02/2019Report/img06.JPG" alt="img06"></p><p>六月，我拿到了我的第二份入学通知，正式从一个无业游民又变回了一个新生，美职篮也正式迎来了新王。话说，过年的时候收到了卡酱的球衣，四个月过去，猛龙夺了冠，我在想这是不是有些玄学，毕竟谁也没想到总决赛上站出来的是那位乔丹。这里我建议曲总尽快把湖人球衣安排上，今年我要看铁林投三分。</p><p><img src="/2020/01/02/2019Report/img07.jpg" alt="img07"></p><p>七月，和琪琪去了南京，逛了南京博物院、去了南师大、爬了鸡鸣寺、游了玄武湖、转了总统府、看了动物园。后来又转去上海，住了虎扑x亚朵的合作酒店，打了两天球，吃了糖水铺子，在上海的两天，生理上与心理上都完完全全被我摁在了舒适区，因为天气太热，着实不太想出门。果然自己还是比较适合休闲游，能吃不累就是最好旅行。当我从上海回到学校，我的宿舍也从单人间降级到了四人间，我多了三个新舍友。</p><p><img src="/2020/01/02/2019Report/img08.JPG" alt="img08"></p><p>八月，这个月老老实实呆在学校里继续摸鱼生活，回家也没有什么事情做，索性在学校打打球减减肥，也是在这个月，我的体重重新从150斤回到了曾经的140斤，再也不用躺在床上摸着一肚子罪恶感睡觉了。这个月陆陆续续下了好长时间的雨，济南也着实凉爽了那么几天，雨后的草腥味，是我好久没有闻到的味道了，或许因为沿海，烟台下过雨的味道远没有这么清冽。</p><p><img src="/2020/01/02/2019Report/img09.JPG" alt="img09"></p><p>九月，匆匆忙忙的再一次走入大学生活，又参加了一次开学典礼，又拿到了一张校园卡。我记得在之前没开学前，我还跟舍友说不想天天呆实验室，想上课。九月，两个周，我后悔了。</p><p><img src="/2020/01/02/2019Report/img10.JPG" alt="img10"></p><p>十月，我一直以为20多岁应该是人身体状态最好的一段时间，但事实上我发现最近两年身体却在慢慢出现一些小毛病，背包走太久会肩膀疼，打球太频繁会膝盖疼，脚踝手指扭一下要一个多月才能好，实在不太想承认身体要开始走下坡路了。习惯上也变得越来越趋于养生，每天除了上课、实验室、吃饭就是睡觉，想想以前的大学生活，好像完全是两个世界。</p><p><img src="/2020/01/02/2019Report/img11.JPG" alt="img11"></p><p>十一月，结束了自己的第一次研究生赛，又是十六强，为什么说又呢？因为我记得之前自己第一次打院赛好像也是十六强。其实基本上没怎么打，自己还是太弱了，马上就要入冬了，趁着这时候多练一练力量养一养膝盖，等天气暖和了再好好练练球，希望明年能再多走两步。</p><p><img src="/2020/01/02/2019Report/img12.jpg" alt="img12"></p><p>十二月，感觉一眨眼这学期就这么过来了。好像几乎都在准备期末考试，周末也打了几次球，可能是因为天气确实比较冷，髌腱出现了一些炎症，我向保暖裤做出了最后的妥协。</p><p><img src="/2020/01/02/2019Report/img13.JPG" alt="img13"></p><p>这是我的第四次年终总结了，2017年的元旦，哈尔滨跨年计划失败，躺在床上闲着无聊，我写下了我的第一篇年终总结，然后2018、2019直到今年2020年，其实写到现在这东西真的有什么意义吗？好像也没什么意义，顶多能让我知道去年这一年钱都花在哪了，能让我知道我这一年好像也没闲着。但这件事情每到这个时间段，总是会逼迫我去回忆这一年都发生了什么，可能这也就是这件事本身的意义了。</p><p>就像稻盛和夫所说的：“不论你多么富有，多么有权势，当生命结束之时，所有的一切都只能留在世界上，唯有灵魂跟着你走下一段旅程。人生不是一场物质的盛宴，而是一次灵魂的修炼，使它在谢幕之时比开幕之初更为高尚。”</p><p>昨天在虎扑上看到一JR志愿前往武汉参与救助，理由是<strong>“人这一辈子总要去做点牛逼的事情”</strong>。疫情蔓延的这段时间，有人离开湖北，也看到了有人走进武汉，无数医护人员从各地被抽调至疫区，背负着南丁格尔与希波克拉底的教诲，走在了所有人的前面。</p><p>我觉得，你们真的很牛逼。</p><blockquote><p>  「whereas I was blind, now I see.」 </p><p>  「从前我是瞎的，如今我看得见。」</p></blockquote><p><strong>最后，是例行这一年里拍过最喜欢的十张照片。</strong></p><p><strong>今年相机也是吃灰的厉害。</strong></p><p><img src="/2020/01/02/2019Report/s1.JPG" alt="s1"></p><p><img src="/2020/01/02/2019Report/s2.JPG" alt="s2"></p><p><img src="/2020/01/02/2019Report/s3.JPG" alt="s3"></p><p><img src="/2020/01/02/2019Report/s4.jpg" alt="s4"></p><p><img src="/2020/01/02/2019Report/s5.jpg" alt="s5"></p><p><img src="/2020/01/02/2019Report/s6.jpg" alt="s6"></p><p><img src="/2020/01/02/2019Report/s7.JPG" alt="s7"></p><p><img src="/2020/01/02/2019Report/s8.JPG" alt="s8"></p><p><img src="/2020/01/02/2019Report/s9.jpg" alt="s9"></p><p><img src="/2020/01/02/2019Report/s10.jpg" alt="s10"></p><p><strong>你见过这个世界上的好，你见过这个世界上真的有人在过着你想要的生活，你知道你值得一切更好的东西，所以你会更加笃定，更加心无旁骛地努力。去告诉全世界，并不是只有你在做自己想做的事。</strong></p>   </font>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘阅：《向死而生》- 李开复</title>
      <link href="/2019/11/20/Dairy_2019_11_20/"/>
      <url>/2019/11/20/Dairy_2019_11_20/</url>
      
        <content type="html"><![CDATA[<ul><li><p>人生中常被问到“我是谁”、“从哪里来”、“到哪里去”，其实就是认识自己，认识客观世界，寻找人生目的的过程，永远没有终点。</p></li><li><p>真正考验一个人对生命和对人生道路认识的，正是如何面对“死亡”。</p></li><li><p>每个人都应有自己对生活的追求，不要只会跟在别人的后面走同样的路，重要的恰恰在于要展现自己的性格，走出与众不同的道路，活出属于自己的生活，却并非要在墓志铭上留下些什么。</p></li><li><p>我从没想过自己竟会出版一本这样的书。一直以来，</p></li><li><p>我这一生最大的错误是，我彻头彻尾地舍本逐末，把最要紧的事搁到最后，却把人生最弥足珍贵的时光，浪费在追逐那些看起来五彩斑斓的泡沫。</p></li><li><p>因为所有的荣耀与骄傲、难堪与恐惧，都会在死亡面前消失，只留下真正重要的东西。如果觉察到自己沉溺于担心会失去某些东西时，“记住你即将死去”会是最好的解药。</p></li><li><p>说：“要珍惜、尊重周遭的一切，不论善恶美丑，都有存在的价值。就像一座生态完整的森林里，有大象、老虎，也一定有蟑螂和老鼠。完美与缺陷本来就是共存的，也是从人心产生的分别。如果没有邪恶，怎能彰显善的光芒？如果没有自私的狭隘，也无法看到慷慨无私的伟大。所以，真正有益于世界的做法不是除恶，而是行善；不是打击负能量，而是弘扬正能量。”</p></li><li><p>大师说：“要珍惜、尊重周遭的一切，不论善恶美丑，都有存在的价值。就像一座生态完整的森林里，有大象、老虎，也一定有蟑螂和老鼠。完美与缺陷本来就是共存的，也是从人心产生的分别。如果没有邪恶，怎能彰显善的光芒？如果没有自私的狭隘，也无法看到慷慨无私的伟大。所以，真正有益于世界的做法不是除恶，而是行善；不是打击负能量，而是弘扬正能量。”</p></li><li><p>“你的时间有限，所以不要为别人而活；不要被教条所限，不要活在别人的观念里；不要让别人的意见左右自己内心的声音。最重要的是，勇敢地去追随自己的心灵与直觉。只有自己的心灵和直觉才知道你自己的真实想法。其他一切都是次要的。”</p></li><li><p>“如果你刻意去做一个好人，那善良之花不会绽放。如果你刻意培养谦恭之心，结果也只会令你失望。善良和谦恭恰如一缕清风，会从你偶然开启的窗户翩然而至，但你若是有意敞开门户恭请大驾，它永远不会眷顾。”</p></li><li><p>生命还有更大的领域是我们未曾涉足的。能不能真的无惧？我真的不敢说，但是，我相信，我已经有能力将每一段经历转化成一种重要的人生学习，让我的生命可以不断地得以提升和进化。</p></li><li><p>伴随着死亡而来的肉体消亡，“个体之我”的意识也消解了，此时反而是精神、意识回归到宇宙整体大我的契机。这就是数千年来人们通过各种宗教、哲学、灵性修持等手段想要达到，却只有极少数人可以抵达的开悟状态。</p></li><li><p>就像稻盛和夫所说的：“不论你多么富有，多么有权势，当生命结束之时，所有的一切都只能留在世界上，唯有灵魂跟着你走下一段旅程。人生不是一场物质的盛宴，而是一次灵魂的修炼，使它在谢幕之时比开幕之初更为高尚。”</p></li><li><p>成功的婚姻不是建立在安全、拥有的基础之上，而是建立在平等、自由之上。婚姻不是在制造罪恶感的义务，而是彼此互补，彼此互谅，彼此互相扶持的过程。与自己最爱的人共度生命之旅，分享权力，分担责任，才能沐浴在光辉中。就像你们刚才交换的戒指：象征合一，而非占有；象征结合，而非限制；象征环抱，而非羁绊。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 摘阅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine + LeanCloud搭建评论模块</title>
      <link href="/2019/11/05/ghost-valine/"/>
      <url>/2019/11/05/ghost-valine/</url>
      
        <content type="html"><![CDATA[<p>Valine 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。</p><p>理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前国内Blog评论系统大多采用Gitment、网易云跟帖、多说、畅言等，目前网易云跟帖和多说已经凉凉，Gitment游客评论必须需要登录Github账户，使用畅言需要备案。这时候我将目光转向了Valine这个极简的轻量化无后台评论系统。</p><p>Valine无后端，对于站长少了维护的一环，减少了不少工作量；对于游客，可匿名评论，减少了注册的步骤，对于小型Blog来说，这是一个十分优秀的评论系统。</p><h2 id="注册Leancloud"><a href="#注册Leancloud" class="headerlink" title="注册Leancloud"></a>注册Leancloud</h2><p>Valine依托于Leancloud，所以首先我们需要到<a href="https://leancloud.cn/">官网</a>注册一个用户。</p><p>登录控制台，创建一个应用，并命名。<br><img src="/2019/11/05/ghost-valine/create-application.png" alt="create-application"></p><p>在<code>存储-&gt;结构化数据</code>创建一个class并命名为<code>comment</code>。</p><p>在<code>设置-&gt;应用Keys</code>可以看到自动生成的<code>AppID</code>和<code>AppKey</code>,这在之后会用到。</p><h2 id="修改Ghost后台"><a href="#修改Ghost后台" class="headerlink" title="修改Ghost后台"></a>修改Ghost后台</h2><p>首先需要在Ghost后台<code>Code injections -&gt; Site Header</code>添加两行代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">“//cdn1.lncld.net/static/is/3.0.4/as-min.js”</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">‘//unpkg.com/valine/dist/Valine.min.js’</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后通过Xshell或者任何ssh工具连接到你的服务器，进入到你的主题目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入主题目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/ghost/content/theme/&lt;Your theme&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改post.hbs</span></span><br><span class="line">sudo vi post.hbs</span><br></pre></td></tr></table></figure><p>在文件中插入以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">              &#123;&#123;/foreach&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Valine --&gt;</span></span><br><span class="line"></span><br><span class="line">#插入以下内容</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;comment&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Leancloud--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Valine--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;//unpkg.com/valine/dist/Valine.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cat.net/ajax/libs/jquery/3.2.1/jquery.min.js&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Valine(&#123;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">            <span class="attr">av</span>: AV, </span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;.comment&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">app_id</span>: <span class="string">&#x27;&lt;AppID&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">app_key</span>: <span class="string">&#x27;&lt;AppKey&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">placeholder</span>: <span class="string">&#x27;say something&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在ghost文件夹下执行<code>ghost restart</code>重启Ghost即可。</p><p><img src="/2019/11/05/ghost-valine/ghost-valine.png" alt="ghost-valine"></p><h2 id="添加评论提醒"><a href="#添加评论提醒" class="headerlink" title="添加评论提醒"></a>添加评论提醒</h2><p>由于Valine无后端的特性，游客在Blog中评论，作为博主无从得知，所以我们添加评论通知的功能。</p><p>评论通知使用了<a href="https://github.com/DesertsP/Valine-Admin">Valine-admin</a></p><p>官方给出的文档十分详细，按照给出的步骤部署即可。</p><p>测试结果如下：<br><img src="/2019/11/05/ghost-valine/newComment.png" alt="newComment"></p><p>至此，作为Blog的基本功能评论功能已基本实现。</p><p>毕竟， 没有交互，谈什么分享。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Blog </tag>
            
            <tag> Valine </tag>
            
            <tag> LeanCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Ghost框架搭建Blog</title>
      <link href="/2019/11/05/ghost-deploy/"/>
      <url>/2019/11/05/ghost-deploy/</url>
      
        <content type="html"><![CDATA[<p>丢掉Hexo，舍弃Wordpress，最终我选择了Ghost。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间，先是舍弃了Hexo转战Wordpress，主要原因是Hexo多终端编写Blog比较麻烦，需要经常同步本地文件，另外Hexo没有后台，很多时候不是那么方便，但是Hexo的确是我用过最有利于“专注写作”的框架，但是没有办法，用户体验让我不得不舍弃掉他。</p><p>后来我又使用了Wordpress，优点十分明显：有后台、有在线编辑器、一键换主题、可定制主题、大量插件等等，这些是他的优点，但Wordpress却忽略了最重要的一个环节：编辑器。<code>Wordpress:5.0</code>以后内置的Gutenberg编辑器对于Markdown用户来说是真的难用。</p><p>之后我在网上四处冲浪，观察大家都在使用哪些框架建站，后来我发现了这个基于Node.js开发的Blog框架—Ghost。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>官方给出的文档建议使用如下环境：</p><blockquote><ul><li>Ubuntu 16.04 or Ubuntu 18.04</li><li>NGINX (minimum of 1.9.5 for SSL)</li><li>A <a href="https://ghost.org/faq/node-versions/">supported version</a> of <a href="https://nodejs.org/">Node.js</a></li><li>MySQL 5.5, 5.6, or 5.7 (<em>not</em> &gt;= 8.0)</li><li>Systemd</li><li>A server with at least 1GB memory</li><li>A registered domain name</li></ul></blockquote><p>总的来说就是就是需要Nginx、MySQL、Node.js这三个东西，另外你需要一台至少1GB内存的服务器以及一个注册的域名。</p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>因为Ghost不允许使用root账户安装，所以首先需要创建一个普通账户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user使用自己的账户名称</span></span><br><span class="line">adduser &lt;user&gt;</span><br></pre></td></tr></table></figure><p>这里注意也不要使用<code>ghost</code>作为用户名，这会导致与Ghost-CLI冲突。</p><p>然后我们需要将这个账户添加到superuser用户组，这样我们就可以使用<code>sudo</code>命令了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用root用户执行以下命令</span></span><br><span class="line">usermod -aG sudo &lt;user&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到新建的用户</span></span><br><span class="line">su - &lt;user&gt;</span><br></pre></td></tr></table></figure><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><p>首先确保软件包列表是最新的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>Ghost需要Nginx服务器，并且SSL配置需要Nginx1.9.5或更高版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>如果你的服务器使用了 <code>ufw</code>，那么你需要允许HTTP和HTTPS连接，打开防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow <span class="string">&#x27;Nginx Full&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>数据库官方建议使用MySQL，版本在5.5以上，且不大于8.0 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><h4 id="Ubuntu18-04上的MySQL"><a href="#Ubuntu18-04上的MySQL" class="headerlink" title="Ubuntu18.04上的MySQL"></a>Ubuntu18.04上的MySQL</h4><p>如果你的服务器运行的是Ubuntu18.04，则需要输入密码确保MySQL与<code>Ghost-CLI</code>兼容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入mysql</span></span><br><span class="line">sudo mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改root用户的密码，这里的password改成你自己要设定的密码</span></span><br><span class="line">&gt;ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出mysql</span></span><br><span class="line">&gt;quit</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换回你的管理员用户</span></span><br><span class="line">su - &lt;user&gt;</span><br></pre></td></tr></table></figure><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p><img src="/2019/11/05/ghost-deploy/image-20191105145226721.png" alt="image-20191105145226721"></p><p>官方建议使用<code>10.x</code>的 LTS版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加Node10到APT仓库</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装Node.js</span></span><br><span class="line">sudo apt-get install -y node.js</span><br></pre></td></tr></table></figure><h2 id="安装Ghost-CLI"><a href="#安装Ghost-CLI" class="headerlink" title="安装Ghost-CLI"></a>安装Ghost-CLI</h2><p><code>Ghost-CLI</code>是一个命令行工具，可以快速安装、配置Ghost。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install ghost-cli@latest -g</span><br></pre></td></tr></table></figure><p>安装后可运行<code>ghost help</code>验证安装。</p><h2 id="安装Ghost"><a href="#安装Ghost" class="headerlink" title="安装Ghost"></a>安装Ghost</h2><blockquote><p>注意：在<code>/root</code>或<code>home/</code>目录中安装Ghost会导致安装程序损坏，建议使用<code>/var/www/ghost</code>目录。</p></blockquote><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>创建安装目录，并且设置所有者和读写权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建安装目录</span></span><br><span class="line">sudo mkdir -p /var/www/ghost</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改文件夹所有者</span></span><br><span class="line">sudo chown &lt;user&gt;:&lt;user&gt; /var/www/ghost</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改权限</span></span><br><span class="line">sudo chmod 775 /var/www/ghost</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/ghost</span><br></pre></td></tr></table></figure><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>前期环境均已配置好，下面开始运行安装命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ghost install</span><br></pre></td></tr></table></figure><h4 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h4><p>安装过程中<code>Ghost-CLI</code>会提示配置一些选项。</p><p><strong>Blog URL</strong></p><p>输入指向该服务器的域名，如<code>https://giottolee.com</code>，官方文档说这里如果不使用域名直接使用IP地址会导致一些错误，但是我试着配了一下，也没有报错。尽管如此还是建议买一个域名，毕竟直接暴露IP地址还是有危险的。</p><p><strong>MySQL hostname</strong></p><p>配置数据库来源，如果你的数据库是在本地配置，就直接<code>Enter</code>使用默认本地配置。如果你的数据安装在另一台服务器，就输入服务器名字。</p><p><strong>MySQL username/ password</strong></p><p>输入数据库的用户名和密码。</p><p><strong>Ghost database name</strong></p><p>如果你的数据库使用的是root用户，则Ghost-CLI会自动创建一个数据库。如果你使用的非root用户，你需要手动创建一个数据库，并且配置好权限，然后在这输入数据库的名字。</p><p><strong>Set up a ghost MySQL user? (Recommended)</strong></p><p>如果你的数据库用户使用的是root用户，Ghost-CLI会为Ghost创建一个新的数据库用户，这个用户只能读写Ghost数据库。</p><p><strong>Set up NGINX? (Recommended)</strong></p><p>自动配置Nginx，想都不想直接Enter。</p><p><strong>Set up SSL? (Recommended)</strong></p><p>直接Enter吧。</p><p><strong>Enter your email</strong></p><p>输入你的邮箱地址，用来配置SSL。</p><p><strong>Set up systemd? (Recommended)</strong></p><p> 使用ghost进程管理工具，推荐<code>y</code>。</p><p><strong>Start Ghost?</strong></p><p>开始运行。</p><p>接下来你就可以通过你的域名访问你的Ghost初始页面了。</p><p><img src="/2019/11/05/ghost-deploy/image-20191105160427922.png" alt="image-20191105160427922"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Ghost </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔：《向死而生》---我修的死亡学分</title>
      <link href="/2019/11/01/Dairy_2019_9_25/"/>
      <url>/2019/11/01/Dairy_2019_9_25/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;这一篇Blog其实早就应该写了，但是奈何开学前后这段时间各种乱七八糟的事情不断，也察觉到自己最近有些浮躁，很难安静下来写点东西，做点自己喜欢的事情，所以导致我好久没有Update了。今天趁着八月节回家休息，趁着大家都睡觉了，趁着蛐蛐还在叫，趁着月还明，我来讲讲最近发生的事情。</p><span id="more"></span><p>&emsp;最近看了李开复先生的自传—《向死而生》，里面有一句话使我感触颇多：”你的时间有限，所以不要为别人而活；不要被教条所限，不要活在别人的观念里；不要让别人的意见左右自己内心的声音。最重要的是，勇敢地去追随自己的心灵和直觉。只有自己的心灵和直觉才知道自己的真实想法。其他一切都是次要的。”</p><p>&emsp;这句话直击我的内心，其实曾经我是一个容易受别人观点影响的人，会过度解读别人的语言和行为是否是针对自己，然后手足无措。直到后来，在我慢慢建立了自己的观点体系之后，我开始变得“以自我为中心”，根据自己的意愿去做出选择并为之践行。当我迈出选择的第一步前，我也同样会听取别人的观点，但这仅限于选择之间对我来说并没有喜好问题。如果两个选择中，有一个是我喜欢并愿意为之付出的选项，那么我会毫不犹豫的迈向它。发生这种变化的原因，我相信是各个场景、事件在我的成长过程不断糅合的过程产生的。</p><p>&emsp;”不要为别人而活；不要被教条所限，不要活在别人的观念里；不要让别人的意见左右自己内心的声音。”这些话说起来简单，做起来却很难，马克思说：“人类是一切社会关系的总和。”什么意思？人类生来就是一种群居动物，生来就需要与同种群的人类去建立联系，形成部落，形成更强的生产力去维持生活。没有一个人可以脱离种群独自生活几十年，无论是物质上还是精神上。</p><p>&emsp;李开复先生所讲，其实是告诫我们人生匆匆，应该珍惜自己有限的生命，多去做一点自己喜欢的事情，去蹦极、去滑翔、去潜水、去科研、去旅行、去谈一场恋爱，当你回首往事，不因虚度光阴而悔恨，那么人生便是精彩的。“每个人都应有自己对生活的追求，不要只会跟在别人的后面走同样的路，重要的恰恰在于要展现自己的性格，走出与众不同的道路，活出属于自己的生活，却并非要在墓志铭上留下些生么。”</p><p>&emsp;足够了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog从Hexo迁移至Wordpress</title>
      <link href="/2019/10/31/wordpress-deploy/"/>
      <url>/2019/10/31/wordpress-deploy/</url>
      
        <content type="html"><![CDATA[<p>使用Hexo框架搭建Blog有一段时间了，开始之初，惊讶于这种小巧、快速的Blog框架，只需要几个简单的命令就可以将Blog在本地搭建起来，还可以将Blog托管在Github上面，又省去了一笔服务器开销。后来我不满足于Github在国内的加载速度，我又通过学生特惠购置了一台阿里云的服务器，又经过了一番折腾，将我的Blog部署在了云端，这时候Hexo的优势就显现出来了，即使是只有1M的带宽，网站加载依旧十分快速。但是随着使用越来越频繁，一些问题也显现出来，无法进行多终端上传文章，我喜欢用我的iPad进行写文章，当我需要对Blog进行更新时，我就必须使用我的电脑，把我写好的文章，拷进<code>source</code>目录下，然后在通过<code>hexo g -d</code>命令部署上去，这个过程类似与git，只不过我的git仓库在服务器里，这就导致了我只能在一台电脑上对Blog进行部署，当然我也想过其他解决办法，但我觉得实在有些麻烦。另外，部署过程中，也出现了形形色色的bug，大概就是仓库与本地版本不一致的错误，这些bug都不是很难解决的，毕竟hexo十分快速且轻量化，大不了推倒重来。</p><blockquote><p>使用WordPress平台的发行商约占全球网站的10%。而WordPress官方网站的每月独立访问用户数则达到3亿。</p><p>从3.0开始，WordPress已经内置多用户博客的功能，可以通过简单的设置就开设一个支持多域名的博客平台。</p><p>WordPress 是世界上使用最广泛的博客系统之一，是一款开源的PHP软件。因为使用者众多，所以WordPress社区非常活跃，有丰富的插件模板资源。使用WordPress可以快速搭建独立的博客网站。</p><p>WordPress 不仅仅是一个博客程序，也是一款CMS，很多非博客网站也是用WordPress搭建的。</p></blockquote><p>&emsp;&emsp;但是这些种种原因导致我决定放弃Hexo，转至Wordpress，Wordpress没有Hexo那么小巧，Wordpress拥有后台Dashboard、需要数据库连接、拥有大量官方以及第三方插件、在线编辑器，所以很多人认为Wordpress显得有些臃肿。在Hexo出现之际，Wordpress出现一波退坑，其主要原因是Wordpress不支持Markdown语法，对于很多程序猿来说，专注内容、弱化格式的Markdown一直是心头所爱。而Hexo对Markdown的支持，让一部分人舍弃了体量稍大的Wordpress，而去选择了轻量化的Hexo。</p><p>&emsp;&emsp;下面我们开始从零搭建Wordpress。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>官方给出的环境建议如下：</p><blockquote><h1 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h1><h3 id="To-run-WordPress-we-recommend-your-host-supports"><a href="#To-run-WordPress-we-recommend-your-host-supports" class="headerlink" title="To run WordPress we recommend your host supports:"></a>To run WordPress we recommend your host supports:</h3><ul><li><a href="https://secure.php.net/">PHP</a> version 7.3 or greater.</li><li><a href="https://www.mysql.com/">MySQL</a> version 5.6 or greater <em>OR</em> <a href="https://mariadb.org/">MariaDB</a> version 10.1 or greater.</li><li><a href="https://wordpress.org/news/2016/12/moving-toward-ssl/">HTTPS</a> support</li></ul><p>That’s really it. We recommend <a href="https://httpd.apache.org/">Apache</a> or <a href="https://nginx.org/">Nginx</a> as the most robust and featureful server for running WordPress, but any server that supports PHP and MySQL will do. That said, we can’t test every possible environment and <a href="https://wordpress.org/hosting/">each of the hosts on our hosting page</a> supports the above and more with no problems.</p><p>Note: If you are in a legacy environment where you only have older PHP or MySQL versions, WordPress also works with PHP 5.6.20+ and MySQL 5.0+, but these versions have reached official End Of Life and as such <strong>may expose your site to security vulnerabilities</strong>.</p></blockquote><p>首先需要给服务器安装PHP、Mysql，这里我使用了LNMP脚本安装，省去了手动配置等过程。</p><p><a href="https://lnmp.org/">LNMP官网地址</a></p><p>下载最新的LNMP1.6版本。</p><p>在服务器运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://soft.vpser.net/lnmp/lnmp1.6.tar.gz</span><br><span class="line">tar -zxvf lnmp1.6.tar.gz</span><br></pre></td></tr></table></figure><p>解压后进入文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">silver_bullet@Aliyun:~/lnmp$ <span class="built_in">cd</span> lnmp1.6/</span><br><span class="line">//查看文件夹内容</span><br><span class="line">silver_bullet@Aliyun:~/lnmp/lnmp1.6$ ll</span><br><span class="line">total 116</span><br><span class="line">drwxr-xr-x 7 silver_bullet silver_bullet  4096 Jun 19 16:58 ./</span><br><span class="line">drwxrwxr-x 3 silver_bullet silver_bullet  4096 Oct 31 15:34 ../</span><br><span class="line">-rwxr-xr-x 1 silver_bullet silver_bullet  9671 May 26 19:37 addons.sh*</span><br><span class="line">-rw-r--r-- 1 silver_bullet silver_bullet 13722 Dec 31  2018 ChangeLog</span><br><span class="line">drwxr-xr-x 4 silver_bullet silver_bullet  4096 Apr  1  2019 conf/</span><br><span class="line">drwxr-xr-x 2 silver_bullet silver_bullet  4096 Sep 19 14:15 include/</span><br><span class="line">drwxr-xr-x 2 silver_bullet silver_bullet  4096 Mar 13  2019 init.d/</span><br><span class="line">-rwxr-xr-x 1 silver_bullet silver_bullet  5393 Jun 19 16:43 install.sh*</span><br><span class="line">-rw-r--r-- 1 silver_bullet silver_bullet   209 Jul  3  2016 License</span><br><span class="line">-rwxr-xr-x 1 silver_bullet silver_bullet   375 Jan  4  2019 lnmp.conf*</span><br><span class="line">-rwxr-xr-x 1 silver_bullet silver_bullet  5193 Mar 21  2019 pureftpd.sh*</span><br><span class="line">-rw-r--r-- 1 silver_bullet silver_bullet  7131 Jun  4 09:16 README</span><br><span class="line">drwxr-xr-x 3 silver_bullet silver_bullet  4096 Jul  9  2015 src/</span><br><span class="line">drwxr-xr-x 2 silver_bullet silver_bullet  4096 Apr  1  2017 tools/</span><br><span class="line">-rwxr-xr-x 1 silver_bullet silver_bullet  6447 Dec  7  2018 uninstall.sh*</span><br><span class="line">-rwxr-xr-x 1 silver_bullet silver_bullet 14420 Sep 29 14:56 upgrade1.x-1.6.sh*</span><br><span class="line">-rwxr-xr-x 1 silver_bullet silver_bullet  2777 Dec  7  2018 upgrade.sh*</span><br><span class="line">//运行安装</span><br><span class="line">silver_bullet@Aliyun:~/lnmp/lnmp1.6$ ./install.sh </span><br></pre></td></tr></table></figure><p>选择安装的数据库版本，这里我选择了5.6版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------------------------------------------------+</span><br><span class="line">|          LNMP V1.6 for Ubuntu Linux Server, Written by Licess          |</span><br><span class="line">+------------------------------------------------------------------------+</span><br><span class="line">|        A tool to auto-compile &amp; install LNMP/LNMPA/LAMP on Linux       |</span><br><span class="line">+------------------------------------------------------------------------+</span><br><span class="line">|           For more information please visit https://lnmp.org           |</span><br><span class="line">+------------------------------------------------------------------------+</span><br><span class="line">You have 11 options for your DataBase install.</span><br><span class="line">1: Install MySQL 5.1.73</span><br><span class="line">2: Install MySQL 5.5.62 (Default)</span><br><span class="line">3: Install MySQL 5.6.44</span><br><span class="line">4: Install MySQL 5.7.26</span><br><span class="line">5: Install MySQL 8.0.13</span><br><span class="line">6: Install MariaDB 5.5.63</span><br><span class="line">7: Install MariaDB 10.0.38</span><br><span class="line">8: Install MariaDB 10.1.40</span><br><span class="line">9: Install MariaDB 10.2.24</span><br><span class="line">10: Install MariaDB 10.3.15</span><br><span class="line">0: DO NOT Install MySQL/MariaDB</span><br><span class="line">Enter your choice (1, 2, 3, 4, 5, 6, 7, 8, 9, 10 or 0): 3</span><br><span class="line">You will Install MySQL 5.6.44</span><br><span class="line">===========================</span><br><span class="line">Please setup root password of MySQL.</span><br></pre></td></tr></table></figure><p>选择安装的PHP版本，这里建议直接安装最新的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">You have 9 options <span class="keyword">for</span> your PHP install.</span><br><span class="line">1: Install PHP 5.2.17</span><br><span class="line">2: Install PHP 5.3.29</span><br><span class="line">3: Install PHP 5.4.45</span><br><span class="line">4: Install PHP 5.5.38</span><br><span class="line">5: Install PHP 5.6.40 (Default)</span><br><span class="line">6: Install PHP 7.0.33</span><br><span class="line">7: Install PHP 7.1.30</span><br><span class="line">8: Install PHP 7.2.19</span><br><span class="line">9: Install PHP 7.3.6</span><br><span class="line">Enter your choice (1, 2, 3, 4, 5, 6, 7, 8 or 9): 9</span><br></pre></td></tr></table></figure><p>之后敲两次Enter就直接进入安装过程了，这个过程大概需要十几二十分钟，这里一般不会出错，安心等待。</p><p>安装成功后输出信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Oct 31 16:29:28 Aliyun systemd[1]: Starting LSB: start and stop MySQL...</span><br><span class="line">Oct 31 16:29:29 Aliyun mysql[24885]: Starting MySQL. *</span><br><span class="line">Oct 31 16:29:29 Aliyun systemd[1]: Started LSB: start and stop MySQL.</span><br><span class="line">State      Recv-Q Send-Q Local Address:Port               Peer Address:Port  </span><br><span class="line">LISTEN     0      128    127.0.0.1:6012                     *:*              </span><br><span class="line">LISTEN     0      10     127.0.0.1:587                      *:*              </span><br><span class="line">LISTEN     0      128          *:80                       *:*                </span><br><span class="line">LISTEN     0      128          *:22                       *:*                </span><br><span class="line">LISTEN     0      10     127.0.0.1:25                       *:*              </span><br><span class="line">LISTEN     0      128    127.0.0.1:6010                     *:*              </span><br><span class="line">LISTEN     0      128    127.0.0.1:6011                     *:*              </span><br><span class="line">LISTEN     0      128         :::27017                   :::*                </span><br><span class="line">LISTEN     0      128         :::3306                    :::*                </span><br><span class="line">LISTEN     0      128         :::8080                    :::*                </span><br><span class="line">Install lnmp takes 48 minutes.</span><br><span class="line">Install lnmp V1.6 completed! enjoy it.</span><br></pre></td></tr></table></figure><p>安装成功后，输入IP地址，即可显示Nginx欢迎界面。</p><p><img src="/2019/10/31/wordpress-deploy/helloWordpress.png" alt="helloWorldpress"></p><p>此时，网站的根目录在<code>/home/wwwroot/default</code>。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="部署Wordpress"><a href="#部署Wordpress" class="headerlink" title="部署Wordpress"></a>部署Wordpress</h1><h2 id="获取Wordpress"><a href="#获取Wordpress" class="headerlink" title="获取Wordpress"></a>获取Wordpress</h2><p><a href="https://cn.wordpress.org/download/">官网</a>获取Wordpress中文版，下载<code>.tar.gz</code>压缩文件，通过FTP拷贝进服务器，解压缩。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">silver_bullet@Aliyun:~/wordpress$ ll</span><br><span class="line">total 11540</span><br><span class="line">drwxrwxr-x  2 silver_bullet silver_bullet     4096 Oct 31 18:21 ./</span><br><span class="line">drwxr-xr-x 12 silver_bullet silver_bullet     4096 Oct 31 16:25 ../</span><br><span class="line">-rw-rw-r--  1 silver_bullet silver_bullet 11805777 Oct 31 18:20 wordpress-5.2.4-zh_CN.tar.gz</span><br><span class="line">silver_bullet@Aliyun:~/wordpress$ tar -zxvf wordpress-5.2.4-zh_CN.tar.gz </span><br></pre></td></tr></table></figure><h2 id="替换Nginx页面"><a href="#替换Nginx页面" class="headerlink" title="替换Nginx页面"></a>替换Nginx页面</h2><p>将解压所得<code>wordpress</code>文件夹拷贝至网站的根目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r wordpress /www/wwwroot/</span><br></pre></td></tr></table></figure><p>将原有的<code>default</code>文件夹改名为<code>old</code>，并且将拷贝进去的<code>wordpress</code>文件夹改名为<code>default</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv default/ old</span><br><span class="line">sudo mv wordpress/ default</span><br></pre></td></tr></table></figure><h2 id="给目录授权"><a href="#给目录授权" class="headerlink" title="给目录授权"></a>给目录授权</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目录以及目录下的文件授权</span></span><br><span class="line">chown -R 755 /home/wwwroot</span><br><span class="line">chown: changing ownership of ‘/home/wwwroot/old/.user.ini’: Operation not permitted</span><br><span class="line"><span class="comment"># 将目录的所有者分给www组下的www用户。</span></span><br><span class="line">chown -R www:www /home/wwwroot/</span><br><span class="line">chown: changing ownership of ‘/home/wwwroot/old/.user.ini’: Operation not permitted</span><br></pre></td></tr></table></figure><p> 出现的提示大概是说有一个文件无法更改用户分组和权限。不会影响你的wordpress，可以忽略。</p><h1 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h1><p>登陆数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>创建数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database wordpress;</span><br></pre></td></tr></table></figure><p>查看创建情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| wordpress          |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>之后退出即可。</p><h1 id="配置Wordpress"><a href="#配置Wordpress" class="headerlink" title="配置Wordpress"></a>配置Wordpress</h1><p>访问服务器IP，即可进入Wordpress初始化：</p><p><img src="/2019/10/31/wordpress-deploy/start.png" alt="start"></p><p>现在开始！</p><p>配置你的数据库：</p><p><img src="/2019/10/31/wordpress-deploy/start2.png" alt="start2"></p><p>提交后，经过短暂的安装过程，即可进入Wordpress的Dashboard了。</p><p><img src="/2019/10/31/wordpress-deploy/start3.png" alt="start3"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>作为一名内容产出者，不同的Blog框架的确可以给我们带来不同的体验和便利，但作为Blog本身，我认为更重要的始终是内容本身，无论使用什么框架建站，我始终希望坚持写作，才是技术分享、生活分享最原生的动力。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Blog </tag>
            
            <tag> Wordpress </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB在Windows环境下部署</title>
      <link href="/2019/09/30/MongoDB-build/"/>
      <url>/2019/09/30/MongoDB-build/</url>
      
        <content type="html"><![CDATA[<p>MongoDB在Windows环境下搭建相较于Hbase在集群环境中搭建要简单不少，不需要过多配置文件，属于傻瓜式操作，在安装过程中所遇到的一些问题，我会记录在这里。</p><span id="more"></span><h1 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h1><h2 id="获取安装包"><a href="#获取安装包" class="headerlink" title="获取安装包"></a>获取安装包</h2><p>建议通过<a href="https://www.mongodb.com/dr/fastdl.mongodb.org/win32/mongodb-win32-x86_64-2012plus-4.2.0-signed.msi/download">官网下载</a>安装包。</p><h2 id="运行安装"><a href="#运行安装" class="headerlink" title="运行安装"></a>运行安装</h2><p>运行msi文件：</p><p><img src="/2019/09/30/MongoDB-build/install-1.png" alt="install-1"></p><p>自定义设置：</p><p><img src="/2019/09/30/MongoDB-build/install-2.png" alt="install-2"></p><p>这里我们使用Complete安装。</p><p>之后就是next、next…</p><p>需要注意的是这里：</p><p><img src="/2019/09/30/MongoDB-build/install-5.png" alt="install-5"></p><p>这里默认安装MongoDB的一个图形化界面管理工具，我们需要把它勾掉，之后手动安装，因为采用自动安装，需要耗费大量时间，大概率会无法完成安装。</p><p>开始安装：</p><p><img src="/2019/09/30/MongoDB-build/install-4.png" alt="install-4"></p><p>安装完成：</p><p><img src="/2019/09/30/MongoDB-build/install-6.png" alt="install-6"></p><h1 id="安装MongoDB-compass"><a href="#安装MongoDB-compass" class="headerlink" title="安装MongoDB-compass"></a>安装MongoDB-compass</h1><h2 id="获取安装包-1"><a href="#获取安装包-1" class="headerlink" title="获取安装包"></a>获取安装包</h2><p>建议通过<a href="https://www.mongodb.com/download-center/compass">官网下载</a>安装包。</p><h2 id="运行安装-1"><a href="#运行安装-1" class="headerlink" title="运行安装"></a>运行安装</h2><p>双击msi文件运行：</p><p><img src="/2019/09/30/MongoDB-build/install-7.png" alt="install-7"></p><p>Next…Next…</p><p><img src="/2019/09/30/MongoDB-build/install-8.png" alt="install-8"></p><p>选择自己的安装路径：</p><p><img src="/2019/09/30/MongoDB-build/install-9.png" alt="install-9"></p><p>之后就是Next &amp; install。</p><p>至此MondoDB便已安装完成。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> NoSQL </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署Hadoop集群</title>
      <link href="/2019/09/30/Hadoop-build/"/>
      <url>/2019/09/30/Hadoop-build/</url>
      
        <content type="html"><![CDATA[<p>适逢非关系数据库老师布置了课后作业，要我们搭建一个Hbase和MongoDB数据库，而我又得知Hbase可以通过集群搭建提高性能，所以我打算在自己的桌面环境下尝试一下，过程中遇到的一些问题，我会记录在这里。</p><span id="more"></span><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li><p>OS : Ubuntu 16.04</p></li><li><p>JDK : 1.8</p></li><li><p>Hadoop : 3.2.1</p><table><thead><tr><th align="center">服务器</th><th align="center">IP地址</th></tr></thead><tbody><tr><td align="center">hadoop-master</td><td align="center">192.168.41.141</td></tr><tr><td align="center">hadoop-node01</td><td align="center">192.168.41.142</td></tr><tr><td align="center">hadoop-node02</td><td align="center">192.168.41.143</td></tr></tbody></table></li></ul><h1 id="修改host文件"><a href="#修改host文件" class="headerlink" title="修改host文件"></a>修改host文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure><p>加入如下几行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.41.141  hadoop-master</span><br><span class="line">192.168.41.142  hadoop-node01</span><br><span class="line">192.168.41.143  hadoop-node02</span><br></pre></td></tr></table></figure><p>三台服务器的host文件都需要修改，修改之后运行命令<code>source /etc/hosts</code>使其生效。</p><h1 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h1><p>首先需要通过创建SSH实现三台服务器之间的免密登陆。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>生成的公钥保存在<code>～/.ssh</code>下，此时需要把公钥放入<code>authorized_keys</code>，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ～/.ssh/id_rsa.pub &gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>之后，我们应该在另外两台服务器上创建SSH，并且将自己服务器上的公钥放入Master服务器的<code>authorized_keys</code>里，实现三台服务器之间的免密登陆。</p><p>这里我为了方便，我直接将<code>~/.ssh</code>复制到了另外两台服务器的<code>~/</code>位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/.ssh root@hadoop-node01:~/.ssh</span><br><span class="line">scp -r ~/.ssh root@hadoop-node02:~/.ssh</span><br></pre></td></tr></table></figure><p>通过如下命令即可验证配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@hadoop-master:/<span class="comment"># ssh hadoop-node01</span></span><br><span class="line">Welcome to Ubuntu 16.04 LTS (GNU/Linux 4.4.0-21-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com/</span><br><span class="line"></span><br><span class="line">234 packages can be updated.</span><br><span class="line">149 updates are security updates.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Last login: Mon Sep 30 11:09:53 2019 from ::1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="配置Hadoop"><a href="#配置Hadoop" class="headerlink" title="配置Hadoop"></a>配置Hadoop</h1><h2 id="获取Hadoop"><a href="#获取Hadoop" class="headerlink" title="获取Hadoop"></a>获取Hadoop</h2><p>运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/stable/hadoop-3.2.1-src.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hadoop-3.2.1-src.tar.gz </span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><h3 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi hadoop-env.sh</span><br><span class="line">//添加JDK安装路径</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk/jdk1.8.0_221/</span><br></pre></td></tr></table></figure><h3 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vi core-site.xml</span><br><span class="line">//添加如下配置</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">//文件系统用HDFS</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class="line">//namenode的地址</span><br><span class="line">&lt;value&gt;hdfs://hadoop-master:9000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">//临时文件的存放路径</span><br><span class="line">&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;/root/hadoop/hdfs/tmp&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vi mapred-site.xml</span><br><span class="line"></span><br><span class="line">//添加如下配置</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">//配置mapreduce运行的平台，默认为<span class="built_in">local</span>本地平台模拟运行，而不是在集群上分布式运行，只是一个单机的程序，这里配置yarn平台运行，负责分配内存</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;       </span><br></pre></td></tr></table></figure><h3 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vi yarn-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">//指定yarn的resourcemanager地址</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcecemanager.hostname&lt;/name&gt;</span><br><span class="line">&lt;value&gt;hadoop-master&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">//reducer获取数据方式</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">//忽略虚拟内存的检查，如果是在实体机上，并且内存够多，可以去掉</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;/name&gt;</span><br><span class="line">&lt;value&gt;<span class="literal">false</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//添加如下内容</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">//hdfs的副本数量</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">&lt;value&gt;2&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">//Hadoop NameNode运行端口，在通过192.168.41.141：50070访问</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.namenode.http-address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;hadoop-master:50070&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">//存储上传数据的路径</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.name.dir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;/root/hadoop/hdfs/data&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">//存储namenode的路径</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.name.dir&lt;/name&gt;</span><br><span class="line">&lt;value&gt;/root/hadoop/hdfs/name&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">//设置为<span class="literal">false</span>可以不用检查路径</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class="line">&lt;value&gt;<span class="literal">false</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="workers"><a href="#workers" class="headerlink" title="workers"></a>workers</h3><p>在Hadoop:2.9.1版本中，该配置文件为<code>slaves</code>，但是在3.2版本中，文件更名为<code>workers</code>，在部署过程中，这里尤其要注意，我就是因为没有注意，在master上开启Hadoop后，Node节点上并没有相继运行<code>datanode</code>和<code>nodemanager</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi workers</span><br><span class="line"></span><br><span class="line">//添加如下内容</span><br><span class="line">hadoop-node01</span><br><span class="line">hadoop-node02</span><br></pre></td></tr></table></figure><h2 id="部署Hadoop"><a href="#部署Hadoop" class="headerlink" title="部署Hadoop"></a>部署Hadoop</h2><p>将修改后的Hadoop文件夹拷贝至Node01、Node02节点上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /root/hadoop root@hadoop-node01:/root/</span><br><span class="line">scp -r /root/hadoop root@hadoop-node02:/root/</span><br></pre></td></tr></table></figure><p>并且修改环境变量，添加如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">//添加如下</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=~/hadoop/</span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line"><span class="built_in">export</span> HADOOP_OPTS=-Djava.library.path=<span class="variable">$HADOOP_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin:<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h2><p>执行<code>start-all.sh</code>启动Hadoop：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@hadoop-master:~/hadoop/etc/hadoop<span class="comment"># start-all.sh </span></span><br><span class="line">Starting namenodes on [hadoop-master]</span><br><span class="line">Starting datanodes</span><br><span class="line">Starting secondary namenodes [hadoop-master]</span><br><span class="line">2019-09-30 19:10:07,637 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using builtin-java classes <span class="built_in">where</span> applicable</span><br><span class="line">Starting resourcemanager</span><br><span class="line">Starting nodemanagers</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在Master节点上可以通过执行<code>jps</code>命令查看启动的进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@hadoop-master:~/hadoop/etc/hadoop<span class="comment"># jps</span></span><br><span class="line">20241 Jps</span><br><span class="line">19857 SecondaryNameNode</span><br><span class="line">126115 NodeManager</span><br><span class="line">125540 DataNode</span><br><span class="line">20088 ResourceManager</span><br><span class="line">19626 NameNode</span><br></pre></td></tr></table></figure><p>Node节点上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@hadoop-node01:~/hadoop/etc/hadoop<span class="comment"># jps</span></span><br><span class="line">122113 NodeManager</span><br><span class="line">121974 DataNode</span><br><span class="line">122942 Jps</span><br></pre></td></tr></table></figure><p>至此，Hadoop部署成功。</p><p>可以在通过访问192.168.41.141:50070访问web页面：</p><p><img src="/2019/09/30/Hadoop-build/hadoop-web.png" alt="hadoop-web"></p><h1 id="配置Hbase"><a href="#配置Hbase" class="headerlink" title="配置Hbase"></a>配置Hbase</h1><h2 id="获取Hbase"><a href="#获取Hbase" class="headerlink" title="获取Hbase"></a>获取Hbase</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirror.bit.edu.cn/apache/hbase/2.2.1/hbase-2.2.1-bin.tar.gz  </span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hbase-2.2.1-bin.tar.gz  </span><br></pre></td></tr></table></figure><p>重命名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv hbase-2.2.1 hbase </span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>把Hbase的路径添加到环境变量中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">//添加如下</span><br><span class="line"><span class="built_in">export</span> HBASE_HOME=/home/wang/hbase</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HBASE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>运行<code>source /etc/profile</code>使之生效。</p><h2 id="修改配置文件（conf文件夹下）"><a href="#修改配置文件（conf文件夹下）" class="headerlink" title="修改配置文件（conf文件夹下）"></a>修改配置文件（conf文件夹下）</h2><h3 id="hbase-env-sh"><a href="#hbase-env-sh" class="headerlink" title="hbase-env.sh"></a>hbase-env.sh</h3><p>修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The java implementation to use.  Java 1.8+ required.</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk/jdk1.8.0_221</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extra Java CLASSPATH elements.  Optional.</span></span><br><span class="line"><span class="built_in">export</span> JAVA_CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="comment"># Where log files are stored.  $HBASE_HOME/logs by default.</span></span><br><span class="line"><span class="built_in">export</span> HBASE_LOG_DIR=/root/hbase/logs</span><br><span class="line"><span class="comment"># Tell HBase whether it should manage it&#x27;s own instance of ZooKeeper or not.</span></span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=tru</span><br></pre></td></tr></table></figure><h3 id="hbase-site-xml"><a href="#hbase-site-xml" class="headerlink" title="hbase-site.xml"></a>hbase-site.xml</h3><p>修改如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master:6000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop-master:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hbase/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/zookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master,hadoop-node01,hadoop-node02<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="regionservers"><a href="#regionservers" class="headerlink" title="regionservers"></a>regionservers</h3><p>修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop-node01</span><br><span class="line">hadoop-node02</span><br></pre></td></tr></table></figure><h2 id="部署Hbase"><a href="#部署Hbase" class="headerlink" title="部署Hbase"></a>部署Hbase</h2><p>将修改后的Hbase文件夹拷贝至Node01、Node02节点上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /root/hbase root@hadoop-node01:/root/</span><br><span class="line">scp -r /root/hbase root@hadoop-node02:/root/</span><br></pre></td></tr></table></figure><p>并且修改环境变量。</p><h2 id="启动Hbase"><a href="#启动Hbase" class="headerlink" title="启动Hbase"></a>启动Hbase</h2><p>执行<code>start-hbse.sh</code>启动Hbase：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@hadoop-master:~/zookeeper<span class="comment"># start-hbase.sh </span></span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/root/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/root/hbase/lib/client-facing-thirdparty/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html<span class="comment">#multiple_bindings for an explanation.</span></span><br><span class="line">SLF4J: Actual binding is of <span class="built_in">type</span> [org.slf4j.impl.Log4jLoggerFactory]</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/root/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/root/hbase/lib/client-facing-thirdparty/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html<span class="comment">#multiple_bindings for an explanation.</span></span><br><span class="line">SLF4J: Actual binding is of <span class="built_in">type</span> [org.slf4j.impl.Log4jLoggerFactory]</span><br><span class="line">hadoop-master: running zookeeper, logging to /root/hbase/logs/hbase-root-zookeeper-hadoop-master.out</span><br><span class="line">hadoop-node02: running zookeeper, logging to /root/hbase/logs/hbase-root-zookeeper-hadoop-node02.out</span><br><span class="line">hadoop-node01: running zookeeper, logging to /root/hbase/logs/hbase-root-zookeeper-hadoop-node01.out</span><br><span class="line">running master, logging to /root/hbase/logs/hbase-root-master-hadoop-master.out</span><br><span class="line">hadoop-node01: running regionserver, logging to /root/hbase/logs/hbase-root-regionserver-hadoop-node01.out</span><br><span class="line">hadoop-node02: running regionserver, logging to /root/hbase/logs/hbase-root-regionserver-hadoop-node02.out</span><br></pre></td></tr></table></figure><p>运行bash shell：</p><p><img src="/2019/09/30/Hadoop-build/bash-shell.png" alt="bash-shell"></p><p>至此，集群下的Hbase搭建完成。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> NoSQL </tag>
            
            <tag> Hbase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘阅：《年少荒唐》 - 朱炫</title>
      <link href="/2019/07/17/Extract-NianShaoHuangTang/"/>
      <url>/2019/07/17/Extract-NianShaoHuangTang/</url>
      
        <content type="html"><![CDATA[<p>明月大江、西风烈马、窗明几净。</p><p>绿毛水怪、匪人侠士、鱼汤浪子。</p><p>明媚妖娆、疯魔寻死、细雪柔情。</p><span id="more"></span><ul><li>“我说谢晨你回来吧，我肯定能挣着钱。我买了房，天天不重样地跟你做爱，买四张无上限的信用卡，三张用来刷，一张用来练镖。” 朋友替我说完，盯着我，一个字，一个字地问我，傻不傻。</li><li>何必如此冲动，何必轻躁癫狂，雪这么大，不如饮酒，人生不如意，十之八九。</li><li>你明白了，你就狂不来，你什么都懂了，你就跑不动，于是只叫轻狂静坐圆寂，烧成了一把荒唐。</li><li>说了那么多的情话，却终究不敌一句缘分已尽。</li><li>爱情不会让人智商降低，它很可能直接将你打成傻逼。</li><li>这条古怪的立交桥，就像巨兽的嘴，布满错综复杂的利齿与根节交错的脉络。传说这里是北京城的四个龙眼之一，有无穷的怨气，常年堵塞，可此刻，一阵狂风骤至，天云拨开，形成一道深邃的气旋，如同天穹之眼窥伺而下。</li><li>有一天你会明白的，会有那么一个时候，你愿意拔剑生死，宝剑出鞘，就有了永不回头的觉悟。那些所谓的行侠仗义，劫富济贫，与你那时候的理由相比，统统都不值一提。</li><li>我腰中木剑轻薄，她偏说我是剑客，说我以一当百，开天辟地，好像她的世界里从头到尾只有一本书，书里写的都是我的不可思议。</li><li>时刻准备着迎接生活给你的大部分痛苦，那些排山倒海的不如意，你必须有所准备。</li><li>不踏过这座尸山，就无法抵达光荣。</li><li>这世上有些人，他们以为地理距离就是心的距离，以为我在你身边，就总会拥有你。可这不是真的，就算你搂着她，吻着她，剥光了她，她依然可以不爱你，铁石心肠，冰封万里，问题根本不是距离。</li><li>过了很久我才明白，这些曾经以为奔流到海的东西，亦不过浮光掠影，轻松一笔。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 摘阅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes安装部署</title>
      <link href="/2019/07/16/Kubernetes-install/"/>
      <url>/2019/07/16/Kubernetes-install/</url>
      
        <content type="html"><![CDATA[<p>本次安装采用 Ubuntu Server X64 16.04 LTS 版本安装 kubernetes 集群环境集群节点为 1 主 2 从模式。</p><span id="more"></span><p>创建三台虚拟机，分别命名如下：</p><ul><li>Ubuntu Server 16.04 X64 Kubernetes Master</li><li>Ubuntu Server 16.04 X64 Kubernetes Slave1</li><li>Ubuntu Server 16.04 X64 Kubernetes Slave2</li></ul><p>对虚拟机系统的配置：</p><ul><li>关闭交换空间：<code>sudo swapoff -a</code></li><li>避免开机启动交换空间：注释 <code>/etc/fstab</code> 中的 <code>swap</code></li><li>关闭防火墙：<code>ufw disable</code></li></ul><!--more--><h1 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h1><h2 id="对操作系统的准备"><a href="#对操作系统的准备" class="headerlink" title="对操作系统的准备"></a>对操作系统的准备</h2><h4 id="关闭交换空间"><a href="#关闭交换空间" class="headerlink" title="关闭交换空间"></a>关闭交换空间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br></pre></td></tr></table></figure><h4 id="避免开机启动交换空间"><a href="#避免开机启动交换空间" class="headerlink" title="避免开机启动交换空间"></a>避免开机启动交换空间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释 swap 开头的行</span></span><br><span class="line">vi /etc/fstab</span><br></pre></td></tr></table></figure><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><h4 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取消 DNS 行注释，并增加 DNS 配置如：114.114.114.114，修改后重启下计算机</span></span><br><span class="line">vi /etc/systemd/resolved.conf</span><br></pre></td></tr></table></figure><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>此处不作赘述，可参见<a href="http://giottolee.com/2019/05/21/Docker-Help/">Docker安装与简介</a>，本文中采取的是脚本安装方式，如脚本安装不成功，可使用APT安装方式。</p><h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><p>在同一局域网中主机名不应该相同，所以我们需要做修改，下列操作步骤为修改 <strong>18.04</strong> 版本的 Hostname，如果是 <code>16.04 </code>或以下版本则直接修改 <code>/etc/hostname</code> 里的名称即可</p><h3 id="查看当前-Hostname"><a href="#查看当前-Hostname" class="headerlink" title="查看当前 Hostname"></a>查看当前 Hostname</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前主机名</span></span><br><span class="line">hostnamectl</span><br><span class="line"><span class="comment"># 显示如下内容</span></span><br><span class="line">   Static hostname: ubuntu</span><br><span class="line">         Icon name: computer-vm</span><br><span class="line">           Chassis: vm</span><br><span class="line">        Machine ID: 33011e0a95094672b99a198eff07f652</span><br><span class="line">           Boot ID: dc856039f0d24164a9f8a50c506be96d</span><br><span class="line">    Virtualization: vmware</span><br><span class="line">  Operating System: Ubuntu 18.04.2 LTS</span><br><span class="line">            Kernel: Linux 4.15.0-48-generic</span><br><span class="line">      Architecture: x86-64</span><br></pre></td></tr></table></figure><h3 id="修改-Hostname"><a href="#修改-Hostname" class="headerlink" title="修改 Hostname"></a>修改 Hostname</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 hostnamectl 命令修改，其中 kubernetes-master 为新的主机名</span></span><br><span class="line">hostnamectl set-hostname kubernetes-master</span><br></pre></td></tr></table></figure><h3 id="修改-cloud-cfg"><a href="#修改-cloud-cfg" class="headerlink" title="修改 cloud.cfg"></a>修改 cloud.cfg</h3><p>如果 <code>cloud-init package</code> 安装了，需要修改 <code>cloud.cfg</code> 文件。该软件包通常缺省安装用于处理 cloud。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果有该文件</span></span><br><span class="line">vi /etc/cloud/cloud.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该配置默认为 false，修改为 true 即可</span></span><br><span class="line">preserve_hostname: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Ubuntu18.04版本通常预装了<code>cloud-init package</code>，如果使用的是<code>16.04</code>版本，可手动安装</p><h4 id="安装cloud-init-package"><a href="#安装cloud-init-package" class="headerlink" title="安装cloud-init package"></a>安装cloud-init package</h4><p>注：安装cloud-init package需要安装<code>python</code>，可通过<code>apt-get install python3</code>安装即可。</p><p>  1.下载阿里云版本cloud-init并解压到当前目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://ecs-image-utils.oss-cn-hangzhou.aliyuncs.com/cloudinit/ali-cloud-init-latest.tgz</span><br><span class="line">tar -zxvf ali-cloud-init-latest.tgz</span><br></pre></td></tr></table></figure><ol start="2"><li>进入cloud-init的tools目录，执行cloud-init安装脚本deploy.sh：</li></ol> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ./deploy.sh &lt;issue&gt; &lt;major_version&gt;</span><br></pre></td></tr></table></figure><ul><li><p>参数说明如下：</p><ul><li><strong>issue</strong>：操作系统平台类型，取值范围：centos | redhat |rhel | debian | ubuntu | opensuse | sles。参数取值均大小写敏感，其中sles表示SUSE/SLES。</li><li><strong>major_version</strong>：操作系统平台主要版本号。例如，CentOS 6.5的主要版本号为6。</li></ul></li><li><p>命令示例如下：</p><ul><li><p>在CentOS 6.5中安装cloud-init：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ./deploy.sh centos 6</span><br></pre></td></tr></table></figure></li><li><p>在Ubuntu 14.04中安装cloud-init：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ./deploy.sh ubuntu 14</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="3"><li>确认是否成功安装。若返回<code>&quot;description&quot;: &quot;success&quot;</code>，表示安装成功。</li></ol><p>  <img src="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/9704/155861125437025_zh-CN.png" alt="img"></p><blockquote><p><strong>报错：no setuptools module in python</strong></p><p>报错信息提示 ，表示您需要安装python setuptools。通过以下方式解决：</p><ul><li>CentOS/RedHat：<code>yum -y install python-pip</code></li><li>Ubuntu/Debian：<code>apt-get -y install python-pip</code></li><li>OpenSUSE/SUSE：<code>zypper -n install python-pip</code></li></ul></blockquote><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@kubernetes-master:~<span class="comment"># hostnamectl</span></span><br><span class="line">   Static hostname: kubernetes-master</span><br><span class="line">         Icon name: computer-vm</span><br><span class="line">           Chassis: vm</span><br><span class="line">        Machine ID: 33011e0a95094672b99a198eff07f652</span><br><span class="line">           Boot ID: 8c0fd75d08c644abaad3df565e6e4cbd</span><br><span class="line">    Virtualization: vmware</span><br><span class="line">  Operating System: Ubuntu 18.04.2 LTS</span><br><span class="line">            Kernel: Linux 4.15.0-48-generic</span><br><span class="line">      Architecture: x86-64</span><br></pre></td></tr></table></figure><h1 id="安装Kubeadm"><a href="#安装Kubeadm" class="headerlink" title="安装Kubeadm"></a>安装Kubeadm</h1><p>kubeadm 是 kubernetes 的集群安装工具，能够快速安装 kubernetes 集群。</p><h2 id="配置软件源"><a href="#配置软件源" class="headerlink" title="配置软件源"></a>配置软件源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装系统工具</span></span><br><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class="line"><span class="comment"># 安装 GPG 证书</span></span><br><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line"><span class="comment"># 写入软件源；注意：我们用系统代号为 bionic，但目前阿里云不支持，所以沿用 16.04 的 xenial</span></span><br><span class="line">cat &lt;&lt; <span class="string">EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span></span><br><span class="line"><span class="string">&gt; deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span></span><br><span class="line"><span class="string">&gt; EOF</span></span><br></pre></td></tr></table></figure><h2 id="安装-kubeadm，kubelet，kubectl"><a href="#安装-kubeadm，kubelet，kubectl" class="headerlink" title="安装 kubeadm，kubelet，kubectl"></a>安装 kubeadm，kubelet，kubectl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">apt-get update  </span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装过程如下，注意 kubeadm 的版本号</span></span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  conntrack cri-tools kubernetes-cni socat</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  conntrack cri-tools kubeadm kubectl kubelet kubernetes-cni socat</span><br><span class="line">0 upgraded, 7 newly installed, 0 to remove and 96 not upgraded.</span><br><span class="line">Need to get 50.6 MB of archives.</span><br><span class="line">After this operation, 290 MB of additional disk space will be used.</span><br><span class="line">Get:1 http://mirrors.aliyun.com/ubuntu bionic/main amd64 conntrack amd64 1:1.4.4+snapshot20161117-6ubuntu2 [30.6 kB]</span><br><span class="line">Get:2 http://mirrors.aliyun.com/ubuntu bionic/main amd64 socat amd64 1.7.3.2-2ubuntu2 [342 kB]</span><br><span class="line">Get:3 https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 cri-tools amd64 1.12.0-00 [5,343 kB]</span><br><span class="line">Get:4 https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 kubernetes-cni amd64 0.7.5-00 [6,473 kB]</span><br><span class="line">Get:5 https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 kubelet amd64 1.14.1-00 [21.5 MB]</span><br><span class="line">Get:6 https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 kubectl amd64 1.14.1-00 [8,806 kB]</span><br><span class="line">Get:7 https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 kubeadm amd64 1.14.1-00 [8,150 kB]</span><br><span class="line">Fetched 50.6 MB <span class="keyword">in</span> 5s (9,912 kB/s) </span><br><span class="line">Selecting previously unselected package conntrack.</span><br><span class="line">(Reading database ... 67205 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../0-conntrack_1%3a1.4.4+snapshot20161117-6ubuntu2_amd64.deb ...</span><br><span class="line">Unpacking conntrack (1:1.4.4+snapshot20161117-6ubuntu2) ...</span><br><span class="line">Selecting previously unselected package cri-tools.</span><br><span class="line">Preparing to unpack .../1-cri-tools_1.12.0-00_amd64.deb ...</span><br><span class="line">Unpacking cri-tools (1.12.0-00) ...</span><br><span class="line">Selecting previously unselected package kubernetes-cni.</span><br><span class="line">Preparing to unpack .../2-kubernetes-cni_0.7.5-00_amd64.deb ...</span><br><span class="line">Unpacking kubernetes-cni (0.7.5-00) ...</span><br><span class="line">Selecting previously unselected package socat.</span><br><span class="line">Preparing to unpack .../3-socat_1.7.3.2-2ubuntu2_amd64.deb ...</span><br><span class="line">Unpacking socat (1.7.3.2-2ubuntu2) ...</span><br><span class="line">Selecting previously unselected package kubelet.</span><br><span class="line">Preparing to unpack .../4-kubelet_1.14.1-00_amd64.deb ...</span><br><span class="line">Unpacking kubelet (1.14.1-00) ...</span><br><span class="line">Selecting previously unselected package kubectl.</span><br><span class="line">Preparing to unpack .../5-kubectl_1.14.1-00_amd64.deb ...</span><br><span class="line">Unpacking kubectl (1.14.1-00) ...</span><br><span class="line">Selecting previously unselected package kubeadm.</span><br><span class="line">Preparing to unpack .../6-kubeadm_1.14.1-00_amd64.deb ...</span><br><span class="line">Unpacking kubeadm (1.14.1-00) ...</span><br><span class="line">Setting up conntrack (1:1.4.4+snapshot20161117-6ubuntu2) ...</span><br><span class="line">Setting up kubernetes-cni (0.7.5-00) ...</span><br><span class="line">Setting up cri-tools (1.12.0-00) ...</span><br><span class="line">Setting up socat (1.7.3.2-2ubuntu2) ...</span><br><span class="line">Setting up kubelet (1.14.1-00) ...</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/kubelet.service → /lib/systemd/system/kubelet.service.</span><br><span class="line">Setting up kubectl (1.14.1-00) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> man-db (2.8.3-2ubuntu0.1) ...</span><br><span class="line"><span class="comment"># 注意这里的版本号，我们使用的是 kubernetes v1.14.1</span></span><br><span class="line">Setting up kubeadm (1.14.1-00) ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 kubelet 自启动，并启动 kubelet</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><ul><li>kubeadm：用于初始化 Kubernetes 集群</li><li>kubectl：Kubernetes 的命令行工具，主要作用是部署和管理应用，查看各种资源，创建，删除和更新组件</li><li>kubelet：主要负责启动 Pod 和容器</li></ul><h2 id="安装-kubernetes-主节点"><a href="#安装-kubernetes-主节点" class="headerlink" title="安装 kubernetes 主节点"></a>安装 kubernetes 主节点</h2><p>执行以下命令初始化主节点，该命令指定了初始化时需要使用的配置文件，其中添加 <code>--experimental-upload-certs</code> 参数可以在后续执行加入节点时自动分发证书文件。追加的 <code>tee kubeadm-init.log</code> 用以输出日志。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --config=kubeadm.yml --experimental-upload-certs | tee kubeadm-init.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装成功则会有如下输出</span></span><br><span class="line">[init] Using Kubernetes version: v1.14.1</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">        [WARNING IsDockerSystemdCheck]: detected <span class="string">&quot;cgroupfs&quot;</span> as the Docker cgroup driver. The recommended driver is <span class="string">&quot;systemd&quot;</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class="line">[preflight] Pulling images required <span class="keyword">for</span> setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action <span class="keyword">in</span> beforehand using <span class="string">&#x27;kubeadm config images pull&#x27;</span></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[certs] Using certificateDir folder <span class="string">&quot;/etc/kubernetes/pki&quot;</span></span><br><span class="line">[certs] Generating <span class="string">&quot;ca&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;apiserver&quot;</span> certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed <span class="keyword">for</span> DNS names [kubernetes-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.141.130]</span><br><span class="line">[certs] Generating <span class="string">&quot;apiserver-kubelet-client&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;front-proxy-ca&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;front-proxy-client&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;etcd/ca&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;etcd/peer&quot;</span> certificate and key</span><br><span class="line">[certs] etcd/peer serving cert is signed <span class="keyword">for</span> DNS names [kubernetes-master localhost] and IPs [192.168.141.130 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">&quot;etcd/server&quot;</span> certificate and key</span><br><span class="line">[certs] etcd/server serving cert is signed <span class="keyword">for</span> DNS names [kubernetes-master localhost] and IPs [192.168.141.130 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">&quot;etcd/healthcheck-client&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;apiserver-etcd-client&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;sa&quot;</span> key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder <span class="string">&quot;/etc/kubernetes&quot;</span></span><br><span class="line">[kubeconfig] Writing <span class="string">&quot;admin.conf&quot;</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">&quot;kubelet.conf&quot;</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">&quot;controller-manager.conf&quot;</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">&quot;scheduler.conf&quot;</span> kubeconfig file</span><br><span class="line">[control-plane] Using manifest folder <span class="string">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">&quot;kube-apiserver&quot;</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">&quot;kube-controller-manager&quot;</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">&quot;kube-scheduler&quot;</span></span><br><span class="line">[etcd] Creating static Pod manifest <span class="keyword">for</span> <span class="built_in">local</span> etcd <span class="keyword">in</span> <span class="string">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class="line">[wait-control-plane] Waiting <span class="keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="string">&quot;/etc/kubernetes/manifests&quot;</span>. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 20.003326 seconds</span><br><span class="line">[upload-config] storing the configuration used <span class="keyword">in</span> ConfigMap <span class="string">&quot;kubeadm-config&quot;</span> <span class="keyword">in</span> the <span class="string">&quot;kube-system&quot;</span> Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap <span class="string">&quot;kubelet-config-1.14&quot;</span> <span class="keyword">in</span> namespace kube-system with the configuration <span class="keyword">for</span> the kubelets <span class="keyword">in</span> the cluster</span><br><span class="line">[upload-certs] Storing the certificates <span class="keyword">in</span> ConfigMap <span class="string">&quot;kubeadm-certs&quot;</span> <span class="keyword">in</span> the <span class="string">&quot;kube-system&quot;</span> Namespace</span><br><span class="line">[upload-certs] Using certificate key:</span><br><span class="line">2cd5b86c4905c54d68cc7dfecc2bf87195e9d5d90b4fff9832d9b22fc5e73f96</span><br><span class="line">[mark-control-plane] Marking the node kubernetes-master as control-plane by adding the label <span class="string">&quot;node-role.kubernetes.io/master=&#x27;&#x27;&quot;</span></span><br><span class="line">[mark-control-plane] Marking the node kubernetes-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: abcdef.0123456789abcdef</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="keyword">in</span> order <span class="keyword">for</span> nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation <span class="keyword">for</span> all node client certificates <span class="keyword">in</span> the cluster</span><br><span class="line">[bootstrap-token] creating the <span class="string">&quot;cluster-info&quot;</span> ConfigMap <span class="keyword">in</span> the <span class="string">&quot;kube-public&quot;</span> namespace</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后面子节点加入需要如下命令</span></span><br><span class="line">kubeadm join 192.168.141.130:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:cab7c86212535adde6b8d1c7415e81847715cfc8629bb1d270b601744d662515</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果安装 kubernetes 版本和下载的镜像版本不统一则会出现 <code>timed out waiting for the condition</code> 错误。中途失败或是想修改配置可以使用 <code>kubeadm reset</code> 命令重置配置，再做初始化操作即可。</p></blockquote><h2 id="配置-kubectl"><a href="#配置-kubectl" class="headerlink" title="配置 kubectl"></a>配置 kubectl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非 ROOT 用户执行</span></span><br><span class="line">chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h2 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 能够打印出节点信息即表示成功</span></span><br><span class="line">NAME                STATUS     ROLES    AGE     VERSION</span><br><span class="line">kubernetes-master   NotReady   master   8m40s   v1.14.1</span><br></pre></td></tr></table></figure><p>至此主节点配置完成</p><h2 id="kubeadm-init-的执行过程"><a href="#kubeadm-init-的执行过程" class="headerlink" title="kubeadm init 的执行过程"></a>kubeadm init 的执行过程</h2><ul><li>init：指定版本进行初始化操作</li><li>preflight：初始化前的检查和下载所需要的 Docker 镜像文件</li><li>kubelet-start：生成 kubelet 的配置文件 <code>var/lib/kubelet/config.yaml</code>，没有这个文件 kubelet 无法启动，所以初始化之前的 kubelet 实际上启动不会成功</li><li>certificates：生成 Kubernetes 使用的证书，存放在 <code>/etc/kubernetes/pki</code> 目录中</li><li>kubeconfig：生成 KubeConfig 文件，存放在 <code>/etc/kubernetes</code> 目录中，组件之间通信需要使用对应文件</li><li>control-plane：使用 <code>/etc/kubernetes/manifest</code> 目录下的 YAML 文件，安装 Master 组件</li><li>etcd：使用 <code>/etc/kubernetes/manifest/etcd.yaml</code> 安装 Etcd 服务</li><li>wait-control-plane：等待 control-plan 部署的 Master 组件启动</li><li>apiclient：检查 Master 组件服务状态。</li><li>uploadconfig：更新配置</li><li>kubelet：使用 configMap 配置 kubelet</li><li>patchnode：更新 CNI 信息到 Node 上，通过注释的方式记录</li><li>mark-control-plane：为当前节点打标签，打了角色 Master，和不可调度标签，这样默认就不会使用 Master 节点来运行 Pod</li><li>bootstrap-token：生成 token 记录下来，后边使用 <code>kubeadm join</code> 往集群中添加节点时会用到</li><li>addons：安装附加组件 CoreDNS 和 kube-proxy</li></ul><h1 id="部署Master节点"><a href="#部署Master节点" class="headerlink" title="部署Master节点"></a>部署Master节点</h1><h2 id="配置Kubeadm"><a href="#配置Kubeadm" class="headerlink" title="配置Kubeadm"></a>配置Kubeadm</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>安装 kubernetes 主要是安装它的各个镜像，而 kubeadm 已经为我们集成好了运行 kubernetes 所需的基本镜像。但由于国内的网络原因，在搭建环境时，无法拉取到这些镜像。此时我们只需要修改为阿里云提供的镜像服务即可解决该问题。</p><h3 id="创建并修改配置"><a href="#创建并修改配置" class="headerlink" title="创建并修改配置"></a>创建并修改配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出配置文件</span></span><br><span class="line">kubeadm config <span class="built_in">print</span> init-defaults --kubeconfig ClusterConfiguration &gt; kubeadm.yml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置为如下内容</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">bootstrapTokens:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">system:bootstrappers:kubeadm:default-node-token</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">abcdef.0123456789abcdef</span></span><br><span class="line">  <span class="attr">ttl:</span> <span class="string">24h0m0s</span></span><br><span class="line">  <span class="attr">usages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">signing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">authentication</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitConfiguration</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line">  <span class="comment"># 修改为主节点 IP</span></span><br><span class="line">  <span class="attr">advertiseAddress:</span> <span class="number">192.168</span><span class="number">.141</span><span class="number">.130</span></span><br><span class="line">  <span class="attr">bindPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodeRegistration:</span></span><br><span class="line">  <span class="attr">criSocket:</span> <span class="string">/var/run/dockershim.sock</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-master</span></span><br><span class="line">  <span class="attr">taints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line">  <span class="attr">timeoutForControlPlane:</span> <span class="string">4m0s</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">controlPlaneEndpoint:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">controllerManager:</span> &#123;&#125;</span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">CoreDNS</span></span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="comment"># 国内不能访问 Google，修改为阿里云</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.aliyuncs.com/google_containers</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="comment"># 修改版本号 以Kubeadm版本为准，如v1.15.0</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.14.1</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line">  <span class="comment"># 配置成 Calico 的默认网段</span></span><br><span class="line">  <span class="attr">podSubnet:</span> <span class="string">&quot;192.168.0.0/16&quot;</span></span><br><span class="line">  <span class="attr">serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line"><span class="attr">scheduler:</span> &#123;&#125;</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 开启 IPVS 模式</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeProxyConfiguration</span></span><br><span class="line"><span class="attr">featureGates:</span></span><br><span class="line">  <span class="attr">SupportIPVSProxyMode:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">ipvs</span></span><br></pre></td></tr></table></figure><h3 id="查看和拉取镜像"><a href="#查看和拉取镜像" class="headerlink" title="查看和拉取镜像"></a>查看和拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所需镜像列表</span></span><br><span class="line">kubeadm config images list --config kubeadm.yml</span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">kubeadm config images pull --config kubeadm.yml</span><br></pre></td></tr></table></figure><h1 id="部署Slave节点"><a href="#部署Slave节点" class="headerlink" title="部署Slave节点"></a>部署Slave节点</h1><h2 id="安装Kubeadm-1"><a href="#安装Kubeadm-1" class="headerlink" title="安装Kubeadm"></a>安装Kubeadm</h2><p>按照之前配置Master节点的方法安装Kubeadm、配置软件源。</p><h2 id="将Slave加入到集群"><a href="#将Slave加入到集群" class="headerlink" title="将Slave加入到集群"></a>将Slave加入到集群</h2><p>在Master节点服务器上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.41.132:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:f4afc656c3beb88b5d8949c10b1ac1237b45d15b5d5285b441efe569e0eb0889 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此处可以看到命令<code>kubeadm join 192.168.41.132:6443 --token abcdef.0123456789abcdef      --discovery-token-ca-cert-hash sha256:f4afc656c3beb88b5d8949c10b1ac1237b45d15b5d5285b441efe569e0eb0889 </code></p><p>在Slave服务器上运行此命令将Slave加入到集群中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@kubernetes-slave1:~<span class="comment"># kubeadm join 192.168.41.132:6443 --token abcdef.0123456789abcdef \</span></span><br><span class="line">&gt;     --discovery-token-ca-cert-hash sha256:f4afc656c3beb88b5d8949c10b1ac1237b45d15b5d5285b441efe569e0eb0889</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING IsDockerSystemdCheck]: detected <span class="string">&quot;cgroupfs&quot;</span> as the Docker cgroup driver. The recommended driver is <span class="string">&quot;systemd&quot;</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class="line">[WARNING Hostname]: hostname <span class="string">&quot;kubernetes-slave1&quot;</span> could not be reached</span><br><span class="line">[WARNING Hostname]: hostname <span class="string">&quot;kubernetes-slave1&quot;</span>: lookup kubernetes-slave1 on 192.168.41.2:53: no such host</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with <span class="string">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span></span><br><span class="line">[kubelet-start] Downloading configuration <span class="keyword">for</span> the kubelet from the <span class="string">&quot;kubelet-config-1.15&quot;</span> ConfigMap <span class="keyword">in</span> the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[kubelet-start] Waiting <span class="keyword">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;kubectl get nodes&#x27;</span> on the control-plane to see this node join the cluster.</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>说明：</p><ul><li>token<ul><li>可以通过安装 master 时的日志查看 token 信息</li><li>可以通过 <code>kubeadm token list</code> 命令打印出 token 信息</li><li>如果 token 过期，可以使用 <code>kubeadm token create</code> 命令创建新的 token</li></ul></li><li>discovery-token-ca-cert-hash<ul><li>可以通过安装 master 时的日志查看 sha256 信息</li><li>可以通过 <code>openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed &#39;s/^.* //&#39;</code> 命令查看 sha256 信息</li></ul></li></ul></blockquote><h2 id="验证是否成功-1"><a href="#验证是否成功-1" class="headerlink" title="验证是否成功"></a>验证是否成功</h2><p>回到 master 服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到 slave 成功加入 master</span></span><br><span class="line">NAME                STATUS     ROLES    AGE   VERSION</span><br><span class="line">kubernetes-master   NotReady   master   9h    v1.14.1</span><br><span class="line">kubernetes-slave1   NotReady   &lt;none&gt;   22s   v1.14.1</span><br></pre></td></tr></table></figure><blockquote><p>如果 slave 节点加入 master 时配置有问题可以在 slave 节点上使用 <code>kubeadm reset</code> 重置配置再使用 <code>kubeadm join</code> 命令重新加入即可。希望在 master 节点删除 node ，可以使用 <code>kubeadm delete nodes &lt;NAME&gt;</code> 删除。</p></blockquote><h2 id="查看-pod-状态"><a href="#查看-pod-状态" class="headerlink" title="查看 pod 状态"></a>查看 pod 状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -n kube-system -o wide</span><br><span class="line"></span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE   IP                NODE                NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-8686dcc4fd-gwrmb                    0/1     Pending   0          9h    &lt;none&gt;            &lt;none&gt;              &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-8686dcc4fd-j6gfk                    0/1     Pending   0          9h    &lt;none&gt;            &lt;none&gt;              &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd-kubernetes-master                      1/1     Running   1          9h    192.168.141.130   kubernetes-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-apiserver-kubernetes-master            1/1     Running   1          9h    192.168.141.130   kubernetes-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-controller-manager-kubernetes-master   1/1     Running   1          9h    192.168.141.130   kubernetes-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-496dr                            1/1     Running   0          17m   192.168.141.131   kubernetes-slave1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-rsnb6                            1/1     Running   1          9h    192.168.141.130   kubernetes-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-scheduler-kubernetes-master            1/1     Running   1          9h    192.168.141.130   kubernetes-master   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>由此可以看出 coredns 尚未运行，此时我们还需要安装网络插件。</p><h1 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h1><h2 id="前置操作"><a href="#前置操作" class="headerlink" title="前置操作"></a>前置操作</h2><h3 id="设置固定IP"><a href="#设置固定IP" class="headerlink" title="设置固定IP"></a>设置固定IP</h3><p>集群服务器之间需要组网，此时自动获取IP地址的方式显然不合适，所以我们需要给各个服务器设置静态IP地址。</p><p>Ubuntu <code>18.04版本</code> 设置固定IP地址方式区别于 <code>16.04版本</code>，此处介绍的是<code>16.04版本</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kubernetes-slave1:~<span class="comment"># cd /etc/network</span></span><br><span class="line">root@kubernetes-slave1:/etc/network<span class="comment"># vi interfaces</span></span><br></pre></td></tr></table></figure><p>更改文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># This file describes the network interfaces available on your system</span><br><span class="line"># and how to activate them. For more information, see interfaces(5).</span><br><span class="line"></span><br><span class="line">source /etc/network/interfaces.d/*</span><br><span class="line"></span><br><span class="line"># The loopback network interface</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"># The primary network interface</span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet static</span><br><span class="line">address 192.168.41.134</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.41.2</span><br><span class="line">dns-nameserver 192.168.42.2</span><br></pre></td></tr></table></figure><p>之后重启服务器即可。</p><h3 id="测试网络"><a href="#测试网络" class="headerlink" title="测试网络"></a>测试网络</h3><p>通过<code>ping www.baidu.com</code>测试网络连接，发现无数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kubernetes-slave1:/etc/network<span class="comment"># cd /etc</span></span><br><span class="line">root@kubernetes-slave1:/etc<span class="comment"># vi resolv.conf </span></span><br></pre></td></tr></table></figure><p>更改<code>nameserver</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)</span><br><span class="line">#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN</span><br><span class="line">nameserver 114.114.114.114              </span><br></pre></td></tr></table></figure><p>再ping <a href="http://www.baidu.com：">www.baidu.com：</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@kubernetes-slave1:/etc<span class="comment"># ping www.baidu.com</span></span><br><span class="line">PING www.a.shifen.com (39.156.66.14) 56(84) bytes of data.</span><br><span class="line">64 bytes from 39.156.66.14: icmp_seq=1 ttl=128 time=18.2 ms</span><br><span class="line">64 bytes from 39.156.66.14: icmp_seq=2 ttl=128 time=18.3 ms</span><br><span class="line">64 bytes from 39.156.66.14: icmp_seq=3 ttl=128 time=18.3 ms</span><br><span class="line">64 bytes from 39.156.66.14: icmp_seq=4 ttl=128 time=17.8 ms</span><br><span class="line">64 bytes from 39.156.66.14: icmp_seq=5 ttl=128 time=17.5 ms</span><br></pre></td></tr></table></figure><p>成功！</p><p>由于<code>resolve.conf</code>文件是由<code>systemd-resolved</code>服务动态管理的，该服务会动态的更改文件中nameserver，所以在此我们需要手动停止<code>systemd-resolved</code>服务：</p><ul><li>停止 <code>systemd-resolved</code> 服务：<code>systemctl stop systemd-resolved</code></li><li>修改 DNS：<code>vi /etc/resolv.conf</code>，将 <code>nameserver</code> 修改为如 <code>114.114.114.114</code> 可以正常使用的 DNS 地址</li></ul><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>容器网络是容器选择连接到其他容器、主机和外部网络的机制。容器的 runtime 提供了各种网络模式，每种模式都会产生不同的体验。例如，Docker 默认情况下可以为容器配置以下网络：</p><ul><li><strong>none：</strong> 将容器添加到一个容器专门的网络堆栈中，没有对外连接。</li><li><strong>host：</strong> 将容器添加到主机的网络堆栈中，没有隔离。</li><li><strong>default bridge：</strong> 默认网络模式。每个容器可以通过 IP 地址相互连接。</li><li><strong>自定义网桥：</strong> 用户定义的网桥，具有更多的灵活性、隔离性和其他便利功能。</li></ul><h2 id="什么是-CNI"><a href="#什么是-CNI" class="headerlink" title="什么是 CNI"></a>什么是 CNI</h2><p>CNI(Container Network Interface) 是一个标准的，通用的接口。在容器平台，Docker，Kubernetes，Mesos 容器网络解决方案 flannel，calico，weave。只要提供一个标准的接口，就能为同样满足该协议的所有容器平台提供网络功能，而 CNI 正是这样的一个标准接口协议。</p><h2 id="Kubernetes-中的-CNI-插件"><a href="#Kubernetes-中的-CNI-插件" class="headerlink" title="Kubernetes 中的 CNI 插件"></a>Kubernetes 中的 CNI 插件</h2><p>CNI 的初衷是创建一个框架，用于在配置或销毁容器时动态配置适当的网络配置和资源。插件负责为接口配置和管理 IP 地址，并且通常提供与 IP 管理、每个容器的 IP 分配、以及多主机连接相关的功能。容器运行时会调用网络插件，从而在容器启动时分配 IP 地址并配置网络，并在删除容器时再次调用它以清理这些资源。</p><p>运行时或协调器决定了容器应该加入哪个网络以及它需要调用哪个插件。然后，插件会将接口添加到容器网络命名空间中，作为一个 veth 对的一侧。接着，它会在主机上进行更改，包括将 veth 的其他部分连接到网桥。再之后，它会通过调用单独的 IPAM（IP地址管理）插件来分配 IP 地址并设置路由。</p><p>在 Kubernetes 中，kubelet 可以在适当的时间调用它找到的插件，为通过 kubelet 启动的 pod进行自动的网络配置。</p><p>Kubernetes 中可选的 CNI 插件如下：</p><ul><li>Flannel</li><li>Calico</li><li>Canal</li><li>Weave</li></ul><h2 id="什么是-Calico"><a href="#什么是-Calico" class="headerlink" title="什么是 Calico"></a>什么是 Calico</h2><p>Calico 为容器和虚拟机提供了安全的网络连接解决方案，并经过了大规模生产验证（在公有云和跨数千个集群节点中），可与 Kubernetes，OpenShift，Docker，Mesos，DC / OS 和 OpenStack 集成。</p><p>Calico 还提供网络安全规则的动态实施。使用 Calico 的简单策略语言，您可以实现对容器，虚拟机工作负载和裸机主机端点之间通信的细粒度控制。</p><h2 id="安装网络插件-Calico"><a href="#安装网络插件-Calico" class="headerlink" title="安装网络插件 Calico"></a>安装网络插件 Calico</h2><blockquote><p>注意：截止到文章发表日期 2019 年 07 月 16 日，Calico 官方版本为 3.8</p></blockquote><p>参考官方文档安装：<a href="https://docs.projectcalico.org/v3.7/getting-started/kubernetes/">https://docs.projectcalico.org/v3.7/getting-started/kubernetes/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Master 节点操作即可</span></span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.8/manifests/calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装时显示如下输出</span></span><br><span class="line">configmap/calico-config created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/calico-kube-controllers created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/calico-node created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/calico-node created</span><br><span class="line">daemonset.extensions/calico-node created</span><br><span class="line">serviceaccount/calico-node created</span><br><span class="line">deployment.extensions/calico-kube-controllers created</span><br><span class="line">serviceaccount/calico-kube-controllers created</span><br></pre></td></tr></table></figure><p>确认安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">watch kubectl get pods --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要等待所有状态为 Running，注意时间可能较久，3 - 5 分钟的样子</span></span><br><span class="line">Every 2.0s: kubectl get pods --all-namespaces                                                                                                    kubernetes-master: Fri May 10 18:16:51 2019</span><br><span class="line"></span><br><span class="line">NAMESPACE     NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   calico-kube-controllers-8646dd497f-g2lln    1/1     Running   0          50m</span><br><span class="line">kube-system   calico-node-8jrtp                           1/1     Running   0          50m</span><br><span class="line">kube-system   coredns-8686dcc4fd-mhwfn                    1/1     Running   0          51m</span><br><span class="line">kube-system   coredns-8686dcc4fd-xsxwk                    1/1     Running   0          51m</span><br><span class="line">kube-system   etcd-kubernetes-master                      1/1     Running   0          50m</span><br><span class="line">kube-system   kube-apiserver-kubernetes-master            1/1     Running   0          51m</span><br><span class="line">kube-system   kube-controller-manager-kubernetes-master   1/1     Running   0          51m</span><br><span class="line">kube-system   kube-proxy-p8mdw                            1/1     Running   0          51m</span><br><span class="line">kube-system   kube-scheduler-kubernetes-master            1/1     Running   0          51m</span><br></pre></td></tr></table></figure><p>至此基本环境已部署完毕。</p><h2 id="解决-ImagePullBackOff"><a href="#解决-ImagePullBackOff" class="headerlink" title="解决 ImagePullBackOff"></a>解决 ImagePullBackOff</h2><p>在使用 <code>watch kubectl get pods --all-namespaces</code> 命令观察 Pods 状态时如果出现 <code>ImagePullBackOff</code>无法 Running 的情况，请尝试使用如下步骤处理：</p><ul><li>Master 中删除 Nodes：<code>kubeadm delete nodes &lt;NAME&gt;</code></li><li>Slave 中重置配置：<code>kubeadm reset</code></li><li>Slave 重启计算机：<code>reboot</code></li><li>Slave 重新加入集群：<code>kubeadm join</code></li></ul><h1 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h1><h2 id="检查组件运行状态"><a href="#检查组件运行状态" class="headerlink" title="检查组件运行状态"></a>检查组件运行状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl get cs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line"><span class="comment"># 调度服务，主要作用是将 POD 调度到 Node</span></span><br><span class="line">scheduler            Healthy   ok                  </span><br><span class="line"><span class="comment"># 自动化修复服务，主要作用是 Node 宕机后自动修复 Node 回到正常的工作状态</span></span><br><span class="line">controller-manager   Healthy   ok                  </span><br><span class="line"><span class="comment"># 服务注册与发现</span></span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125; </span><br></pre></td></tr></table></figure><h2 id="检查-Master-状态"><a href="#检查-Master-状态" class="headerlink" title="检查 Master 状态"></a>检查 Master 状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line"><span class="comment"># 主节点状态</span></span><br><span class="line">Kubernetes master is running at https://192.168.141.130:6443</span><br><span class="line"><span class="comment"># DNS 状态</span></span><br><span class="line">KubeDNS is running at https://192.168.141.130:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use <span class="string">&#x27;kubectl cluster-info dump&#x27;</span>.</span><br></pre></td></tr></table></figure><h2 id="检查-Nodes-状态"><a href="#检查-Nodes-状态" class="headerlink" title="检查 Nodes 状态"></a>检查 Nodes 状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下，STATUS 为 Ready 即为正常状态</span></span><br><span class="line">NAME                STATUS   ROLES    AGE     VERSION</span><br><span class="line">kubernetes-master   Ready    master   44h     v1.14.1</span><br><span class="line">kubernetes-slave1   Ready    &lt;none&gt;   3h38m   v1.14.1</span><br><span class="line">kubernetes-slave2   Ready    &lt;none&gt;   3h37m   v1.14.1</span><br></pre></td></tr></table></figure><h2 id="运行第一个容器实例"><a href="#运行第一个容器实例" class="headerlink" title="运行第一个容器实例"></a>运行第一个容器实例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 kubectl 命令创建两个监听 80 端口的 Nginx Pod（Kubernetes 运行容器的最小单元）</span></span><br><span class="line">kubectl run nginx --image=nginx --replicas=2 --port=80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">deployment.apps/nginx created</span><br></pre></td></tr></table></figure><h2 id="查看全部-Pods-的状态"><a href="#查看全部-Pods-的状态" class="headerlink" title="查看全部 Pods 的状态"></a>查看全部 Pods 的状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下，需要等待一小段实践，STATUS 为 Running 即为运行成功</span></span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-755464dd6c-qnmwp   1/1     Running   0          90m</span><br><span class="line">nginx-755464dd6c-shqrp   1/1     Running   0          90m</span><br></pre></td></tr></table></figure><h2 id="查看已部署的服务"><a href="#查看已部署的服务" class="headerlink" title="查看已部署的服务"></a>查看已部署的服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx   2/2     2            2           91m</span><br></pre></td></tr></table></figure><h2 id="映射服务，让用户可以访问"><a href="#映射服务，让用户可以访问" class="headerlink" title="映射服务，让用户可以访问"></a>映射服务，让用户可以访问</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment nginx --port=80 --<span class="built_in">type</span>=LoadBalancer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">service/nginx exposed</span><br></pre></td></tr></table></figure><h2 id="查看已发布的服务"><a href="#查看已发布的服务" class="headerlink" title="查看已发布的服务"></a>查看已发布的服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl get services</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">NAME         TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP      10.96.0.1        &lt;none&gt;        443/TCP        44h</span><br><span class="line"><span class="comment"># 由此可见，Nginx 服务已成功发布并将 80 端口映射为 31738</span></span><br><span class="line">nginx        LoadBalancer   10.108.121.244   &lt;pending&gt;     80:31738/TCP   88m</span><br></pre></td></tr></table></figure><h2 id="查看服务详情"><a href="#查看服务详情" class="headerlink" title="查看服务详情"></a>查看服务详情</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe service nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">Name:                     nginx</span><br><span class="line">Namespace:                default</span><br><span class="line">Labels:                   run=nginx</span><br><span class="line">Annotations:              &lt;none&gt;</span><br><span class="line">Selector:                 run=nginx</span><br><span class="line">Type:                     LoadBalancer</span><br><span class="line">IP:                       10.108.121.244</span><br><span class="line">Port:                     &lt;<span class="built_in">unset</span>&gt;  80/TCP</span><br><span class="line">TargetPort:               80/TCP</span><br><span class="line">NodePort:                 &lt;<span class="built_in">unset</span>&gt;  31738/TCP</span><br><span class="line">Endpoints:                192.168.17.5:80,192.168.8.134:80</span><br><span class="line">Session Affinity:         None</span><br><span class="line">External Traffic Policy:  Cluster</span><br><span class="line">Events:                   &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="验证是否成功-2"><a href="#验证是否成功-2" class="headerlink" title="验证是否成功"></a>验证是否成功</h2><p>通过浏览器访问 Master 服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.141.130:31738/</span><br></pre></td></tr></table></figure><p>此时 Kubernetes 会以负载均衡的方式访问部署的 Nginx 服务，能够正常看到 Nginx 的欢迎页即表示成功。容器实际部署在其它 Node 节点上，通过访问 Node 节点的 IP:Port 也是可以的。</p><h2 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete deployment nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">deployment.extensions <span class="string">&quot;nginx&quot;</span> deleted</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete service nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line">service <span class="string">&quot;nginx&quot;</span> deleted</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes初识</title>
      <link href="/2019/07/11/Kubernetes_DOC/"/>
      <url>/2019/07/11/Kubernetes_DOC/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.kubernetes.org.cn/"><strong>Kubernetes</strong></a>是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes提供了应用部署，规划，更新，维护的一种机制。</p><p>Kubernetes一个核心的特点就是能够自主的管理容器来保证云平台中的容器按照用户的期望状态运行着（比如用户想让apache一直运行，用户不需要关心怎么去做，Kubernetes会自动去监控，然后去重启，新建，总之，让apache一直提供服务），管理员可以加载一个微型服务，让规划器来找到合适的位置，同时，Kubernetes也系统提升工具以及人性化方面，让用户能够方便的部署自己的应用（就像canary deployments）。</p><span id="more"></span><h2 id="设计架构"><a href="#设计架构" class="headerlink" title="设计架构"></a>设计架构</h2><p>Kubernetes集群包含有节点代理kubelet和Master组件(APIs, scheduler, etc)，一切都基于分布式的存储系统。下面这张图是Kubernetes的架构图。</p><p><img src="/2019/07/11/Kubernetes_DOC/Structure.jpg" alt="架构"></p><h3 id="Kubernetes节点"><a href="#Kubernetes节点" class="headerlink" title="Kubernetes节点"></a>Kubernetes节点</h3><p>Kubernetes节点有运行应用容器必备的服务，而这些都是受Master的控制。</p><p>每次个节点上当然都要运行Docker。Docker来负责所有具体的映像下载和容器运行。</p><p>Kubernetes主要由以下几个核心组件组成：</p><ul><li><strong>etcd</strong>保存了整个集群的状态；</li><li><strong>apiserver</strong>提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；</li><li><strong>controller manager</strong>负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</li><li><strong>schedule</strong>r负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；</li><li>kubelet负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理；</li><li><strong>Container runtime</strong>负责镜像管理以及Pod和容器的真正运行（CRI）；</li><li><strong>kube-proxy</strong>负责为Service提供cluster内部的服务发现和负载均衡；</li></ul><p>除了核心组件，还有一些推荐的Add-ons：</p><ul><li><strong>kube-dns</strong>负责为整个集群提供DNS服务</li><li><strong>Ingress Controller</strong>为服务提供外网入口</li><li><strong>Heapster</strong>提供资源监控</li><li><strong>Dashboard</strong>提供GUI</li><li><strong>Federation</strong>提供跨可用区的集群</li><li><strong>Fluentd-elasticsearch</strong> 提供集群日志采集、存储与查询</li></ul><p><img src="/2019/07/11/Kubernetes_DOC/KubernetesMaster.png" alt="KuberMaster"></p><p><img src="/2019/07/11/Kubernetes_DOC/KubernetesNode.png" alt="KuberNetesNode"></p><h3 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h3><p>kubelet负责管理<a href="https://www.kubernetes.org.cn/kubernetes-pod">pods</a>和它们上面的容器，images镜像、volumes、etc。</p><h3 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h3><p>每一个节点也运行一个简单的网络代理和负载均衡（详见<a href="https://github.com/kubernetes/kubernetes/wiki/Services-FAQ">services FAQ</a> )（PS:官方 英文）。 正如Kubernetes API里面定义的这些服务（详见<a href="https://github.com/kubernetes/kubernetes/blob/release-1.2/docs/user-guide/services.md">the services doc</a>）（PS:官方 英文）也可以在各种终端中以轮询的方式做一些简单的TCP和UDP传输。</p><p>服务端点目前是通过DNS或者环境变量( <code>Docker-links-compatible</code> 和 <code>Kubernetes&#123;FOO&#125;_SERVICE_HOST </code>及 <code>&#123;FOO&#125;_SERVICE_PORT </code>变量都支持)。这些变量由服务代理所管理的端口来解析。</p><h3 id="Kubernetes控制面板"><a href="#Kubernetes控制面板" class="headerlink" title="Kubernetes控制面板"></a>Kubernetes控制面板</h3><p>Kubernetes控制面板可以分为多个部分。目前它们都运行在一个<em>master</em> 节点，然而为了达到高可用性，这需要改变。不同部分一起协作提供一个统一的关于集群的视图。</p><h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h3><p>所有master的持续状态都存在etcd的一个实例中。这可以很好地存储配置数据。因为有watch(观察者)的支持，各部件协调中的改变可以很快被察觉。</p><h3 id="Kubernetes-API-Server"><a href="#Kubernetes-API-Server" class="headerlink" title="Kubernetes API Server"></a>Kubernetes API Server</h3><p>API服务提供<a href="https://github.com/kubernetes/kubernetes/blob/release-1.2/docs/api.md">Kubernetes API</a> （PS:官方 英文）的服务。这个服务试图通过把所有或者大部分的业务逻辑放到不两只的部件中从而使其具有CRUD特性。它主要处理REST操作，在etcd中验证更新这些对象（并最终存储）。</p><h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3><p>调度器把未调度的pod通过binding api绑定到节点上。调度器是可插拔的，并且我们期待支持多集群的调度，未来甚至希望可以支持用户自定义的调度器。</p><h3 id="Kubernetes控制管理服务器"><a href="#Kubernetes控制管理服务器" class="headerlink" title="Kubernetes控制管理服务器"></a>Kubernetes控制管理服务器</h3><p>所有其它的集群级别的功能目前都是由控制管理器所负责。例如，端点对象是被端点控制器来创建和更新。这些最终可以被分隔成不同的部件来让它们独自的可插拔。</p><p><a href="https://github.com/kubernetes/kubernetes/blob/release-1.2/docs/user-guide/replication-controller.md">replicationcont</a><a href="https://github.com/kubernetes/kubernetes/blob/release-1.2/docs/user-guide/replication-controller.md">roller</a>（PS:官方 英文）是一种建立于简单的 <a href="https://www.kubernetes.org.cn/kubernetes-pod">pod</a> API之上的一种机制。一旦实现，我们最终计划把这变成一种通用的插件机制。</p><p>参考：</p><p><a href="https://github.com/kubernetes/kubernetes/blob/release-1.2/docs/design/architecture.md">https://github.com/kubernetes/kubernetes/blob/release-1.2/docs/design/architecture.md</a></p><p><a href="https://feisky.gitbooks.io/kubernetes/architecture/architecture.html">https://feisky.gitbooks.io/kubernetes/architecture/architecture.html</a></p><h2 id="kubernetes设计理念"><a href="#kubernetes设计理念" class="headerlink" title="kubernetes设计理念"></a>kubernetes设计理念</h2><h3 id="Kubernetes的核心技术概念和API对象"><a href="#Kubernetes的核心技术概念和API对象" class="headerlink" title="Kubernetes的核心技术概念和API对象"></a>Kubernetes的核心技术概念和API对象</h3><p><strong>API对象是K8s集群中的管理操作单元。</strong>K8s集群系统每支持一项新功能，引入一项新技术，一定会新引入对应的API对象，支持对该功能的管理操作。例如副本集Replica Set对应的API对象是RS。</p><p>每个API对象都有3大类属性：<strong>元数据metadata</strong>、<strong>规范spec</strong>和<strong>状态status</strong>。<strong>元数据是用来标识API对象的</strong>，每个对象都至少有3个元数据：namespace，name和uid；除此以外还有各种各样的标签labels用来标识和匹配不同的对象，例如用户可以用标签env来标识区分不同的服务部署环境，分别用env=dev、env=testing、env=production来标识开发、测试、生产的不同服务。<strong>规范描述了用户期望K8s集群中的分布式系统达到的理想状态（Desired State）</strong>，例如用户可以通过复制控制器Replication Controller设置期望的Pod副本数为3；<strong>status描述了系统实际当前达到的状态（Status）</strong>，例如系统当前实际的Pod副本数为2；那么复制控制器当前的程序逻辑就是自动启动新的Pod，争取达到副本数为3。</p><p><strong>K8s中所有的配置都是通过API对象的spec去设置的，也就是用户通过配置系统的理想状态来改变系统，这是k8s重要设计理念之一</strong>，即<strong>所有的操作都是声明式（Declarative）的而不是命令式（Imperative）的</strong>。声明式操作在分布式系统中的好处是稳定，不怕丢操作或运行多次，例如设置副本数为3的操作运行多次也还是一个结果，而给副本数加1的操作就不是声明式的，运行多次结果就错了。</p><h4 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h4><p>K8s有很多技术概念，同时对应很多API对象，最重要的也是最基础的是微服务Pod。<strong>Pod是在K8s集群中运行部署应用或服务的最小单元</strong>，它是可以支持多容器的。Pod的设计理念是<strong>支持多个容器在一个Pod中共享网络地址和文件系统，可以通过进程间通信和文件共享这种简单高效的方式组合完成服务</strong>。Pod对多容器的支持是K8s最基础的设计理念。比如你运行一个操作系统发行版的软件仓库，一个Nginx容器用来发布软件，另一个容器专门用来从源仓库做同步，这两个容器的镜像不太可能是一个团队开发的，但是他们一块儿工作才能提供一个微服务；这种情况下，不同的团队各自开发构建自己的容器镜像，在部署的时候组合成一个微服务对外提供服务。</p><p>Pod是K8s集群中所有业务类型的基础，可以看作运行在K8s集群中的小机器人，不同类型的业务就需要不同类型的小机器人去执行。目前K8s中的业务主要可以分为长期伺服型（long-running）、批处理型（batch）、节点后台支撑型（node-daemon）和有状态应用型（stateful application）；分别对应的小机器人控制器为Deployment、Job、DaemonSet和PetSet，本文后面会一一介绍。</p><h4 id="复制控制器（Replication-Controller，RC）"><a href="#复制控制器（Replication-Controller，RC）" class="headerlink" title="复制控制器（Replication Controller，RC）"></a>复制控制器（Replication Controller，RC）</h4><p><strong>RC是K8s集群中最早的保证Pod高可用的API对象</strong> 。通过监控运行中的Pod来保证集群中运行指定数目的Pod副本。指定的数目可以是多个也可以是1个；少于指定数目，RC就会启动运行新的Pod副本；多于指定数目，RC就会杀死多余的Pod副本。<strong>即使在指定数目为1的情况下，通过RC运行Pod也比直接运行Pod更明智，因为RC也可以发挥它高可用的能力</strong>，保证永远有1个Pod在运行。RC是K8s较早期的技术概念，<strong>只适用于长期伺服型的业务类型</strong>，比如控制小机器人提供高可用的Web服务。</p><h4 id="副本集（Replica-Set，RS）"><a href="#副本集（Replica-Set，RS）" class="headerlink" title="副本集（Replica Set，RS）"></a>副本集（Replica Set，RS）</h4><p>RS是新一代RC，提供同样的高可用能力，区别主要在于RS后来居上，能<strong>支持更多种类的匹配模式</strong>。副本集对象一般不单独使用，而是作为Deployment的理想状态参数使用。</p><h4 id="部署-Deployment"><a href="#部署-Deployment" class="headerlink" title="部署(Deployment)"></a>部署(Deployment)</h4><p><strong>部署表示用户对K8s集群的一次更新操作。</strong>部署是一个比RS应用模式更广的API对象，<strong>可以是创建一个新的服务，更新一个新的服务，也可以是滚动升级一个服务</strong>。滚动升级一个服务，实际是创建一个新的RS，然后逐渐将新RS中副本数增加到理想状态，将旧RS中的副本数减小到0的复合操作；这样一个复合操作用一个RS是不太好描述的，所以用一个更通用的Deployment来描述。以K8s的发展方向，未来对所有长期伺服型的的业务的管理，都会通过Deployment来管理。</p><h4 id="服务（Service）"><a href="#服务（Service）" class="headerlink" title="服务（Service）"></a>服务（Service）</h4><p><strong>RC、RS和Deployment只是保证了支撑服务的微服务Pod的数量，但是没有解决如何访问这些服务的问题。</strong>一个Pod只是一个运行服务的实例，随时可能在一个节点上停止，在另一个节点以一个新的IP启动一个新的Pod，因此不能以确定的IP和端口号提供服务。<strong>要稳定地提供服务需要服务发现和负载均衡能力。</strong>服务发现完成的工作，是针对客户端访问的服务，找到对应的的后端服务实例。在K8s集群中，客户端需要访问的服务就是Service对象。每个Service会对应一个集群内部有效的虚拟IP，集群内部通过虚拟IP访问一个服务。在K8s集群中微服务的<strong>负载均衡是由Kube-proxy实现的</strong>。Kube-proxy是K8s集群内部的负载均衡器。它是一个分布式代理服务器，在K8s的每个节点上都有一个；这一设计体现了它的伸缩性优势，需要访问服务的节点越多，提供负载均衡能力的Kube-proxy就越多，高可用节点也随之增多。与之相比，我们平时在服务器端做个反向代理做负载均衡，还要进一步解决反向代理的负载均衡和高可用问题。</p><h4 id="任务（Job）"><a href="#任务（Job）" class="headerlink" title="任务（Job）"></a>任务（Job）</h4><p><strong>Job是K8s用来控制批处理型任务的API对象。</strong>批处理业务与长期伺服业务的主要区别是批处理业务的运行有头有尾，而长期伺服业务在用户不停止的情况下永远运行。<strong>Job管理的Pod根据用户的设置把任务成功完成就自动退出了</strong>。成功完成的标志根据不同的<code>spec.completions</code>策略而不同：单Pod型任务有一个Pod成功就标志完成；定数成功型任务保证有N个任务全部成功；工作队列型任务根据应用确认的全局成功而标志成功。</p><h4 id="后台支撑服务集（DaemonSet）"><a href="#后台支撑服务集（DaemonSet）" class="headerlink" title="后台支撑服务集（DaemonSet）"></a>后台支撑服务集（DaemonSet）</h4><p>长期伺服型和批处理型服务的核心在业务应用，<strong>可能有些节点运行多个同类业务的Pod，有些节点上又没有这类Pod运行</strong>；而<strong>后台支撑型服务的核心关注点在K8s集群中的节点（物理机或虚拟机），要保证每个节点上都有一个此类Pod运行</strong>。节点可能是所有集群节点也可能是通过nodeSelector选定的一些特定节点。<strong>典型的后台支撑型服务包括，存储，日志和监控等在每个节点上支持K8s集群运行的服务。</strong></p><h4 id="有状态服务集（PetSet）"><a href="#有状态服务集（PetSet）" class="headerlink" title="有状态服务集（PetSet）"></a>有状态服务集（PetSet）</h4><p>K8s在1.3版本里发布了Alpha版的PetSet功能。在云原生应用的体系里，有下面两组近义词；第一组是无状态（stateless）、牲畜（cattle）、无名（nameless）、可丢弃（disposable）；第二组是有状态（stateful）、宠物（pet）、有名（having name）、不可丢弃（non-disposable）。<strong>RC和RS主要是控制提供无状态服务的，其所控制的Pod的名字是随机设置的，一个Pod出故障了就被丢弃掉，在另一个地方重启一个新的Pod，名字变了、名字和启动在哪儿都不重要，重要的只是Pod总数</strong>；而<strong>PetSet是用来控制有状态服务，PetSet中的每个Pod的名字都是事先确定的，不能更改</strong>。<strong>PetSet中Pod的名字的作用，并不是《千与千寻》的人性原因，而是关联与该Pod对应的状态。</strong></p><p><strong>对于RC和RS中的Pod，一般不挂载存储或者挂载共享存储，保存的是所有Pod共享的状态，Pod像牲畜一样没有分别</strong>*（这似乎也确实意味着失去了人性特征）；<strong>对于PetSet中的Pod，每个Pod挂载自己独立的存储，如果一个Pod出现故障，从其他节点启动一个同样名字的Pod，要挂载上原来Pod的存储继续以它的状态提供服务</strong>。</p><p>适合于PetSet的业务包括数据库服务MySQL和PostgreSQL，集群化管理服务Zookeeper、etcd等有状态服务。PetSet的另一种典型应用场景是作为一种比普通容器更稳定可靠的模拟虚拟机的机制。传统的虚拟机正是一种有状态的宠物，运维人员需要不断地维护它，容器刚开始流行时，我们用容器来模拟虚拟机使用，所有状态都保存在容器里，而这已被证明是非常不安全、不可靠的。使用PetSet，Pod仍然可以通过漂移到不同节点提供高可用，而存储也可以通过外挂的存储来提供高可靠性，PetSet做的只是将确定的Pod与确定的存储关联起来保证状态的连续性。PetSet还只在Alpha阶段，后面的设计如何演变，我们还要继续观察。</p><h4 id="集群联邦（Federation）"><a href="#集群联邦（Federation）" class="headerlink" title="集群联邦（Federation）"></a>集群联邦（Federation）</h4><p>K8s在1.3版本里发布了beta版的Federation功能。在云计算环境中，服务的作用距离范围从近到远一般可以有：同主机（Host，Node）、跨主机同可用区（Available Zone）、跨可用区同地区（Region）、跨地区同服务商（Cloud Service Provider）、跨云平台。<strong>K8s的设计定位是单一集群在同一个地域内，因为同一个地区的网络性能才能满足K8s的调度和计算存储连接要求。</strong>而联合集群服务就是为提供跨Region跨服务商K8s集群服务而设计的。</p><p>每个K8s Federation有自己的分布式存储、API Server和Controller Manager。用户可以通过Federation的API Server注册该Federation的成员K8s Cluster。当用户通过Federation的API Server创建、更改API对象时，Federation API Server会在自己所有注册的子K8s Cluster都创建一份对应的API对象。在提供业务请求服务时，K8s Federation会先在自己的各个子Cluster之间做负载均衡，而对于发送到某个具体K8s Cluster的业务请求，会依照这个K8s Cluster独立提供服务时一样的调度模式去做K8s Cluster内部的负载均衡。而Cluster之间的负载均衡是通过域名服务的负载均衡来实现的。</p><p>所有的设计都尽量不影响K8s Cluster现有的工作机制，这样对于每个子K8s集群来说，并不需要更外层的有一个K8s Federation，也就是意味着所有现有的K8s代码和机制不需要因为Federation功能有任何变化。</p><h4 id="存储卷（Volume）"><a href="#存储卷（Volume）" class="headerlink" title="存储卷（Volume）"></a>存储卷（Volume）</h4><p>K8s集群中的存储卷跟Docker的存储卷有些类似，只不过Docker的存储卷作用范围为一个容器，而<strong>K8s的存储卷的生命周期和作用范围是一个Pod</strong>。每个Pod中声明的存储卷由Pod中的所有容器共享。K8s支持非常多的存储卷类型，特别的，支持多种公有云平台的存储，包括AWS，Google和Azure云；支持多种分布式存储包括GlusterFS和Ceph；也支持较容易使用的主机本地目录hostPath和NFS。K8s还支持使用Persistent Volume Claim即PVC这种逻辑存储，使用这种存储，使得存储的使用者可以忽略后台的实际存储技术（例如AWS，Google或GlusterFS和Ceph），而将有关存储实际技术的配置交给存储管理员通过Persistent Volume来配置。</p><h4 id="持久存储卷（Persistent-Volume，PV）和持久存储卷声明（Persistent-Volume-Claim，PVC）"><a href="#持久存储卷（Persistent-Volume，PV）和持久存储卷声明（Persistent-Volume-Claim，PVC）" class="headerlink" title="持久存储卷（Persistent Volume，PV）和持久存储卷声明（Persistent Volume Claim，PVC）"></a>持久存储卷（Persistent Volume，PV）和持久存储卷声明（Persistent Volume Claim，PVC）</h4><p><strong>PV和PVC使得K8s集群具备了存储的逻辑抽象能力</strong>，使得在配置Pod的逻辑里可以忽略对实际后台存储技术的配置，而把这项配置的工作交给PV的配置者，即集群的管理者。存储的PV和PVC的这种关系，跟计算的Node和Pod的关系是非常类似的；PV和Node是资源的提供者，根据集群的基础设施变化而变化，由K8s集群管理员配置；而PVC和Pod是资源的使用者，根据业务服务的需求变化而变化，有K8s集群的使用者即服务的管理员来配置。</p><h4 id="节点（Node）"><a href="#节点（Node）" class="headerlink" title="节点（Node）"></a>节点（Node）</h4><p><strong>K8s集群中的计算能力由Node提供</strong>，最初Node称为服务节点Minion，后来改名为Node。K8s集群中的Node也就等同于Mesos集群中的Slave节点，是所有Pod运行所在的工作主机，可以是物理机也可以是虚拟机。不论是物理机还是虚拟机，工作主机的统一特征是上面要运行kubelet管理节点上运行的容器。</p><h4 id="密钥对象（Secret）"><a href="#密钥对象（Secret）" class="headerlink" title="密钥对象（Secret）"></a>密钥对象（Secret）</h4><p><strong>Secret是用来保存和传递密码、密钥、认证凭证这些敏感信息的对象。</strong>使用Secret的好处是可以避免把敏感信息明文写在配置文件里。在K8s集群中配置和使用服务不可避免的要用到各种敏感信息实现登录、认证等功能，例如访问AWS存储的用户名密码。为了避免将类似的敏感信息明文写在所有需要使用的配置文件中，可以将这些信息存入一个Secret对象，而在配置文件中通过Secret对象引用这些敏感信息。这种方式的好处包括：意图明确，避免重复，减少暴漏机会。</p><h4 id="用户帐户（User-Account）和服务帐户（Service-Account）"><a href="#用户帐户（User-Account）和服务帐户（Service-Account）" class="headerlink" title="用户帐户（User Account）和服务帐户（Service Account）"></a>用户帐户（User Account）和服务帐户（Service Account）</h4><p>顾名思义，<strong>用户帐户为人提供账户标识，而服务账户为计算机进程和K8s集群中运行的Pod提供账户标识。</strong>用户帐户和服务帐户的一个区别是作用范围；用户帐户对应的是人的身份，人的身份与服务的namespace无关，所以用户账户是跨namespace的；而服务帐户对应的是一个运行中程序的身份，与特定namespace是相关的。</p><h4 id="名字空间（Namespace）"><a href="#名字空间（Namespace）" class="headerlink" title="名字空间（Namespace）"></a>名字空间（Namespace）</h4><p><strong>名字空间为K8s集群提供虚拟的隔离作用</strong>，K8s集群初始有两个名字空间，分别是默认名字空间default和系统名字空间kube-system，除此以外，管理员可以可以创建新的名字空间满足需要。</p><h4 id="RBAC访问授权"><a href="#RBAC访问授权" class="headerlink" title="RBAC访问授权"></a>RBAC访问授权</h4><p>K8s在1.3版本中发布了alpha版的基于角色的访问控制（Role-based Access Control，RBAC）的授权模式。相对于基于属性的访问控制（Attribute-based Access Control，ABAC），RBAC主要是引入了角色（Role）和角色绑定（RoleBinding）的抽象概念。在ABAC中，K8s集群中的访问策略只能跟用户直接关联；而在RBAC中，访问策略可以跟某个角色关联，具体的用户在跟一个或多个角色相关联。显然，RBAC像其他新功能一样，每次引入新功能，都会引入新的API对象，从而引入新的概念抽象，而这一新的概念抽象一定会使集群服务管理和使用更容易扩展和重用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从K8s的系统架构、技术概念和设计理念，我们可以看到K8s系统最核心的两个设计理念：一个是<strong>容错性</strong>，一个是<strong>易扩展性</strong>。容错性实际是保证K8s系统稳定性和安全性的基础，易扩展性是保证K8s对变更友好，可以快速迭代增加新功能的基础。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建携程Apollo分布式配置中心</title>
      <link href="/2019/06/01/ApolloBuild/"/>
      <url>/2019/06/01/ApolloBuild/</url>
      
        <content type="html"><![CDATA[<p>随着Spring Cloud项目的越来越繁琐，配置文件越来越多，之前的本地存储方式就显得有些不够用了，一方面，本地存储的方式不够灵活，另一方面，如果需要更改配置，会十分繁琐并且需要重启服务，这对于一个系统来说十分不友好。</p><span id="more"></span><p>之前我也使用Docker+Gitlab的方式搭建了一个分布式配置中心，主要有三个问题：</p><ol><li>更改配置后需要通过gti手动上传；</li><li>配置更改后服务需要重启才能获取到最新配置；</li><li>需要通过命令更改环境配置。</li></ol><p>之后，根据老师的建议，决定使用携程研发的开源配置管理中心—Apollo。</p><p>Apollo开发者提供了详尽的<a href="%5Bhttps://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D%5D(https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D)">部署文档</a>，但是对于小白显得不那么友好，所以我想从一个初学者的角度讲述我的Apollo部署过程。</p><h1 id="Apollo特点"><a href="#Apollo特点" class="headerlink" title="Apollo特点"></a>Apollo特点</h1><p>正是基于配置的特殊性，所以Apollo从设计之初就立志于成为一个有治理能力的配置发布平台，目前提供了以下的特性：</p><ul><li><strong>统一管理不同环境、不同集群的配置</strong><ul><li>Apollo提供了一个统一界面集中式管理不同环境（environment）、不同集群（cluster）、不同命名空间（namespace）的配置。</li><li>同一份代码部署在不同的集群，可以有不同的配置，比如zookeeper的地址等</li><li>通过命名空间（namespace）可以很方便地支持多个不同应用共享同一份配置，同时还允许应用对共享的配置进行覆盖</li></ul></li><li><strong>配置修改实时生效（热发布）</strong><ul><li>用户在Apollo修改完配置并发布后，客户端能实时（1秒）接收到最新的配置，并通知到应用程序</li></ul></li><li><strong>版本发布管理</strong><ul><li>所有的配置发布都有版本概念，从而可以方便地支持配置的回滚</li></ul></li><li><strong>灰度发布</strong><ul><li>支持配置的灰度发布，比如点了发布后，只对部分应用实例生效，等观察一段时间没问题后再推给所有应用实例</li></ul></li><li><strong>权限管理、发布审核、操作审计</strong><ul><li>应用和配置的管理都有完善的权限管理机制，对配置的管理还分为了编辑和发布两个环节，从而减少人为的错误。</li><li>所有的操作都有审计日志，可以方便地追踪问题</li></ul></li><li><strong>客户端配置信息监控</strong><ul><li>可以在界面上方便地看到配置在被哪些实例使用</li></ul></li><li><strong>提供Java和.Net原生客户端</strong><ul><li>提供了Java和.Net的原生客户端，方便应用集成</li><li>支持Spring Placeholder, Annotation和Spring Boot的ConfigurationProperties，方便应用使用（需要Spring 3.1.1+）</li><li>同时提供了Http接口，非Java和.Net应用也可以方便地使用</li></ul></li><li><strong>提供开放平台API</strong><ul><li>Apollo自身提供了比较完善的统一配置管理界面，支持多环境、多数据中心配置管理、权限、流程治理等特性。不过Apollo出于通用性考虑，不会对配置的修改做过多限制，只要符合基本的格式就能保存，不会针对不同的配置值进行针对性的校验，如数据库用户名、密码，Redis服务地址等</li><li>对于这类应用配置，Apollo支持应用方通过开放平台API在Apollo进行配置的修改和发布，并且具备完善的授权和权限控制</li></ul></li><li><strong>部署简单</strong><ul><li>配置中心作为基础服务，可用性要求非常高，这就要求Apollo对外部依赖尽可能地少</li><li>目前唯一的外部依赖是MySQL，所以部署非常简单，只要安装好Java和MySQL就可以让Apollo跑起来</li><li>Apollo还提供了打包脚本，一键就可以生成所有需要的安装包，并且支持自定义运行时参数</li></ul></li></ul><h1 id="分布式部署"><a href="#分布式部署" class="headerlink" title="分布式部署"></a>分布式部署</h1><p>根据部署文档所述，Quick Start部署方式虽然简单快捷，但是不建议使用于生产环境中。</p><blockquote><p>为了让大家更快的上手了解Apollo配置中心，我们这里准备了一个Quick Start，能够在几分钟内在本地环境部署、启动Apollo配置中心。</p><p>考虑到Docker的便捷性，我们还提供了Quick Start的Docker版本，如果你对Docker比较熟悉的话，可以参考<a href="https://github.com/ctripcorp/apollo/wiki/Apollo-Quick-Start-Docker%E9%83%A8%E7%BD%B2">Apollo Quick Start Docker部署</a>通过Docker快速部署Apollo。</p><p>不过这里需要注意的是，Quick Start只针对本地测试使用，如果要部署到生产环境，还请另行参考<a href="https://github.com/ctripcorp/apollo/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97">分布式部署指南</a>。</p></blockquote><p>所以综合考量，我选择使用分布式部署方式。</p><h1 id="部署指南"><a href="#部署指南" class="headerlink" title="部署指南"></a>部署指南</h1><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h3><blockquote><p>服务端基于Spring Boot，启动脚本理论上支持所有Linux发行版，建议<a href="https://www.centos.org/">CentOS 7</a>。</p></blockquote><p>操作系统我选用的是<strong>Ubuntu 16.04</strong>版本。</p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><blockquote><ul><li>Apollo服务端：1.8+</li><li>Apollo客户端：1.7+</li></ul><p>由于需要同时运行服务端和客户端，所以建议安装Java 1.8+。</p><blockquote><p>对于Apollo客户端，运行时环境只需要1.7+即可。</p></blockquote><blockquote><p>注：对于Apollo客户端，如果有需要的话，可以做少量代码修改来降级到Java 1.6，详细信息可以参考<a href="https://github.com/ctripcorp/apollo/issues/483">Issue 483</a></p></blockquote></blockquote><p>Java的安装与环境变量配置在CSDN、百度上都有很多，只要按照步骤跟着做，不会有问题。安装完成后可以通过以下命令验证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cgteam@cgteam:~/lizhe$ java -version</span><br><span class="line">openjdk version &quot;1.8.0_181&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_181-8u181-b13-1ubuntu0.16.04.1-b13)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode)</span><br></pre></td></tr></table></figure><p>这里我使用的是JDK1.8。</p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><blockquote><ul><li>版本要求：5.6.5+</li></ul><p>Apollo的表结构对<code>timestamp</code>使用了多个default声明，所以需要5.6.5以上版本。</p></blockquote><p>MySQL同样根据CSDN教程安装即可，连接上MySQL后，可以通过如下命令检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES WHERE Variable_name = &#x27;version&#x27;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Variable_name</th><th>Value</th></tr></thead><tbody><tr><td>version</td><td>5.7.11</td></tr></tbody></table><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Apollo目前支持以下环境：</p><ul><li>DEV<ul><li>开发环境</li></ul></li><li>FAT<ul><li>测试环境，相当于alpha环境(功能测试)</li></ul></li><li>UAT<ul><li>集成环境，相当于beta环境（回归测试）</li></ul></li><li>PRO<ul><li>生产环境</li></ul></li></ul><p>具体可以查看<a href="https://github.com/ctripcorp/apollo/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97#13%E7%8E%AF%E5%A2%83">开发文档</a>。</p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>根据开发者发布的文档来看，当我们在服务器部署Apollo时，需要将安装包在服务器端解压执行。开发者提供了两种获取安装包的方式：</p><ol><li>直接下载官方提供的安装包；</li><li>通过源码自行构建。</li></ol><p>这里我建议使用第二种，因为这样比较简单，不需要解压后挨个改配置，只要在打包前修改一次脚本文件即可。</p><p>通过Git或者下载Zip的方式获取<a href="https://github.com/ctripcorp/apollo">源码</a>，源码如下。</p><p><img src="/2019/06/01/ApolloBuild/1559440284688.png" alt="源码"></p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>部署Apollo需要使用到两个数据库：<code>ApolloConfigDB</code>和<code>ApolloPortalDB</code>。这一步十分简单，打开你的MySQL客户端，创建两个新的数据库，然后运行官方提供的sql文件即可。sql文件分别在：<code>\apollo-master\scripts\db\migration\configdb</code>以及<code>\apollo-master\scripts\db\migration\portaldb</code>目录下。</p><p>创建数据库：</p><p><img src="/ApolloBuild/1559440617638.png" alt="创建数据库"></p><p>运行sql文件：</p><p><img src="/2019/06/01/ApolloBuild/1559441168549.png" alt="运行sql文件-1"></p><p><img src="/2019/06/01/ApolloBuild/1559440988926.png" alt="运行sql文件-2"></p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>导入成功后，可以通过执行以下sql语句来验证：</p><p><strong>ApolloPortalDB:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select `Id`, `Key`, `Value`, `Comment` from `ApolloPortalDB`.`ServerConfig` limit 1;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Id</th><th>Key</th><th>Value</th><th>Comment</th></tr></thead><tbody><tr><td>1</td><td>apollo.portal.envs</td><td>dev</td><td>可支持的环境列表</td></tr></tbody></table><p><strong>ApolloConfigDB:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select `Id`, `Key`, `Value`, `Comment` from `ApolloConfigDB`.`ServerConfig` limit 1;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Id</th><th>Key</th><th>Value</th><th>Comment</th></tr></thead><tbody><tr><td>1</td><td>eureka.service.url</td><td><a href="http://127.0.0.1:8080/eureka/">http://127.0.0.1:8080/eureka/</a></td><td>Eureka服务Url</td></tr></tbody></table><blockquote><p>注意：ApolloPortalDB只需要在生产环境部署一个即可，而ApolloConfigDB需要在每个环境部署一套，如fat、uat和pro分别部署3套ApolloConfigDB。</p></blockquote><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p>Apollo自身的一些配置存储在数据库里，所以我们需要对数据库进行一些简单的配置。</p><h5 id="ApolloConfigDb"><a href="#ApolloConfigDb" class="headerlink" title="ApolloConfigDb"></a>ApolloConfigDb</h5><p><img src="/ApolloBuild/1559441787747.png" alt="ApolloConfigDB配置"></p><p><strong>eureka.service.url</strong> :Apollo需要将<code>Apollo-adminservice</code>以及<code>Apollo-portal</code>注册到Eureka上，由于<code>Apollo-configservice</code>本身就是一台Eureka服务器，所以这里只需填写配置<code>Apollo-configservice</code>所在服务的IP地址以及端口即可，如<code>http://192.168.13.13:8080/eureka/</code>。</p><p><em>这里不建议使用<code>localhost</code>写法，后期运行<code>apollo-portal</code>有可能会报错。</em></p><p>其他选项请根据自己需要自行配置。</p><blockquote><h5 id="1-eureka-service-url-Eureka服务Url"><a href="#1-eureka-service-url-Eureka服务Url" class="headerlink" title="1. eureka.service.url - Eureka服务Url"></a>1. eureka.service.url - Eureka服务Url</h5><p>不管是apollo-configservice还是apollo-adminservice都需要向eureka服务注册，所以需要配置eureka服务地址。 按照目前的实现，apollo-configservice本身就是一个eureka服务，所以只需要填入apollo-configservice的地址即可，如有多个，用逗号分隔（注意不要忘了/eureka/后缀）。</p><p>需要注意的是每个环境只填入自己环境的eureka服务地址，比如FAT的apollo-configservice是1.1.1.1:8080和2.2.2.2:8080，UAT的apollo-configservice是3.3.3.3:8080和4.4.4.4:8080，PRO的apollo-configservice是5.5.5.5:8080和6.6.6.6:8080，那么：</p><ol><li>在FAT环境的ApolloConfigDB.ServerConfig表中设置eureka.service.url为：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://1.1.1.1:8080/eureka/,http://2.2.2.2:8080/eureka/</span><br></pre></td></tr></table></figure><ol><li>在UAT环境的ApolloConfigDB.ServerConfig表中设置eureka.service.url为：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://3.3.3.3:8080/eureka/,http://4.4.4.4:8080/eureka/</span><br></pre></td></tr></table></figure><ol><li>在PRO环境的ApolloConfigDB.ServerConfig表中设置eureka.service.url为：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://5.5.5.5:8080/eureka/,http://6.6.6.6:8080/eureka/</span><br></pre></td></tr></table></figure><blockquote><p>注1：这里需要填写本环境中全部的eureka服务地址，因为eureka需要互相复制注册信息</p></blockquote><blockquote><p>注2：如果希望将Config Service和Admin Service注册到公司统一的Eureka上，可以参考<a href="https://github.com/ctripcorp/apollo/wiki/%E9%83%A8%E7%BD%B2&%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98#8-%E5%B0%86config-service%E5%92%8Cadmin-service%E6%B3%A8%E5%86%8C%E5%88%B0%E5%8D%95%E7%8B%AC%E7%9A%84eureka-server%E4%B8%8A">部署&amp;开发遇到的常见问题 - 将Config Service和Admin Service注册到单独的Eureka Server上</a>章节</p></blockquote><blockquote><p>注3：在多机房部署时，往往希望config service和admin service只向同机房的eureka注册，要实现这个效果，需要利用<code>ServerConfig</code>表中的cluster字段，config service和admin service会读取所在机器的<code>/opt/settings/server.properties</code>（Mac/Linux）或<code>C:\opt\settings\server.properties</code>（Windows）中的idc属性，如果该idc有对应的eureka.service.url配置，那么就只会向该机房的eureka注册。比如config service和admin service会部署到<code>SHAOY</code>和<code>SHAJQ</code>两个IDC，那么为了实现这两个机房中的服务只向该机房注册，那么可以在<code>ServerConfig</code>表中新增两条记录，分别填入<code>SHAOY</code>和<code>SHAJQ</code>两个机房的eureka地址即可，<code>default</code> cluster的记录可以保留，如果有config service和admin service不是部署在<code>SHAOY</code>和<code>SHAJQ</code>这两个机房的，就会使用这条默认配置。</p></blockquote><table><thead><tr><th>Key</th><th>Cluster</th><th>Value</th><th>Comment</th></tr></thead><tbody><tr><td>eureka.service.url</td><td>default</td><td><a href="http://1.1.1.1:8080/eureka/">http://1.1.1.1:8080/eureka/</a></td><td>默认的Eureka服务Url</td></tr><tr><td>eureka.service.url</td><td>SHAOY</td><td><a href="http://2.2.2.2:8080/eureka/">http://2.2.2.2:8080/eureka/</a></td><td>SHAOY的Eureka服务Url</td></tr><tr><td>eureka.service.url</td><td>SHAJQ</td><td><a href="http://3.3.3.3:8080/eureka/">http://3.3.3.3:8080/eureka/</a></td><td>SHAJQ的Eureka服务Url</td></tr></tbody></table><h5 id="2-namespace-lock-switch-一次发布只能有一个人修改开关，用于发布审核"><a href="#2-namespace-lock-switch-一次发布只能有一个人修改开关，用于发布审核" class="headerlink" title="2. namespace.lock.switch - 一次发布只能有一个人修改开关，用于发布审核"></a>2. namespace.lock.switch - 一次发布只能有一个人修改开关，用于发布审核</h5><p>这是一个功能开关，如果配置为true的话，那么一次配置发布只能是一个人修改，另一个发布。</p><blockquote><p>生产环境建议开启此选项</p></blockquote><h5 id="3-config-service-cache-enabled-是否开启配置缓存"><a href="#3-config-service-cache-enabled-是否开启配置缓存" class="headerlink" title="3. config-service.cache.enabled - 是否开启配置缓存"></a>3. config-service.cache.enabled - 是否开启配置缓存</h5><p>这是一个功能开关，如果配置为true的话，config service会缓存加载过的配置信息，从而加快后续配置获取性能。</p><p>默认为false，开启前请先评估总配置大小并调整config service内存配置。</p><h5 id="4-item-key-length-limit-配置项-key-最大长度限制"><a href="#4-item-key-length-limit-配置项-key-最大长度限制" class="headerlink" title="4. item.key.length.limit - 配置项 key 最大长度限制"></a>4. item.key.length.limit - 配置项 key 最大长度限制</h5><p>默认配置是128。</p><h5 id="5-item-value-length-limit-配置项-value-最大长度限制"><a href="#5-item-value-length-limit-配置项-value-最大长度限制" class="headerlink" title="5. item.value.length.limit - 配置项 value 最大长度限制"></a>5. item.value.length.limit - 配置项 value 最大长度限制</h5><p>默认配置是20000。</p></blockquote><h5 id="ApolloPortalDb"><a href="#ApolloPortalDb" class="headerlink" title="ApolloPortalDb"></a>ApolloPortalDb</h5><p><img src="/2019/06/01/ApolloBuild/1559442905409.png" alt="1559442905409"></p><p>同样在<code>ApolloPortalDb</code>中也存在一个配置表，这里<code>superAdmin</code>就是你一开始登陆Apollo的用户名，根据需要更改，我在这里未做更改。</p><blockquote><h5 id="1-apollo-portal-envs-可支持的环境列表"><a href="#1-apollo-portal-envs-可支持的环境列表" class="headerlink" title="1.apollo.portal.envs - 可支持的环境列表"></a>1.apollo.portal.envs - 可支持的环境列表</h5><p>默认值是dev，如果portal需要管理多个环境的话，以逗号分隔即可（大小写不敏感），如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEV,FAT,UAT,PRO</span><br></pre></td></tr></table></figure><h5 id="2-organizations-部门列表"><a href="#2-organizations-部门列表" class="headerlink" title="2.organizations - 部门列表"></a>2.organizations - 部门列表</h5><p>Portal中新建的App都需要选择部门，所以需要在这里配置可选的部门信息，样例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;orgId&quot;:&quot;TEST1&quot;,&quot;orgName&quot;:&quot;样例部门1&quot;&#125;,&#123;&quot;orgId&quot;:&quot;TEST2&quot;,&quot;orgName&quot;:&quot;样例部门2&quot;&#125;]</span><br></pre></td></tr></table></figure><h5 id="3-superAdmin-Portal超级管理员"><a href="#3-superAdmin-Portal超级管理员" class="headerlink" title="3.superAdmin - Portal超级管理员"></a>3.superAdmin - Portal超级管理员</h5><p>超级管理员拥有所有权限，需要谨慎设置。</p><p>如果没有接入自己公司的SSO系统的话，可以先暂时使用默认值apollo（默认用户）。等接入后，修改为实际使用的账号，多个账号以英文逗号分隔(,)。</p><h5 id="4-consumer-token-salt-consumer-token-salt"><a href="#4-consumer-token-salt-consumer-token-salt" class="headerlink" title="4.consumer.token.salt - consumer token salt"></a>4.consumer.token.salt - consumer token salt</h5><p>如果会使用开放平台API的话，可以设置一个token salt。如果不使用，可以忽略。</p><h5 id="5-wiki-address"><a href="#5-wiki-address" class="headerlink" title="5.wiki.address"></a>5.wiki.address</h5><p>portal上“帮助”链接的地址，默认是Apollo github的wiki首页，可自行设置。</p><h5 id="6-admin-createPrivateNamespace-switch"><a href="#6-admin-createPrivateNamespace-switch" class="headerlink" title="6.admin.createPrivateNamespace.switch"></a>6.admin.createPrivateNamespace.switch</h5><p>是否允许项目管理员创建private namespace。设置为<code>true</code>允许创建，设置为<code>false</code>则项目管理员在页面上看不到创建private namespace的选项。<a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E4%B9%8B%22Namespace%22">了解更多Namespace</a></p><h5 id="7-configView-memberOnly-envs"><a href="#7-configView-memberOnly-envs" class="headerlink" title="7. configView.memberOnly.envs"></a>7. configView.memberOnly.envs</h5><p>只对项目成员显示配置信息的环境列表，多个env以英文逗号分隔。</p><p>对设定了只对项目成员显示配置信息的环境，只有该项目的管理员或拥有该namespace的编辑或发布权限的用户才能看到该私有namespace的配置信息和发布历史。公共namespace始终对所有用户可见。</p></blockquote><h3 id="获取安装包"><a href="#获取安装包" class="headerlink" title="获取安装包"></a>获取安装包</h3><h4 id="修改脚本"><a href="#修改脚本" class="headerlink" title="修改脚本"></a>修改脚本</h4><blockquote><p>可以通过两种方式获取安装包：</p><ol><li><p>直接下载安装包</p><ul><li>从<a href="https://github.com/ctripcorp/apollo/releases">GitHub Release</a>页面下载预先打好的安装包</li><li>如果对Apollo的代码没有定制需求，建议使用这种方式，可以省去本地打包的过程</li></ul></li><li><p>通过源码构建</p><ul><li>从<a href="https://github.com/ctripcorp/apollo/releases">GitHub Release</a>页面下载Source code包或直接clone<a href="https://github.com/ctripcorp/apollo">源码</a>后在本地构建</li><li>如果需要对Apollo的做定制开发，需要使用这种方式</li></ul></li></ol></blockquote><p>建议使用源码构建，编辑源码<code>\apollo-master\scripts\build.sh</code>：</p><p><img src="/2019/06/01/ApolloBuild/1559443582207.png" alt="源码构建"></p><p><strong>红色部分：需要修改的部分</strong></p><p>Ⅰ：配置数据库地址以及用户名、密码；</p><blockquote><p> 注意：填入的用户需要具备对ApolloPortalDB和ApolloConfigDB数据的读写权限。</p></blockquote><p>Ⅱ：配置环境地址，由于Apollo支持分布式多环境配置，可以将不同的环境配置在不同的服务器，也就拥有了不同的地址，可以在这里进行配置，若用不到可以直接注释掉，这里填的是Eureka地址，即<code>apolloi-configservice</code>的地址。如：在数据库配置中我们给<code>eureka.service.url</code>配置了<code>http://192.168.13.13:8080/eureka/</code>,那么这里红线部分就应该是<code>192.168.13.13：8080</code>。</p><h4 id="编译打包"><a href="#编译打包" class="headerlink" title="编译打包"></a>编译打包</h4><p>完成脚本的修改后，就可以执行脚本进行编译、打包了，建议在Linux下进行编译打包，Windows下可以通过Git Bash打包。</p><h5 id="获取安装包-1"><a href="#获取安装包-1" class="headerlink" title="获取安装包"></a>获取安装包</h5><p>三个安装包分别：</p><p>位于<code>apollo-configservice/target/</code>目录下的<code>apollo-configservice-x.x.x-github.zip</code>；</p><p>位于<code>apollo-adminservice/target/</code>目录下的<code>apollo-adminservice-x.x.x-github.zip</code>；</p><p>位于<code>apollo-portal/target/</code>目录下的<code>apollo-portal-x.x.x-github.zip</code>。</p><h3 id="部署Apollo服务端"><a href="#部署Apollo服务端" class="headerlink" title="部署Apollo服务端"></a>部署Apollo服务端</h3><h4 id="部署apollo-configservice"><a href="#部署apollo-configservice" class="headerlink" title="部署apollo-configservice"></a>部署apollo-configservice</h4><p>将对应环境的<code>apollo-configservice-x.x.x-github.zip</code>上传到服务器上，解压后执行scripts/startup.sh即可。如需停止服务，执行scripts/shutdown.sh。</p><h4 id="部署apollo-adminservice"><a href="#部署apollo-adminservice" class="headerlink" title="部署apollo-adminservice"></a>部署apollo-adminservice</h4><p>将对应环境的<code>apollo-adminservice-x.x.x-github.zip</code>上传到服务器上，解压后执行scripts/startup.sh即可。如需停止服务，执行scripts/shutdown.sh。</p><h4 id="部署apollo-portal"><a href="#部署apollo-portal" class="headerlink" title="部署apollo-portal"></a>部署apollo-portal</h4><p>将<code>apollo-portal-x.x.x-github.zip</code>上传到服务器上，解压后执行scripts/startup.sh即可。如需停止服务，执行scripts/shutdown.sh。</p><h1 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h1><p>访问<code>http://xxx,xxx,xxx,xxx:8070</code>打开Apollo页面，默认超级管理员用户名为<code>apollo</code>，密码为<code>admin</code>。</p><p><img src="/2019/06/01/ApolloBuild/1559618071934.png" alt="Apollo客户端"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Apollo </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现Eureka注册发现的高可用</title>
      <link href="/2019/05/26/EurekaHighAvailability/"/>
      <url>/2019/05/26/EurekaHighAvailability/</url>
      
        <content type="html"><![CDATA[<p>spring-cloud为基础的微服务架构，所有的微服务都需要注册到注册中心，如果这个注册中心阻塞或者宕机，那么整个系统都将无法继续正常提供服务，所以，这里就需要对注册中心进行集群部署，换言之，实现高可用。</p><p>实现的高可用的思想是：通过集群部署Eureka，并使Eureka之间相互注册，这样，当其中一台Eureka宕机不可用时，此时仍有一台服务注册可用。</p><span id="more"></span><h1 id="server端配置"><a href="#server端配置" class="headerlink" title="server端配置"></a>server端配置</h1><p>创建一个Eureka服务，创建pom.xml，依赖如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../spring-cloud-demo-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud-demo-eureka<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.funtl.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2018-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.spring.cloud.demo.eureka.EurekaApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置文件（properties）"><a href="#配置文件（properties）" class="headerlink" title="配置文件（properties）"></a>配置文件（properties）</h1><p>因为我们要启动两台Eureka服务器，所以我们需要创建两个配置文件：<code>application-peer1.properties</code>和<code>application-peer2.properties</code>。配置分别如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">spring-cloud-demo-eureka</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8761</span></span><br><span class="line"><span class="meta">eureka.instance.hostname</span>=<span class="string">peer1</span></span><br><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://peer2:8661/eureka</span></span><br><span class="line"><span class="comment"># 表示是否注册自身到eureka服务器</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 是否从eureka上获取注册信息</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">spring-cloud-demo-eureka</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8661</span></span><br><span class="line"><span class="meta">eureka.instance.hostname</span>=<span class="string">peer2</span></span><br><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>=<span class="string">http://peer1:8761/eureka</span></span><br><span class="line"><span class="comment"># 表示是否注册自身到eureka服务器</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 是否从eureka上获取注册信息</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>此处可以看到，在line 4，我们将peer注册到peer2上，将peer2注册到peer1上，从而实现相互注册。</p><h1 id="配置文件（host）"><a href="#配置文件（host）" class="headerlink" title="配置文件（host）"></a>配置文件（host）</h1><p>修改C:\Windows\System32\drivers\etc\hosts，在文件末添加两行如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 peer1</span><br><span class="line">127.0.0.1 peer2</span><br></pre></td></tr></table></figure><p><strong>许多高可用的Eureka配置里都要设置hosts文件，它是必须的吗？</strong></p><p>不是必须的，配置hosts文件的目的是使各个Eureka的eureka.instance.hostname不同。</p><p>Eureka互相注册要求各个Eureka实例的eureka.instance.hostname不同，如果相同，则会被Eureka标记为unavailable-replicas。我们最终把eureka.instance.hostname取了${spring.cloud.client.ipAddress}的值，这个值取的是当前启动Eureka的机器的IP，这样虽然配置一样但却自动区分了每台机器的Eureka，这时我们再取prefer-ip-address: true，就可以确保机器优先使用IP而不是到hosts解析域名。</p><h1 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h1><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><p>在启动类上加上EnableEurekaServer注解即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>添加两个启动项，分别设置启动配置为<code>–spring.profiles.active=peer1</code>和<code>–spring.profiles.active=peer2</code> ，表示不同的配置文件启动Eureka。此时服务端便配置完成了。</p><p><img src="/2019/05/26/EurekaHighAvailability/1558944225110.png" alt="1558944225110"></p><h1 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>新建一个<code>admin-service</code>服务，依赖文件<code>pom.xml</code> 如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../spring-cloud-demo-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo-service-admin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud-demo-service-admin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.funtl.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2018-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--熔断器依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.spring.cloud.demo.service.admin.ServiceAdminApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>application.yml如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-demo-service-admin</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8763</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://peer1:8761/eureka/,http://peer2:8661/eureka/</span></span><br></pre></td></tr></table></figure><p>defaultZone这里代表eureka server的地址，我们将两个Eureka地址都填上去，将服务注册到两台Eureka服务器上，这样当一台Eureka服务器宕机，服务依旧可用。</p><h2 id="启动类-1"><a href="#启动类-1" class="headerlink" title="启动类"></a>启动类</h2><p>在启动类上加注解eurekaClient注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAdminApplication</span> </span>&#123;              <span class="comment">//服务端</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一个参数ServiceAdminApplication.class就是Spring应用的入口类；</span></span><br><span class="line">        <span class="comment">// 第二个参数args是启动Spring应用的命令行参数，该参数可以在Spring应用中被访问</span></span><br><span class="line">        SpringApplication.run(ServiceAdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时启动ServiceAdmin服务，可以看到ServiceAdmin服务同时注册到了两台Eureka服务器。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Eureka </tag>
            
            <tag> 高可用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Docker+Gitlab搭建Spring Cloud分布式配置中心</title>
      <link href="/2019/05/23/Distributed-Configuration-Center/"/>
      <url>/2019/05/23/Distributed-Configuration-Center/</url>
      
        <content type="html"><![CDATA[<p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在 Spring Cloud 中，有分布式配置中心组件 Spring Cloud Config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程 Git 仓库中。在 Spring Cloud Config 组件中，分两个角色，一是 Config Server，二是 Config Client。</p><span id="more"></span><h1 id="分布式配置中心服务端"><a href="#分布式配置中心服务端" class="headerlink" title="分布式配置中心服务端"></a>分布式配置中心服务端</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>创建一个工程名为 <code>spring-cloud-demo-config</code> 的项目，<code>pom.xml</code> 配置文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../spring-cloud-demo-dependencies/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud-demo-config<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.funtl.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2018-Now<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.spring.cloud.demo.config.ConfigApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要增加了 <code>spring-cloud-config-server</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>通过 <code>@EnableConfigServer</code> 注解，开启配置服务器功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.funtl.hello.spring.cloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><p>增加 Config 相关配置，并设置端口号为：<code>8888</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-demo-config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://192.168.***.***/GiottoLee/spring-cloud-config.git</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">respo</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">GiottoLee</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>相关配置说明，如下：</p><ul><li><code>spring.cloud.config.label</code>：配置仓库的分支</li><li><code>spring.cloud.config.server.git.uri</code>：配置 Git 仓库地址（GitHub、GitLab、码云 …）</li><li><code>spring.cloud.config.server.git.search-paths</code>：配置仓库路径（存放配置文件的目录）</li><li><code>spring.cloud.config.server.git.username</code>：访问 Git 仓库的账号</li><li><code>spring.cloud.config.server.git.password</code>：访问 Git 仓库的密码</li></ul><p>注意事项：</p><ul><li>如果使用 GitLab 作为仓库的话，<code>git.uri</code> 需要在结尾加上 <code>.git</code>，GitHub 则不用</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>浏览器端访问：<a href="http://localhost:8888/config-client/dev/master">http://localhost:8888/config-client/dev/master</a> 显示如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>config-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>master<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>7ccbf2cf44d5c6607d4d593659238cb95edba2db<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">state</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">propertySources</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Environment</span>&gt;</span></span><br></pre></td></tr></table></figure><p>证明配置服务中心可以从远程程序获取配置信息</p><h2 id="附：HTTP-请求地址和资源文件映射"><a href="#附：HTTP-请求地址和资源文件映射" class="headerlink" title="附：HTTP 请求地址和资源文件映射"></a>附：HTTP 请求地址和资源文件映射</h2><ul><li><a href="http://ip:port/{application}/{profile}[/{label}]">http://ip:port/{application}/{profile}[/{label}]</a></li><li><a href="http://ip:port/{application}-{profile}.yml">http://ip:port/{application}-{profile}.yml</a></li><li><a href="http://ip:port/{label}/{application}-{profile}.yml">http://ip:port/{label}/{application}-{profile}.yml</a></li><li><a href="http://ip:port/{application}-{profile}.properties">http://ip:port/{application}-{profile}.properties</a></li><li><a href="http://ip:port/{label}/{application}-{profile}.properties">http://ip:port/{label}/{application}-{profile}.properties</a></li></ul><h1 id="分布式配置中心客户端"><a href="#分布式配置中心客户端" class="headerlink" title="分布式配置中心客户端"></a>分布式配置中心客户端</h1><p>在服务消费者（ribbon或feign）的<code>pom.xml</code>中添加 <code>spring-cloud-starter-config</code> 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><p>入口类没有需要特殊处理的地方，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.funtl.hello.spring.cloud.config.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAdminFeignApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(WebAdminFeignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h2><p>Feign原配置文件为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: spring-cloud-demo-web-admin-feign</span><br><span class="line">  thymeleaf:</span><br><span class="line">    cache: <span class="keyword">false</span></span><br><span class="line">    mode: LEGACYHTML5</span><br><span class="line">    encoding: UTF-<span class="number">8</span></span><br><span class="line">    servlet:</span><br><span class="line">      content-type: text/html</span><br><span class="line">  zipkin:</span><br><span class="line">    base-url: http:<span class="comment">//localhost:9411</span></span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8765</span></span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>现在将其移入<code>spring-cloud-config</code>配置文件夹，重命名为<code>web-admin-feign-dev.yml</code>，并增加新的<code>application.yml</code>如下 ：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8888</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">web-admin-feign</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>相关配置说明，如下：</p><ul><li><p><code>spring.cloud.config.uri</code>：配置服务中心的网址</p></li><li><p><code>spring.cloud.config.name</code>：配置文件名称的前缀</p></li><li><p><code>spring.cloud.config.label</code>：配置仓库的分支</p></li><li><p><code>spring.cloud.config.profile</code>：配置文件的环境标识</p></li><li><p>dev：表示开发环境</p><ul><li>test：表示测试环境</li></ul></li><li><p>prod：表示生产环境</p></li></ul><p><strong>实际使用中只需更改<code>profile</code>的标识（dev、test、prod）即可变更运行环境配置</strong></p><p>注意事项：</p><ul><li>配置服务器的默认端口为 <code>8888</code>，如果修改了默认端口，则客户端项目就不能在 <code>application.yml</code> 或 <code>application.properties</code> 中配置 <code>spring.cloud.config.uri</code>，必须在 <code>bootstrap.yml</code> 或是 <code>bootstrap.properties</code> 中配置，原因是 <code>bootstrap</code> 开头的配置文件会被优先加载和配置，切记。</li></ul><h2 id="附：开启-Spring-Boot-Profile"><a href="#附：开启-Spring-Boot-Profile" class="headerlink" title="附：开启 Spring Boot Profile"></a>附：开启 Spring Boot Profile</h2><p>我们在做项目开发的时候，生产环境和测试环境的一些配置可能会不一样，有时候一些功能也可能会不一样，所以我们可能会在上线的时候手工修改这些配置信息。但是 Spring 中为我们提供了 Profile 这个功能。我们只需要在启动的时候添加一个虚拟机参数，激活自己环境所要用的 Profile 就可以了。</p><p>操作起来很简单，只需要为不同的环境编写专门的配置文件，如：<code>application-dev.yml</code>、<code>application-prod.yml</code>， 启动项目时只需要增加一个命令参数 <code>--spring.profiles.active=环境配置</code> 即可，启动命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package      //打成jar包</span><br><span class="line">java -jar hello-spring-cloud-web-admin-feign-1.0.0-SNAPSHOT.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Docker </tag>
            
            <tag> Gitlab </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> 分布式配置中心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Docker部署Gitlab教程</title>
      <link href="/2019/05/22/DockerGitlab/"/>
      <url>/2019/05/22/DockerGitlab/</url>
      
        <content type="html"><![CDATA[<p>GitLab 是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与 Github 类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序 (Wall) 进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。</p><span id="more"></span><h1 id="基于-Docker-安装-GitLab"><a href="#基于-Docker-安装-GitLab" class="headerlink" title="基于 Docker 安装 GitLab"></a>基于 Docker 安装 GitLab</h1><p>首先进入到/usr/local/docker/gitlab目录下（若没有则创建），创建docker-compose.yml配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/docker/gitlab</span><br><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure><p>使用 Docker 来安装和运行 GitLab 中文版,<code>docker-compose.yml</code> 配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">    gitlab:</span><br><span class="line">      image: <span class="string">&#x27;twang2218/gitlab-ce-zh:11.1.4&#x27;</span></span><br><span class="line">      restart: always</span><br><span class="line">      hostname: <span class="string">&#x27;192.168.41.131&#x27;</span>  <span class="comment">#你的linux虚拟机的IP地址</span></span><br><span class="line">      environment:</span><br><span class="line">        TZ: <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">        GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">          external_url <span class="string">&#x27;http://192.168.41.131&#x27;</span></span><br><span class="line">          gitlab_rails[<span class="string">&#x27;time_zone&#x27;</span>] = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">      ports:</span><br><span class="line">        - <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">        - <span class="string">&#x27;8443:443&#x27;</span></span><br><span class="line">        - <span class="string">&#x27;2222:22&#x27;</span></span><br><span class="line">      volumes:</span><br><span class="line">        - /usr/<span class="built_in">local</span>/docker/gitlab/config:/etc/gitlab</span><br><span class="line">        - /usr/<span class="built_in">local</span>/docker/gitlab/data:/var/opt/gitlab</span><br><span class="line">        - /usr/<span class="built_in">local</span>/docker/gitlab/logs:/var/<span class="built_in">log</span>/gitlab</span><br></pre></td></tr></table></figure><p>使用<code>docker-compose up</code>命令启动部署。</p><p>部署完成后，在浏览器输入<code>192.168.41.131</code>即可访问Gitlab。</p><h1 id="关于配置多个SSH的问题"><a href="#关于配置多个SSH的问题" class="headerlink" title="关于配置多个SSH的问题"></a>关于配置多个SSH的问题</h1><p>由于我本身还在使用Github，所以我的电脑上配置了一个Github SSH的Key，而现在我又搭建了一个本地托管服务器，并且希望通过SSH免密登陆，所以我需要配置第二个SSH，这里经常会出现冲突问题，有两种解决办法。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>首先，生成第二个Gitlab使用的SSH公钥与私钥。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;2email@github.com” -f ~/.ssh/id_gitlab_rsa</span><br></pre></td></tr></table></figure><p>此时，你的<code>.ssh</code>文件夹中应该有<code>id_gitlab_rsa``id_gitlab_rsa.pub``id_github_rsa``id_gitlab_hub.pub</code>四个文件，分别对应两个平台的公钥与私钥。</p><p>添加配置文件<code>config</code>如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitlab</span></span><br><span class="line">Host 192.168.41.131 <span class="comment">#Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件（可以直接填写ip地址）</span></span><br><span class="line">    HostName 192.168.41.131  <span class="comment">#本地Gitlab服务器IP</span></span><br><span class="line">    Port 2222  <span class="comment">#Gitlab端口号</span></span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_gitlab <span class="comment">#指明上面User对应的identityFile路径</span></span><br><span class="line">    User GiottoLee <span class="comment">#登录名（如gitlab的username）</span></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><p>然后，添加私钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa $ ssh-add ~/.ssh/github_rsa</span><br></pre></td></tr></table></figure><p>如果执行ssh-add时提示”Could not open a connection to your authentication agent”，可以先执行命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-agent bash</span><br></pre></td></tr></table></figure><p>然后再重新运行ssh-add命令即可。</p><p>最后通过<code>SSH -T</code>命令进行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi GiottoLee! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string">$ ssh -T git@192.168.41.131</span></span><br><span class="line"><span class="string">Welcome to GitLab, @GiottoLee!</span></span><br></pre></td></tr></table></figure><p>测试通过，现在两个SSH可同时使用了。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>这个方法是我在搞清楚方法一之后才发现的，一句话就可以说清楚：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接把github的公钥复制给Gitlab就好了，用一把钥匙访问两个仓库！Shit！</span><br></pre></td></tr></table></figure><h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><p>Gitlab的具体操作与Github操作相同，此处不再赘述，如有需要可以翻看之前的那篇文章<a href="http://giottolee.com/2019/04/08/GitHelpDoc/">Git版本控制及远程仓库的使用</a>]。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Docker </tag>
            
            <tag> Gitlab </tag>
            
            <tag> Help </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose安装与简介</title>
      <link href="/2019/05/21/DockerCompose/"/>
      <url>/2019/05/21/DockerCompose/</url>
      
        <content type="html"><![CDATA[<p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 <code>OpenStack</code> 中的 <code>Heat</code> 十分类似。</p><span id="more"></span><p>其代码目前在 <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> 上开源。</p><p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p><p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p><code>Compose</code> 中有两个重要的概念：</p><ul><li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li></ul><p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p><code>Compose</code> 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 <code>Compose</code> 来进行编排管理。</p><!--more--><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="二进制包"><a href="#二进制包" class="headerlink" title="二进制包"></a>二进制包</h2><p>在 Linux 上的也安装十分简单，从 <a href="https://github.com/docker/compose/releases">官方 GitHub Release</a> 处直接下载编译好的二进制文件即可。</p><p>例如，在 Linux 64 位系统上直接下载对应的二进制包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><p>如果是二进制包方式安装的，删除二进制文件即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果是通过 <code>pip</code> 安装的，则执行如下命令即可删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip uninstall docker-compose</span><br></pre></td></tr></table></figure><h1 id="Docker-Compose-使用"><a href="#Docker-Compose-使用" class="headerlink" title="Docker Compose 使用"></a>Docker Compose 使用</h1><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>首先介绍几个术语。</p><ul><li>服务 (<code>service</code>)：一个应用容器，实际上可以运行多个相同镜像的实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元。</li></ul><p>可见，一个项目可以由多个服务（容器）关联而成，<code>Compose</code> 面向项目进行管理。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>最常见的项目是 web 网站，该项目应该包含 web 应用和缓存。</p><p>下面我们用 <code>Python</code> 来建立一个能够记录页面访问次数的 web 网站。</p><h3 id="web-应用"><a href="#web-应用" class="headerlink" title="web 应用"></a>web 应用</h3><p>新建文件夹，在该目录中编写 <code>app.py</code> 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = Redis(host=<span class="string">&#x27;redis&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    count = redis.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! 该页面已被访问 &#123;&#125; 次。\n&#x27;</span>.<span class="built_in">format</span>(count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>编写 <code>Dockerfile</code> 文件，内容为</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span>-alpine</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /code</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /code</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install redis flask</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><p>编写 <code>docker-compose.yml</code> 文件，这个是 Compose 使用的主模板文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">     </span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure><h3 id="运行-compose-项目"><a href="#运行-compose-项目" class="headerlink" title="运行 compose 项目"></a>运行 compose 项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up</span><br></pre></td></tr></table></figure><p>此时访问本地 <code>5000</code> 端口，每次刷新页面，计数就会加 1。</p><h1 id="Docker-Compose-命令说明"><a href="#Docker-Compose-命令说明" class="headerlink" title="Docker Compose 命令说明"></a>Docker Compose 命令说明</h1><h2 id="命令对象与格式"><a href="#命令对象与格式" class="headerlink" title="命令对象与格式"></a>命令对象与格式</h2><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p><p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p><p><code>docker-compose</code> 命令的基本的使用格式是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure><p>1</p><h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul><li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</li><li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li><li><code>--x-networking</code> 使用 Docker 的可拔插网络后端特性</li><li><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为 <code>bridge</code></li><li><code>--verbose</code> 输出更多调试信息。</li><li><code>-v, --version</code> 打印版本并退出。</li></ul><h2 id="命令使用说明"><a href="#命令使用说明" class="headerlink" title="命令使用说明"></a>命令使用说明</h2><h3 id="build"><a href="#build" class="headerlink" title="build"></a><code>build</code></h3><p>格式为 <code>docker-compose build [options] [SERVICE...]</code>。</p><p>构建（重新构建）项目中的服务容器。</p><p>服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。</p><p>可以随时在项目目录下运行 <code>docker-compose build</code> 来重新构建服务。</p><p>选项包括：</p><ul><li><code>--force-rm</code> 删除构建过程中的临时容器。</li><li><code>--no-cache</code> 构建镜像过程中不使用 cache（这将加长构建过程）。</li><li><code>--pull</code> 始终尝试通过 pull 来获取更新版本的镜像。</li></ul><h3 id="config"><a href="#config" class="headerlink" title="config"></a><code>config</code></h3><p>验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p><h3 id="down"><a href="#down" class="headerlink" title="down"></a><code>down</code></h3><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h3><p>进入指定的容器。</p><h3 id="help"><a href="#help" class="headerlink" title="help"></a><code>help</code></h3><p>获得一个命令的帮助。</p><h3 id="images"><a href="#images" class="headerlink" title="images"></a><code>images</code></h3><p>列出 Compose 文件中包含的镜像。</p><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a><code>kill</code></h3><p>格式为 <code>docker-compose kill [options] [SERVICE...]</code>。</p><p>通过发送 <code>SIGKILL</code> 信号来强制停止服务容器。</p><p>支持通过 <code>-s</code> 参数来指定发送的信号，例如通过如下指令发送 <code>SIGINT</code> 信号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose <span class="built_in">kill</span> -s SIGINT</span><br></pre></td></tr></table></figure><h3 id="logs"><a href="#logs" class="headerlink" title="logs"></a><code>logs</code></h3><p>格式为 <code>docker-compose logs [options] [SERVICE...]</code>。</p><p>查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 <code>--no-color</code> 来关闭颜色。</p><p>该命令在调试问题的时候十分有用。</p><h3 id="pause"><a href="#pause" class="headerlink" title="pause"></a><code>pause</code></h3><p>格式为 <code>docker-compose pause [SERVICE...]</code>。</p><p>暂停一个服务容器。</p><h3 id="port"><a href="#port" class="headerlink" title="port"></a><code>port</code></h3><p>格式为 <code>docker-compose port [options] SERVICE PRIVATE_PORT</code>。</p><p>打印某个容器端口所映射的公共端口。</p><p>选项：</p><ul><li><code>--protocol=proto</code> 指定端口协议，tcp（默认值）或者 udp。</li><li><code>--index=index</code> 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。</li></ul><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a><code>ps</code></h3><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p><p>列出项目中目前的所有容器。</p><p>选项：</p><ul><li><code>-q</code> 只打印容器的 ID 信息。</li></ul><h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a><code>pull</code></h3><p>格式为 <code>docker-compose pull [options] [SERVICE...]</code>。</p><p>拉取服务依赖的镜像。</p><p>选项：</p><ul><li><code>--ignore-pull-failures</code> 忽略拉取镜像过程中的错误。</li></ul><h3 id="push"><a href="#push" class="headerlink" title="push"></a><code>push</code></h3><p>推送服务依赖的镜像到 Docker 镜像仓库。</p><h3 id="restart"><a href="#restart" class="headerlink" title="restart"></a><code>restart</code></h3><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p><p>重启项目中的服务。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li></ul><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h3><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p><p>选项：</p><ul><li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code> 删除容器所挂载的数据卷。</li></ul><h3 id="run"><a href="#run" class="headerlink" title="run"></a><code>run</code></h3><p>格式为 <code>docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</code>。</p><p>在指定服务上执行一个命令。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run ubuntu ping docker.com</span><br></pre></td></tr></table></figure><p>将会启动一个 ubuntu 服务容器，并执行 <code>ping docker.com</code> 命令。</p><p>默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。</p><p>该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。</p><p>两个不同点：</p><ul><li>给定命令将会覆盖原有的自动运行命令；</li><li>不会自动创建端口，以避免冲突。</li></ul><p>如果不希望自动启动关联的容器，可以使用 <code>--no-deps</code> 选项，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run --no-deps web python manage.py shell</span><br></pre></td></tr></table></figure><p>将不会启动 web 容器所关联的其它容器。</p><p>选项：</p><ul><li><code>-d</code> 后台运行容器。</li><li><code>--name NAME</code> 为容器指定一个名字。</li><li><code>--entrypoint CMD</code> 覆盖默认的容器启动指令。</li><li><code>-e KEY=VAL</code> 设置环境变量值，可多次使用选项来设置多个环境变量。</li><li><code>-u, --user=&quot;&quot;</code> 指定运行容器的用户名或者 uid。</li><li><code>--no-deps</code> 不自动启动关联的服务容器。</li><li><code>--rm</code> 运行命令后自动删除容器，<code>d</code> 模式下将忽略。</li><li><code>-p, --publish=[]</code> 映射容器端口到本地主机。</li><li><code>--service-ports</code> 配置服务端口并映射到本地主机。</li><li><code>-T</code> 不分配伪 tty，意味着依赖 tty 的指令将无法运行。</li></ul><h3 id="scale"><a href="#scale" class="headerlink" title="scale"></a><code>scale</code></h3><p>格式为 <code>docker-compose scale [options] [SERVICE=NUM...]</code>。</p><p>设置指定服务运行的容器个数。</p><p>通过 <code>service=num</code> 的参数来设置数量。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose scale web=3 db=2</span><br></pre></td></tr></table></figure><p>将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。</p><p>一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h3 id="start"><a href="#start" class="headerlink" title="start"></a><code>start</code></h3><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p><p>启动已经存在的服务容器。</p><h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a><code>stop</code></h3><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h3 id="top"><a href="#top" class="headerlink" title="top"></a><code>top</code></h3><p>查看各个服务容器内运行的进程。</p><h3 id="unpause"><a href="#unpause" class="headerlink" title="unpause"></a><code>unpause</code></h3><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p><p>恢复处于暂停状态中的服务。</p><h3 id="up"><a href="#up" class="headerlink" title="up"></a><code>up</code></h3><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p><p>链接的服务都将会被自动启动，除非已经处于运行状态。</p><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p><p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 <code>docker-compose up --no-recreate</code>。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 <code>docker-compose up --no-deps -d &lt;SERVICE_NAME&gt;</code> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p><p>选项：</p><ul><li><code>-d</code> 在后台运行服务容器。</li><li><code>--no-color</code> 不使用颜色来区分不同的服务的控制台输出。</li><li><code>--no-deps</code> 不启动服务所链接的容器。</li><li><code>--force-recreate</code> 强制重新创建容器，不能与 <code>--no-recreate</code> 同时使用。</li><li><code>--no-recreate</code> 如果容器已经存在了，则不重新创建，不能与 <code>--force-recreate</code> 同时使用。</li><li><code>--no-build</code> 不自动构建缺失的服务镜像。</li><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h3 id="version"><a href="#version" class="headerlink" title="version"></a><code>version</code></h3><p>格式为 <code>docker-compose version</code>。</p><p>打印版本信息。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Docker </tag>
            
            <tag> Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装与简介</title>
      <link href="/2019/05/21/Docker-Help/"/>
      <url>/2019/05/21/Docker-Help/</url>
      
        <content type="html"><![CDATA[<p>Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line"><span class="comment"># 可能会出现 404 错误，请移步下面的特别说明</span></span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h3><h4 id="Ubuntu-16-04-、Debian-8-、CentOS-7"><a href="#Ubuntu-16-04-、Debian-8-、CentOS-7" class="headerlink" title="Ubuntu 16.04+、Debian 8+、CentOS 7"></a>Ubuntu 16.04+、Debian 8+、CentOS 7</h4><p>&emsp;&emsp;对于使用 <a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。</strong></p><p>镜像配置后需要重启Docker才可以使用镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl docker restart</span><br></pre></td></tr></table></figure><h2 id="APT安装"><a href="#APT安装" class="headerlink" title="APT安装"></a>APT安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 更新软件源</span><br><span class="line">sudo apt-get update</span><br><span class="line"># 安装所需依赖</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"># 安装 GPG 证书</span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"># 新增软件源信息</span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"># 再次更新软件源</span><br><span class="line">sudo apt-get -y update</span><br><span class="line"># 安装 Docker CE 版</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.09.6</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.8</span><br><span class="line"> Git commit:        481bc77</span><br><span class="line"> Built:             Sat May  4 02:35:57 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.6</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.8</span><br><span class="line">  Git commit:       481bc77</span><br><span class="line">  Built:            Sat May  4 01:59:36 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="配置加速器"><a href="#配置加速器" class="headerlink" title="配置加速器"></a>配置加速器</h4><p>对于使用 <strong>systemd</strong> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，一定要保证该文件符合 JSON 规范，否则 Docker 将不能启动。</p></blockquote><p>验证加速器是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br><span class="line">docker info</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 出现如下语句即表示配置成功</span></span><br><span class="line">Registry Mirrors:</span><br><span class="line"> https://registry.docker-cn.com/</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="查看镜像的基本操作"><a href="#查看镜像的基本操作" class="headerlink" title="查看镜像的基本操作"></a>查看镜像的基本操作</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p>&emsp;&emsp;从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;具体的选项可以通过 <code>docker pull --help</code> 命令看到，这里我们说一下镜像名称的格式。</p><ul><li>Docker 镜像仓库地址：地址的格式一般是 <code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是 Docker Hub。</li><li>仓库名：如之前所说，这里的仓库名是两段式名称，即 <code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</li></ul><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull ubuntu:16.04</span><br><span class="line">16.04: Pulling from library/ubuntu</span><br><span class="line">bf5d46315322: Pull complete</span><br><span class="line">9f13e0ac480c: Pull complete</span><br><span class="line">e8988b5b3097: Pull complete</span><br><span class="line">40af181810e7: Pull complete</span><br><span class="line">e6f7c7e5c03e: Pull complete</span><br><span class="line">Digest: sha256:147913621d9cdea08853f6ba9116c2e27a3ceffecf3b492983ae97c3d643fbbe</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:16.04</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面的命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub 获取镜像。而镜像名称是 <code>ubuntu:16.04</code>，因此将会获取官方镜像 <code>library/ubuntu</code> 仓库中标签为 <code>16.04</code> 的镜像。</p><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><p>&emsp;&emsp;有了镜像后，我们就能够以这个镜像为基础启动并运行一个容器。以上面的 <code>ubuntu:16.04</code> 为例，如果我们打算启动里面的 <code>bash</code> 并且进行交互式操作的话，可以执行下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm \</span><br><span class="line">    ubuntu:16.04 \</span><br><span class="line">    bash</span><br><span class="line"></span><br><span class="line">root@e7009c6ce357:/<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">&quot;Ubuntu&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;16.04.4 LTS, Trusty Tahr&quot;</span></span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=<span class="string">&quot;Ubuntu 16.04.4 LTS&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;16.04&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;http://www.ubuntu.com/&quot;</span></span><br><span class="line">SUPPORT_URL=<span class="string">&quot;http://help.ubuntu.com/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;http://bugs.launchpad.net/ubuntu/&quot;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>docker run</code> 就是运行容器的命令，我们这里简要的说明一下上面用到的参数。</p><ul><li><code>-it</code>：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 <code>bash</code> 执行一些命令并查看返回结果，因此我们需要交互式终端。</li><li><code>--rm</code>：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 <code>docker rm</code>。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 <code>--rm</code> 可以避免浪费空间。</li><li><code>ubuntu:16.04</code>：这是指用 <code>ubuntu:16.04</code> 镜像为基础来启动容器。</li><li><code>bash</code>：放在镜像名后的是<strong>命令</strong>，这里我们希望有个交互式 Shell，因此用的是 <code>bash</code>。<br>&emsp;&emsp;进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 <code>cat /etc/os-release</code>，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 <code>Ubuntu 16.04.4 LTS</code> 系统。<br>&emsp;&emsp;最后我们通过 <code>exit</code> 退出了这个容器。</li></ul><h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h2><p>要想列出已经下载下来的镜像，可以使用 <code>docker image ls</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis                latest              5f515359c7f8        5 days ago          183 MB</span><br><span class="line">nginx                latest              05a60462f8ba        5 days ago          181 MB</span><br><span class="line">mongo                3.2                 fe9198c04d62        5 days ago          342 MB</span><br><span class="line">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br><span class="line">ubuntu               16.04               f753707788c5        4 weeks ago         127 MB</span><br><span class="line">ubuntu               latest              f753707788c5        4 weeks ago         127 MB</span><br><span class="line">ubuntu               14.04               1e0c3dd64ccd        4 weeks ago         188 MB</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;列表包含了 <code>仓库名</code>、<code>标签</code>、<code>镜像 ID</code>、<code>创建时间</code> 以及 <code>所占用的空间</code>。</p><p>&emsp;&emsp;其中仓库名、标签在之前的基础概念章节已经介绍过了。<strong>镜像 ID</strong> 则是镜像的唯一标识，一个镜像可以对应多个<strong>标签</strong>。因此，在上面的例子中，我们可以看到 <code>ubuntu:16.04</code> 和 <code>ubuntu:latest</code> 拥有相同的 ID，因为它们对应的是同一个镜像。</p><h3 id="镜像体积"><a href="#镜像体积" class="headerlink" title="镜像体积"></a>镜像体积</h3><p>&emsp;&emsp;如果仔细观察，会注意到，这里标识的所占用空间和在 Docker Hub 上看到的镜像大小不同。比如，<code>ubuntu:16.04</code> 镜像大小，在这里是 <code>127 MB</code>，但是在 <a href="https://hub.docker.com/r/library/ubuntu/tags/">Docker Hub</a> 显示的却是 <code>50 MB</code>。这是因为 Docker Hub 中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 <code>docker image ls</code> 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。</p><p>&emsp;&emsp;另外一个需要注意的问题是，<code>docker image ls</code> 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。</p><p>&emsp;&emsp;你可以通过以下命令来便捷的查看镜像、容器、数据卷所占用的空间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker system df</span><br><span class="line"></span><br><span class="line">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class="line">Images              24                  0                   1.992GB             1.992GB (100%)</span><br><span class="line">Containers          1                   0                   62.82MB             62.82MB (100%)</span><br><span class="line">Local Volumes       9                   0                   652.2MB             652.2MB (100%)</span><br><span class="line">Build Cache                    </span><br></pre></td></tr></table></figure><h3 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h3><p>&emsp;&emsp;上面的镜像列表中，还可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code>。：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>&lt;none&gt;</code>。除了 <code>docker pull</code> 可能导致这种情况，<code>docker build</code> 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls -f dangling=<span class="literal">true</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image prune</span><br></pre></td></tr></table></figure><h3 id="中间层镜像"><a href="#中间层镜像" class="headerlink" title="中间层镜像"></a>中间层镜像</h3><p>&emsp;&emsp;为了加速镜像构建、重复利用资源，Docker 会利用 <strong>中间层镜像</strong>。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 <code>docker image ls</code> 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 <code>-a</code> 参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls -a</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。</p><h3 id="列出部分镜像"><a href="#列出部分镜像" class="headerlink" title="列出部分镜像"></a>列出部分镜像</h3><p>&emsp;&emsp;不加任何参数的情况下，<code>docker image ls</code> 会列出所有顶级镜像，但是有时候我们只希望列出部分镜像。<code>docker image ls</code> 有好几个参数可以帮助做到这个事情。</p><p>&emsp;&emsp;根据仓库名列出镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls ubuntu</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              16.04               f753707788c5        4 weeks ago         127 MB</span><br><span class="line">ubuntu              latest              f753707788c5        4 weeks ago         127 MB</span><br><span class="line">ubuntu              14.04               1e0c3dd64ccd        4 weeks ago         188 MB</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;列出特定的某个镜像，也就是说指定仓库名和标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls ubuntu:16.04</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              16.04               f753707788c5        4 weeks ago         127 MB</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;除此以外，<code>docker image ls</code> 还支持强大的过滤器参数 <code>--filter</code>，或者简写 <code>-f</code>。之前我们已经看到了使用过滤器来列出虚悬镜像的用法，它还有更多的用法。比如，我们希望看到在 <code>mongo:3.2</code> 之后建立的镜像，可以用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls -f since=mongo:3.2</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis               latest              5f515359c7f8        5 days ago          183 MB</span><br><span class="line">nginx               latest              05a60462f8ba        5 days ago          181 MB</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;想查看某个位置之前的镜像也可以，只需要把 <code>since</code> 换成 <code>before</code> 即可。</p><p>此外，如果镜像构建时，定义了 <code>LABEL</code>，还可以通过 <code>LABEL</code> 来过滤。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls -f label=com.example.version=0.1</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="以特定格式显示"><a href="#以特定格式显示" class="headerlink" title="以特定格式显示"></a>以特定格式显示</h3><p>&emsp;&emsp;默认情况下，<code>docker image ls</code> 会输出一个完整的表格，但是我们并非所有时候都会需要这些内容。比如，刚才删除虚悬镜像的时候，我们需要利用 <code>docker image ls</code> 把所有的虚悬镜像的 ID 列出来，然后才可以交给 <code>docker image rm</code> 命令作为参数来删除指定的这些镜像，这个时候就用到了 <code>-q</code> 参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls -q</span><br><span class="line">5f515359c7f8</span><br><span class="line">05a60462f8ba</span><br><span class="line">fe9198c04d62</span><br><span class="line">00285df0df87</span><br><span class="line">f753707788c5</span><br><span class="line">f753707788c5</span><br><span class="line">1e0c3dd64ccd</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>--filter</code> 配合 <code>-q</code> 产生出指定范围的 ID 列表，然后送给另一个 <code>docker</code> 命令作为参数，从而针对这组实体成批的进行某种操作的做法在 Docker 命令行使用过程中非常常见，不仅仅是镜像，将来我们会在各个命令中看到这类搭配以完成很强大的功能。因此每次在文档看到过滤器后，可以多注意一下它们的用法。</p><p>&emsp;&emsp;另外一些时候，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其它程序解析结果等，这就用到了 <a href="https://gohugo.io/templates/go-templates/">Go 的模板语法</a>。</p><p>&emsp;&emsp;比如，下面的命令会直接列出镜像结果，并且只包含镜像ID和仓库名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls --format <span class="string">&quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</span></span><br><span class="line">5f515359c7f8: redis</span><br><span class="line">05a60462f8ba: nginx</span><br><span class="line">fe9198c04d62: mongo</span><br><span class="line">00285df0df87: &lt;none&gt;</span><br><span class="line">f753707788c5: ubuntu</span><br><span class="line">f753707788c5: ubuntu</span><br><span class="line">1e0c3dd64ccd: ubuntu</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls --format <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;&quot;</span></span><br><span class="line">IMAGE ID            REPOSITORY          TAG</span><br><span class="line">5f515359c7f8        redis               latest</span><br><span class="line">05a60462f8ba        nginx               latest</span><br><span class="line">fe9198c04d62        mongo               3.2</span><br><span class="line">00285df0df87        &lt;none&gt;              &lt;none&gt;</span><br><span class="line">f753707788c5        ubuntu              16.04</span><br><span class="line">f753707788c5        ubuntu              latest</span><br><span class="line">1e0c3dd64ccd        ubuntu              14.04</span><br></pre></td></tr></table></figure><h2 id="删除镜像的基本操作"><a href="#删除镜像的基本操作" class="headerlink" title="删除镜像的基本操作"></a>删除镜像的基本操作</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>&emsp;&emsp;如果要删除本地的镜像，可以使用 <code>docker image rm</code> 命令，其格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure><h3 id="用-ID、镜像名、摘要删除镜像"><a href="#用-ID、镜像名、摘要删除镜像" class="headerlink" title="用 ID、镜像名、摘要删除镜像"></a>用 ID、镜像名、摘要删除镜像</h3><p>&emsp;&emsp;其中，<code>&lt;镜像&gt;</code> 可以是 <code>镜像短 ID</code>、<code>镜像长 ID</code>、<code>镜像名</code> 或者 <code>镜像摘要</code>。</p><p>&emsp;&emsp;比如我们有这么一些镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos                      latest              0584b3d2cf6d        3 weeks ago         196.5 MB</span><br><span class="line">redis                       alpine              501ad78535f0        3 weeks ago         21.03 MB</span><br><span class="line">docker                      latest              cf693ec9b5c7        3 weeks ago         105.1 MB</span><br><span class="line">nginx                       latest              e43d811ce2f4        5 weeks ago         181.5 MB</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们可以用镜像的完整 ID，也称为 <code>长 ID</code>，来删除镜像。使用脚本的时候可能会用长 ID，但是人工输入就太累了，所以更多的时候是用 <code>短 ID</code> 来删除镜像。<code>docker image ls</code> 默认列出的就已经是短 ID 了，一般取前3个字符以上，只要足够区分于别的镜像就可以了。</p><p>&emsp;&emsp;比如这里，如果我们要删除 <code>redis:alpine</code> 镜像，可以执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm 501</span><br><span class="line">Untagged: redis:alpine</span><br><span class="line">Untagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d</span><br><span class="line">Deleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7</span><br><span class="line">Deleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b</span><br><span class="line">Deleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23</span><br><span class="line">Deleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa</span><br><span class="line">Deleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3</span><br><span class="line">Deleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们也可以用<code>镜像名</code>，也就是 <code>&lt;仓库名&gt;:&lt;标签&gt;</code>，来删除镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm centos</span><br><span class="line">Untagged: centos:latest</span><br><span class="line">Untagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c</span><br><span class="line">Deleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a</span><br><span class="line">Deleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当然，更精确的是使用 <code>镜像摘要</code> 删除镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls --digests</span><br><span class="line">REPOSITORY                  TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE</span><br><span class="line">node                        slim                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   6e0c4c8e3913        3 weeks ago         214 MB</span><br><span class="line"></span><br><span class="line">$ docker image rm node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228</span><br><span class="line">Untagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228</span><br></pre></td></tr></table></figure><h3 id="用-docker-image-ls-命令来配合"><a href="#用-docker-image-ls-命令来配合" class="headerlink" title="用 docker image ls 命令来配合"></a>用 docker image ls 命令来配合</h3><p>&emsp;&emsp;像其它可以承接多个实体的命令一样，可以使用 <code>docker image ls -q</code> 来配合使用 <code>docker image rm</code>，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。</p><p>&emsp;&emsp;比如，我们需要删除所有仓库名为 <code>redis</code> 的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm $(docker image ls -q redis)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;或者删除所有在 <code>mongo:3.2</code> 之前的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm $(docker image ls -q -f before=mongo:3.2)</span><br></pre></td></tr></table></figure><p>&lt;注&gt;<code>docker image rm</code> 可简写为 <code>docker rmi</code>。</p><h2 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>&emsp;&emsp;启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（<code>stopped</code>）的容器重新启动。</p><p>&emsp;&emsp;因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器</p><h3 id="新建并启动"><a href="#新建并启动" class="headerlink" title="新建并启动"></a>新建并启动</h3><p>&emsp;&emsp;所需要的命令主要为 <code>docker run</code>。</p><p>&emsp;&emsp;例如，下面的命令输出一个 “Hello World”，之后终止容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run ubuntu:14.04 /bin/<span class="built_in">echo</span> <span class="string">&#x27;Hello world&#x27;</span></span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这跟在本地直接执行 <code>/bin/echo &#39;hello world&#39;</code> 几乎感觉不出任何区别。</p><p>&emsp;&emsp;启动容器并赋予其一个名字使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 8080:8080 --name tomcat1 tomcat</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;下面的命令则启动一个 bash 终端，允许用户进行交互。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -t -i ubuntu:14.04 /bin/bash</span><br><span class="line">root@af8bae53bdd3:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中，<code>-t</code> 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， <code>-i</code> 则让容器的标准输入保持打开。</p><p>&emsp;&emsp;在交互模式下，用户可以通过所创建的终端来输入命令，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@af8bae53bdd3:/<span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line">root@af8bae53bdd3:/<span class="comment"># ls</span></span><br><span class="line">bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li><li>利用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li><li>从地址池配置一个 ip 地址给容器</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ul><h3 id="启动已终止容器"><a href="#启动已终止容器" class="headerlink" title="启动已终止容器"></a>启动已终止容器</h3><p>&emsp;&emsp;可以利用 <code>docker container start</code> 命令，直接将一个已经终止的容器启动运行。</p><p>&emsp;&emsp;容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 <code>ps</code> 或 <code>top</code> 来查看进程信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ba267838cc1b:/<span class="comment"># ps</span></span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line">    1 ?        00:00:00 bash</span><br><span class="line">   11 ?        00:00:00 ps</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高。</p><h3 id="守护态运行"><a href="#守护态运行" class="headerlink" title="守护态运行"></a>守护态运行</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>&emsp;&emsp;更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 <code>-d</code> 参数来实现。</p><p>&emsp;&emsp;下面举两个例子来说明一下。</p><p>&emsp;&emsp;如果不使用 <code>-d</code> 参数运行容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run ubuntu:17.10 /bin/sh -c <span class="string">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;容器会把输出的结果 (STDOUT) 打印到宿主机上面</p><p>&emsp;&emsp;如果使用了 <code>-d</code> 参数运行容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d ubuntu:17.10 /bin/sh -c <span class="string">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span><br><span class="line">77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 <code>docker logs</code>查看)。</p><p><strong>注：</strong> 容器是否会长久运行，是和 <code>docker run</code> 指定的命令有关，和 <code>-d</code> 参数无关。</p><p>&emsp;&emsp;使用 <code>-d</code> 参数启动后会返回一个唯一的 id，也可以通过 <code>docker container ls</code> 命令来查看容器信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES</span><br><span class="line">77b2dc01fe0f  ubuntu:17.10  /bin/sh -c &#x27;while tr  2 minutes ago  Up 1 minute        agitated_wright</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;要获取容器的输出信息，可以通过 <code>docker container logs</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker container logs [container ID or NAMES]</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">. . .</span><br></pre></td></tr></table></figure><h3 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h3><p>&emsp;&emsp;可以使用 <code>docker container stop</code> 来终止一个运行中的容器。</p><p>&emsp;&emsp;此外，当 Docker 容器中指定的应用终结时，容器也自动终止。</p><p>&emsp;&emsp;例如对于上一章节中只启动了一个终端的容器，用户通过 <code>exit</code> 命令或 <code>Ctrl+d</code> 来退出终端时，所创建的容器立刻终止。</p><p>&emsp;&emsp;终止状态的容器可以用 <code>docker container ls -a</code> 命令看到。例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker container ls -a</span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES</span><br><span class="line">ba267838cc1b        ubuntu:14.04             <span class="string">&quot;/bin/bash&quot;</span>            30 minutes ago      Exited (0) About a minute ago                       trusting_newton</span><br><span class="line">98e5efa7d997        training/webapp:latest   <span class="string">&quot;python app.py&quot;</span>        About an hour ago   Exited (0) 34 minutes ago                           backstabbing_pike</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;处于终止状态的容器，可以通过 <code>docker container start</code> 命令来重新启动。</p><p>&emsp;&emsp;此外，<code>docker container restart</code> 命令会将一个运行态的容器终止，然后再重新启动它。</p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>&emsp;&emsp;在使用 <code>-d</code> 参数时，容器启动后会进入后台。</p><p>&emsp;&emsp;某些时候需要进入容器进行操作，包括使用 <code>docker attach</code> 命令或 <code>docker exec</code> 命令，推荐大家使用 <code>docker exec</code> 命令，原因会在下面说明。</p><h4 id="attach-命令"><a href="#attach-命令" class="headerlink" title="attach 命令"></a><code>attach</code> 命令</h4><p>&emsp;&emsp;<code>docker attach</code> 是 Docker 自带的命令。下面示例如何使用该命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -dit ubuntu</span><br><span class="line">243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550</span><br><span class="line"></span><br><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">243c32535da7        ubuntu:latest       <span class="string">&quot;/bin/bash&quot;</span>         18 seconds ago      Up 17 seconds                           nostalgic_hypatia</span><br><span class="line"></span><br><span class="line">$ docker attach 243c</span><br><span class="line">root@243c32535da7:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><em>注：</em> 如果从这个 stdin 中 exit，会导致容器的停止。</p><h4 id="exec-命令"><a href="#exec-命令" class="headerlink" title="exec 命令"></a><code>exec</code> 命令</h4><h5 id="i-t-参数"><a href="#i-t-参数" class="headerlink" title="-i -t 参数"></a>-i -t 参数</h5><p>&emsp;&emsp;<code>docker exec</code> 后边可以跟多个参数，这里主要说明 <code>-i</code> <code>-t</code> 参数。</p><p>&emsp;&emsp;只用 <code>-i</code> 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p><p>&emsp;&emsp;当 <code>-i</code> <code>-t</code> 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -dit ubuntu</span><br><span class="line">69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6</span><br><span class="line"></span><br><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">69d137adef7a        ubuntu:latest       <span class="string">&quot;/bin/bash&quot;</span>         18 seconds ago      Up 17 seconds                           zealous_swirles</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -i 69d1 bash</span><br><span class="line">ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it 69d1 bash</span><br><span class="line">root@69d137adef7a:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 <code>docker exec</code> 的原因。</p><p>&emsp;&emsp;更多参数说明请使用 <code>docker exec --help</code> 查看。</p><h3 id="Docker-删除容器"><a href="#Docker-删除容器" class="headerlink" title="Docker 删除容器"></a>Docker 删除容器</h3><p>&emsp;&emsp;可以使用 <code>docker container rm</code> 来删除一个处于终止状态的容器。例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker container rm  trusting_newton</span><br><span class="line">trusting_newton</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果要删除一个运行中的容器，可以添加 <code>-f</code> 参数。Docker 会发送 <code>SIGKILL</code> 信号给容器。</p><h4 id="清理所有处于终止状态的容器"><a href="#清理所有处于终止状态的容器" class="headerlink" title="清理所有处于终止状态的容器"></a>清理所有处于终止状态的容器</h4><p>&emsp;&emsp;用 <code>docker container ls -a</code> 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container prune</span><br></pre></td></tr></table></figure><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p><code>&amp;emsp;&amp;emsp;数据卷</code>是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li><code>数据卷</code> 可以在容器之间共享和重用</li><li>对 <code>数据卷</code> 的修改会立马生效</li><li>对 <code>数据卷</code> 的更新，不会影响镜像</li><li><code>数据卷</code> 默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的 <code>数据卷</code>。</p></blockquote><h3 id="选择-v-还是-–mount-参数"><a href="#选择-v-还是-–mount-参数" class="headerlink" title="选择 -v 还是 -–mount 参数"></a>选择 -v 还是 -–mount 参数</h3><p>&emsp;&emsp;Docker 新用户应该选择 <code>--mount</code> 参数，经验丰富的 Docker 使用者对 <code>-v</code> 或者 <code>--volume</code> 已经很熟悉了，但是推荐使用 <code>--mount</code> 参数。</p><h3 id="创建一个数据卷"><a href="#创建一个数据卷" class="headerlink" title="创建一个数据卷"></a>创建一个数据卷</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume create my-vol</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;查看所有的 <code>数据卷</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume ls</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span>               my-vol</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在主机里使用以下命令可以查看指定 <code>数据卷</code> 的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume inspect my-vol</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/my-vol/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;my-vol&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="启动一个挂载数据卷的容器"><a href="#启动一个挂载数据卷的容器" class="headerlink" title="启动一个挂载数据卷的容器"></a>启动一个挂载数据卷的容器</h3><p>&emsp;&emsp;在用 <code>docker run</code> 命令的时候，使用 <code>--mount</code> 标记来将 <code>数据卷</code> 挂载到容器里。在一次 <code>docker run</code>中可以挂载多个 <code>数据卷</code>。</p><p>下面创建一个名为 <code>web</code> 的容器，并加载一个 <code>数据卷</code> 到容器的 <code>/webapp</code> 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -P \</span><br><span class="line">    --name web \</span><br><span class="line">    <span class="comment"># -v my-vol:/wepapp \</span></span><br><span class="line">    --mount <span class="built_in">source</span>=my-vol,target=/webapp \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure><h3 id="查看数据卷的具体信息"><a href="#查看数据卷的具体信息" class="headerlink" title="查看数据卷的具体信息"></a>查看数据卷的具体信息</h3><p>&emsp;&emsp;在主机里使用以下命令可以查看 <code>web</code> 容器的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect web</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>数据卷</code> 信息在 “Mounts” Key 下面</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;my-vol&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/my-vol/_data&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Destination&quot;</span>: <span class="string">&quot;/app&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume rm my-vol</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>数据卷</code> 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 <code>数据卷</code>，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 <code>数据卷</code>。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 <code>docker rm -v</code> 这个命令。</p><p>&emsp;&emsp;的数据卷可能会占据很多空间，要清理请使用以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume prune</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔：谈谈考研二战</title>
      <link href="/2019/05/01/Dairy_2019_5_1/"/>
      <url>/2019/05/01/Dairy_2019_5_1/</url>
      
        <content type="html"><![CDATA[<p>今天是5月1日，大概也到了2019考研这一路的最后尾声，调剂系统马上就要关闭了，至此2019考研学生将郑重的结束自己这一年的旅程。</p><span id="more"></span><p>对于很多应届本科生来说，对于毕业后直接步入社会参加工作是一个很突兀的转折，对我来说是这样，我相信对于绝大多数和我同龄的学生也会有这种感觉：我还是一个学生，怎么转眼间就步入社会了呢？对于角色的转变、社会成分的增加，给了应届毕业生很大的压力，不管是应对生活的改变还是心态的转变。说一个直接的例子，我有一个朋友，在大学里过的潇潇洒洒，每天都会参加各种源源不断的活动，喝酒、蹦迪、打牌，毕业工作几个月以后，他这么跟我说：”还是上学好，我现在挣得去掉房租还没我爸以前给我的生活费多。”也有朋友直到毕业前校招的时候，也还没想好自己到底要不要做的程序员还是去另谋出路。学生社会属性的加深并没有考虑到自己是否做好了准备，我相信这是很多人选择去考研的一个原因。<br>&emsp;&emsp;另外一个重要的原因是后悔自己高中时期没有好好学习，到了大学不满足于现状，希望满足自己的”名校梦”。<br>&emsp;&emsp;理由总是千千万万，最后终究还是要根据自己的需求来做决定，人各有所求，也各有天命，这不是一条每个人都必须要走的路。在这里，我只想跟那些想走这条路，或者还没想好到底要不要走这条路的人说一些我所了解到的东西。</p><!--more--><h1 id="复习方法"><a href="#复习方法" class="headerlink" title="复习方法"></a>复习方法</h1><p>由于研究生考试每年都会在12月的最后一个周末举行，大多数考验学生的复习周期为一年左右，所以通常情况下在2月份就要开始着手准备。</p><h2 id="择校"><a href="#择校" class="headerlink" title="择校"></a>择校</h2><p>因为研究生考试需要先报考院线，再参加考试，而各学校各专业的统考科目与自命题科目均有所不同，所以选择一个符合自己能力且能对自己能力有所提升的学校至关重要。</p><p>对于择校我的建议是：可以适当多找几所学校，这些学校的考试科目大致相同但学校层次有所区别，比如院校A：英语二、政治、数学二、专业课1，院校B：英语二、政治、数学二、专业课2。这样当在复习过程中发现自己状态明显变差，这时候便需要好好考虑是否需要下调志愿，选择另一所报考人数与难度较低的院校，相反，在复习过程若发现自己状态持续上升，这是你也需要考虑是否需要提高院校层次。这是需要自己考虑的问题，别人很难给到答案。</p><h2 id="复习时间线"><a href="#复习时间线" class="headerlink" title="复习时间线"></a>复习时间线</h2><p>我隐约记得一个老师说过，上岸考生的复习时间大多均在1000个小时以上。这种说法太绝对，我也认识一个朋友，考本校（普通院校）研究生只花了两个月时间。但是，如果你想考一所好学校的研究生的话，你的确需要在这上面花费大量的时间去复习。</p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>前期以背单词为主，买一本单词书，市面上的单词书好坏真的没有太大区别，我觉得随便买一本印刷好点的，自己看着舒服的就可以，我使用的是朱伟的《恋练有词》，也没什么特别的原因，我也不喜欢朱伟这个人，就是当时淘宝刚好看到了而已。在6月之前至少背三遍，书本上的例句同样要进行分析句式做笔记，这对于以后做阅读理解学习长难句很有帮助。</p><p>六月份以后需要做的是对阅读理解的高强度练习，以真题为主，开始刷历年英语真题，尤其着重与对阅读理解的分析，在英语试卷中，阅读理解所占的分值最大，20题每题2分，所以阅读理解是英语考试的重点，如果阅读理解可以拿到一个不错的分数，那么你的总分肯定也不会差。对于阅读理解，建议不管你是英语一还是二，阅读理解都要做一下，至于一些英语老师自己出的模拟题，可以不用做。我有做过几套，答案有些不太严谨，而且毕竟与命题思路有悖。在这段时间里，同样要着重练习写作，培养自己的写作习惯与写作技巧，可以买一本关于写作的参考书，书中通常会有一些写作模板。但是，如果你和我一样很难套用模板，喜欢想到哪写到哪的话，我建议也不要刻意去使用写作模板，因为等你上了考场，很难吧模板套进去并且让他显得很圆润。</p><p>十月份以后，你的大部分时间会被数学、专业课，尤其是政治这些科目所占用，复习英语的时间会明显减少，这段时间重点是整理复习自己做过的真题，完形填空选项中的单词一定要背，阅读理解中的生词也一定要记住，而新题型每年的难度基本不会太大，得分也比较容易，写作的练习这段时间也不要放下，每天拿出一点点时间写一写，不想写也要看一下。这样一直持续到考前，你会一直保持一个较好的语感。</p><h3 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h3><p>我的政治考的并不是很好，我就说一下我吃亏的点。政治复习一般都是从7月份开始复习，也就是说7月份之前没必要看政治，因为你有更重要的数学，并且政治的记忆性决定了你看的早忘得也早。</p><p>史纲、毛中特、思修一定要一遍一遍的背，这直接关乎你政治选择题的得分，有的人就是能考40分，有的人就是20多分，而政治分析题的得分普遍差距不大，所以我认为政治想要考的稍微好一点选择题是要上40的。第一年政治考了44分，我觉得自己很大的原因就是在选择题上面。建议在十一月份之前重点刷一下选择题，包括各个考研政治老师出的刷题库、也包括历年政治考研真题，看真题是为了让自己感受一下真题的出题方法与角度，但是不必多看，因为政治题的时效性还是比较大的，每年都会有比较重要的方面，尤其是还有时事政治这一块的内容，一般都是考察当年发生的国内外重要事件。</p><p>11月份的肖八、12月份的肖四一定要认认真真、仔仔细细的做，有能力的可以背一背肖八分析题，时间实在不够的只背肖四也可以。各个考研政治老师确实每年12月都会押题，但是命中率其实并没有他们所说的那么高，什么连续多少年全部命中之类，自己动动脑子想一想也觉得不可能，擦点边就算命中是他们的惯用套路。背诵分析题的主要目的也并不是押题，虽然确实会押中一些，其次是防止你在考场上看到没有见过的题目，脑子里没有东西可写，所以你背的越多，你能写的也就越多。</p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>数学很重要！</p><p>数学是理工考生最重要的一门课程，一方面是因为涵盖内容多且难度较大，复习过程中需要大量题型练习，所以对数学的备考大致会占到你考研复习时间的40，对于数学的学习是贯穿从开始备考直到考试前一天晚上，一刻不能放松。18年因为数学难度较高，使得数学成了国家线前的拦路虎。而到19年数学难度降低，数学则又成了考高分的关键。总之，得数学者得天下放在这里十分恰当。</p><p>数学复习的开始时间越早越好，通常是3月份开始一轮复习，尽快并且保证质量的看视频完成基础课（5月之前），看视频的同时一定要跟着做笔记，并且一定要复习笔记，如果只是做完笔记扔在那，一点用处没有，每天都要及时复习，不然内容多，当你复习完概率论，高数部分可能已经忘的差不多了。在看视频的同时，应及时复习例题，并且做一些难度适中的练习题，可以帮助更好的理解概念。做题过程中卡壳，也不要过于焦虑，因为还没有全部复习完，还未形成一个完整的知识结构，难免会出现有部分内容自己没有复习到，一定要坚持做下去，但是题量不宜过大，还是以复习知识为主。</p><p>5月份开始第二轮强化课，学习方式也是看视频，强化课学习的速度应该要比基础课稍快。在强化课复习中对于生疏的内容要适当多做一些题巩固，形成做题的条件反射。强化课的复习应该在六月以前完成，题目可以选择你买的复习辅导书上的课后例题，张宇、汤家凤都可以。</p><p>6月，此时应该已经形成较为全面的知识结构，现在的主要目标是通过大量做题将各个知识点串联起来。许多考研老师都有出自己的题集，1000题、660题之类的，买一本然后坚持每天刷题，刚开始可能会有点难，但是经过大量的练习后，你会有种“看到…想到…”的感觉。张宇的1000题A部分为基础部分，B稍难，C难度最高，大多数人完成AB是没问题的，C部分难度较高，可以根据自己的情况选做。660我没有做过，但是思路也是如此。</p><p>8月，开始刷真题，数学的真题是最重要的，有些人甚至可以完成三刷，然后取得一个很好的分数。真题不要拘泥于做完对答案就完事了，一定要认真分析步骤与解题思路，整理错题本，这对冲刺阶段复习帮助很大。</p><p>大概到了11月底12月初，各个机构都开始出冲刺课程，通常课时都很短，可以速刷。这段时间就不要再做新题了，复习自己的错题本，看一遍做一遍，一定不要停止做题，虽然很玄学，但是做题的手感和思路确实是存在的。</p><p>复习数学将会花费你的绝大部分的精力，并且一定不要放弃，有时候就是那么一道题，就可以打开你的所有思路，所以一定要坚持。</p><h3 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h3><p>计算机专业课无非是数据结构、计算机组成原理、操作系统、和计算机网络，大多数学校会从中抽出一门或者多门作为专业课考试科目，像山东大学的专业课为909数据结构，而浙江大学的专业课是408综合，考察四门科目。</p><p>专业课参考书我推荐王道，不管你是复习408还是其中的任何一门，我相信只要搞懂王道，然后补充一些学校考试大纲中的特色内容，应付专业课考试大概是没问题的。专业课的复习不宜过早也不可过晚，具体时间应该考虑自身情况，如本科期间的学习状况。我可以给你一个参考，我专业课考一门数据结构，从八月份开始复习，然后考了142分。但是一定不要轻视专业课的复习，尤其是408考生。</p><p>专业课一定要去找目标院校的往年真题做一做，在考试大纲不变化的情况下，真题出现过的题型一定要弄懂弄会。真题可以从往届学长学姐那找到或者买到。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>说实话，考研真的没有什么所谓的诀窍、秘籍，那些400+的大佬无非是付出了你没有过的努力。但是如果说考研最重要的是什么，我想是“坚持”。无论复习的怎么样，无论复习有多么的累，我希望你一定要坚持到最后一刻，因为直到那一刻你才会知道自己有多么的牛逼。</p><p>想到了自己从年初的时候开始，一路披荆斩棘、丢盔卸甲的走到现在，虽然满手满脚的泥泞，但心里的骄傲和愿景一个都没有丢，总觉得这些话应该讲给你听。因为，我答应了十八岁的自己不会变。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文摘：成人呈现期研究</title>
      <link href="/2019/04/20/Shortcut2019-4-20/"/>
      <url>/2019/04/20/Shortcut2019-4-20/</url>
      
        <content type="html"><![CDATA[<p><strong>文章来自<a href="https://me.csdn.net/sxhelijian">迂者贺立坚</a>老师的公众号。</strong></p><p>一代看不惯一代的连续剧持续上演，只是越是从事为大学生解迷茫的工作，越是感觉到了新一代的可爱，也深感他们这一代物质生活相对优越中的不易。读赵炬明老师的文章，初次接触“成人呈现期”，顿感眼前一亮，分享给年轻的和不再年轻的朋友们。    </p><p>(本文摘自：赵炬明. 打开黑箱:学习与发展的科学基础(上)——美国“以学生为中心”的本科教学改革研究之二[J]. 高等工程教育研究, 2017(03):37-58.)</p><span id="more"></span><p>&emsp;&emsp;除理性和理性能力发展外，青春期大学生发展的第二个基本任务是人的社会化发展。在这个发展中，年轻人逐渐从被保护者变成能独立生活的成人。在这个时期年轻人究竟是怎样发展变化的呢？对此做出了开创性研究的是克拉克大学心理学教授阿奈特。他提出了“成人呈现期”（emerging adulthood, EA）的概念。今天，EA研究已经成为发展心理学、社会学、脑科学、教育、职业发展等多学科合作的专门研究领域。</p><p>&emsp;&emsp;阿奈特说，今天如果你问18~24岁的年轻人，你们是青少年吗？他们会说不是；如果你再问，那你们是成人吗？他们也会犹豫一下说，也不是。那他们是什么人呢？阿纳特认为，他们属于一个特殊发展期：成人呈现期，他们应该被称为“呈现期成人”（emerging adults）。也就是说，在传统的青少年研究和成人研究之间，阿纳特发现了一个新的发展阶段，并认为这个阶段有其特有的发展特点和问题，需要做专门研究。</p><p>&emsp;&emsp; “今天”这个词很重要。也就是说，这是一个当代问题，50年前这个阶段并不存在。阿奈特说，比较50年前和现在的年轻人，会发现他们之间有很大不同。如果把稳定工作和婚姻作为成人标志会发现，1950年代很少有人上大学，中学毕业后就工作，然后结婚生子，因此男性工作年龄为18岁左右，平均结婚年龄为22岁。当时女性多为家庭妇女，中学毕业后立刻结婚，平均结婚年龄为20岁。但今天的年轻人要上大学甚至研究生院，一般要多次换工作之后才逐渐稳定下来。结果是稳定工作和结婚年龄都普遍延迟。今天平均结婚年龄男性为28岁，女性26岁，而且还有延长的趋势。这个新出现的延迟期就是所谓“EA期”。</p><p>&emsp;&emsp;EA期的人有五个特点：①自我认同。探索并回答“我是谁”，这是EA期的最大挑战。他们不仅要思索，还要通过尝试各种新经验来发现与认识自己的特点、爱好、梦想、能力、潜力等，并根据回答来规划自己的成年生活。一旦自我认同问题有了答案，发展就进入平稳的成人期。②不确定性。为了回答自我认同问题，EA期的人非常不稳定，充满变化。他们对自己和周围世界会产生各种不同想法，并不停探索和尝试。结果这些人的生活像过山车，不停上下起伏，左右旋转。为了刺激这种生命探索，大脑提高了荷尔蒙分泌水平，使身体、思维、情绪等都处于巅峰状态。这是一个“糖比糖还甜，痛比痛还痛”的年龄。在这个时期形成的记忆不仅充满细节，而且充满情感！③可能与乐观。EA期的人思维灵活多变，愿意尝试各种可能性，愿意通过亲身经历来获取对自己和外部世界的认知。EA期的另一个特点是乐观。相信“天生我才必有用，千金散尽还复来”。无论对自己的能力、机会和未来，都估计乐观。调查表明，83%的人相信“万事皆有可能”，73%的人相信自己会好于父辈，多数人认为自己高于平均水平。尽管这些乐观未必有根据，但正是这些乐观预期推动了他们发展。④专注自我。由于忙于认识自我、认识社会、规划未来，巨大的成长压力使他们几乎把全部注意力都集中到自我，无暇他顾。但专注自我不是自私。前者只是“没注意到别人”，后者是“只关心自己”。也就是说，一旦他们忙完了，也会和我们一样，变成富于同情心的利他主义者。用阿奈特的话说，他们“专注自我但不自私”。⑤中间感（feeling in-between）。EA期的人普遍有一种两头不靠的中间感。这是他们的特点，也是他们变化的不稳定状态的原因。他们是孩子，但正变成成人；他们还得依赖父母，但想摆脱父母；他们不熟悉社会，但想进入社会，如此等等。这种中间感会伴随始终。一旦稳定下来，中间感消失，他们就变成了成人。</p><p>&emsp;&emsp;显然，阿纳特是以“自我认同”为轴心来解释其他四个特点。这些特点适合描述大多数美国大学生，也适合于描述大多数中国大学生。因此在这个阶段给他们最好的帮助是，为他们提供各种脚手架，让他们专心完成发展任务。而不是用成人标准来批评他们，例如把他们忙于“专注自我”看成是“精致的利己主义”。</p><p>&emsp;&emsp;为什么会出现这个延迟的EA发展期呢？阿奈特认为有四个原因：一是社会经济发展。1950年代是工业经济，今天是知识经济；那时需要的是肌肉，今天需要的是大脑。社会需要更多受过大学教育的人，因此需要付出更多时间来培养新一代劳动者。二是避孕药。避孕药使性行为和婚姻分离。前者是生理需求，后者是社会责任。统计显示，首次性行为年龄下降，但结婚年龄却不断上升。三是女性运动。1950年代前女性很少参加工作，给女性的工作机会也很少。但今天女性的社会环境大不相同。她们有更多选择，可以自己规划未来。女性自主意识觉醒最好的证据是当代大学女生比例已经超过男生。四是青年运动（youth movement）。今天青年人认识到，他们可以不必遵循前辈经验和传统，不必匆忙跳入成人生活，可以花更多时间来探索未来。“不愿长大”就是这种倾向的生动反映。由于这些因素，当代人的发展出现了EA期。阿奈特把这个发展期定为18-25岁，这和大脑发育年龄一致。</p><p>&emsp;&emsp;阿奈特认为，EA期出现是社会发展的必然结果，且对个人对社会都是好事。由于EA期，社会会有更高素质的劳动者，孩子会有更成熟的父母，经过较长成长期的人的生活会更幸福，整个社会会有更高素质的公民。因此，EA期是社会进步的表现。</p><p>&emsp;&emsp;我认为这个理论给这一时期年轻人的发展一个更加清晰的定位，填补了传统青少年研究和成人研究之间的空白，丰富了对这个特殊阶段的人的发展的认识。尤其是对这个时期人的特点及其发展的研究，可以使我们可以更好地理解当代大学生，尤其是他们在发展方面所面临的巨大压力和艰难曲折的发展历程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 摘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔：谈谈996</title>
      <link href="/2019/04/18/Dairy_2019_4_18/"/>
      <url>/2019/04/18/Dairy_2019_4_18/</url>
      
        <content type="html"><![CDATA[<br><p>&emsp;&emsp;<strong>996的工作制最近被搬上台面来讨论，对于996我有一些想说的并且只对少数人说的话。</strong></p><br/><span id="more"></span><p>&emsp;&emsp;“996工作制”即早晨9点钟上班、晚上9点钟下班、一周上6天的工作制度。这种制度可以说是很大的在透支员工的生活时间，转而去投入更多时间在工作上。从马克思主义政治经济学的角度来看，公司通过绝对延长工作时间，从而延长剩余劳动时间，来达到提高剩余价值产量的目的，即为绝对剩余价值。</p><p>&emsp;&emsp;<strong>996工作制为何会出现？</strong>996的工作制被诸多互联网大佬所推崇，不是没有道理的，在短时间内软件工程的工作效率无法得到大幅度提升，如IBM大型机之父Fred · Brooks发表的著名软件工程论文《<em>No Silver Bullet—Essence and Accidents of Software Engineering</em>》提出：</p><blockquote><p>没有任何一种单纯的技术或管理上的进步，能够独立地承诺在十年内大幅度地提高生产率、可靠性和简洁性。</p></blockquote><p>&emsp;&emsp;工作效率无法短时大幅度提高，提高剩余价值产出的主要方式必然并且会长期处于绝对延长工作时长的方式，这是造成如今诸多公司推崇“996工作制”的背后原因。</p><p>&emsp;&emsp;<strong>996工作制为何被口诛笔伐？</strong>从一定程度上这个问题属于送分题，谁会喜欢一天十二小时一周六天的工作制度？更何况高考、考研也不过是8 12 7罢了。可以看出我们这人生的前几十年是如何的不轻松，当我们在对996口诛笔伐时，是不是想到了自己寒窗苦读的日子？是不是迫切的想要为现在以及过去的自己发声？</p><p>&emsp;&emsp;从现实的角度来看，“996工作制度”很大程度上限制了个人的生活空间，员工作为这个社会的一份子，拥有自己的社会关系，上有父母、下有妻儿，这些关系也都是需要时间去维系的。“996工作制度”在这一点很大程度上摸到了人们的底线，如果有统计的话，我相信为大多数996呐喊的人，一方面是公众营销号，另一方面则是已经成家的中年员工。毕竟不是所有人都是崇高的理想主义者，工作的目的终究还是为了生活，当生活被搁置一旁不予理会，工作的目的又是什么？人的本质毕竟是<strong>一切社会关系的总和</strong>。</p><p>&emsp;&emsp;<strong>996工作制是否有积极的一面？</strong>我身边不乏刚刚走出校园投入社会的年轻大学生，在996工作制度在微博纷纷扬扬时，这个新生社会力量却很少对其批判，这是为什么？从赵炬明老师对“成人呈现期”的研究中，我觉得可以解释这个问题。</p><blockquote><p>EA（Emerging Adults）期的人有五个特点：</p><p>①自我认同。探索并回答“我是谁”，这是EA期的最大挑战。他们不仅要思索，还要通过尝试各种新经验来发现与认识自己的特点、爱好、梦想、能力、潜力等，并根据回答来规划自己的成年生活。一旦自我认同问题有了答案，发展就进入平稳的成人期。</p><p>②不确定性。为了回答自我认同问题，EA期的人非常不稳定，充满变化。他们对自己和周围世界会产生各种不同想法，并不停探索和尝试。结果这些人的生活像过山车，不停上下起伏，左右旋转。为了刺激这种生命探索，大脑提高了荷尔蒙分泌水平，使身体、思维、情绪等都处于巅峰状态。这是一个“糖比糖还甜，痛比痛还痛”的年龄。在这个时期形成的记忆不仅充满细节，而且充满情感！</p><p>③可能与乐观。EA期的人思维灵活多变，愿意尝试各种可能性，愿意通过亲身经历来获取对自己和外部世界的认知。EA期的另一个特点是乐观。相信“天生我才必有用，千金散尽还复来”。无论对自己的能力、机会和未来，都估计乐观。调查表明，83%的人相信“万事皆有可能”，73%的人相信自己会好于父辈，多数人认为自己高于平均水平。尽管这些乐观未必有根据，但正是这些乐观预期推动了他们发展。</p><p>④专注自我。由于忙于认识自我、认识社会、规划未来，巨大的成长压力使他们几乎把全部注意力都集中到自我，无暇他顾。但专注自我不是自私。前者只是“没注意到别人”，后者是“只关心自己”。也就是说，一旦他们忙完了，也会和我们一样，变成富于同情心的利他主义者。用阿奈特的话说，他们“专注自我但不自私”。</p><p>⑤中间感（feeling in-between）。EA期的人普遍有一种两头不靠的中间感。这是他们的特点，也是他们变化的不稳定状态的原因。他们是孩子，但正变成成人；他们还得依赖父母，但想摆脱父母；他们不熟悉社会，但想进入社会，如此等等。这种中间感会伴随始终。一旦稳定下来，中间感消失，他们就变成了成人。</p></blockquote><p>&emsp;&emsp;应届毕业生走出校园，迫切的追求社会认可，完成对自身的角色认定、追问。我是什么？我能为别人做什么？我的价值是什么？我可以学到什么？此时，“996工作制度”在一定程度上帮助他们快速的融入社会、融入到公司环境中去。我本科是Computer Science，从我大学四年的学习经历来说，我们所学到的知识的确是在工作中必不可少的一个环，但同时又与工作环境存在一定的脱节。当我第一年考研失利时，有过一段时间的求职经历，我看着各个公司在求职网站发布的Job Description，发现自己与公司要求存在严重的技术不匹配，我不知道这个公司招我进去让我做什么，而我又能做什么去匹配薪资。从这个角度，我认为“996工作制度”对于年轻人并不是一无是处。作为一块干涸的海绵，此时正需要吸收大量的水分去充实自己。</p><p>&emsp;&emsp;导师之前跟我聊*为公司每年都会招大量的应届生，但这些员工四年的留职率只有20%，我相信其中不乏无法适应高强度工作的人，但我也相信他们一定汲取了足够多的水分站在另一个地方释放自己的力量。</p><p>&emsp;&emsp;最重要的，这篇闲聊是我在23岁时说出的话，24岁的我对其不负任何责任。</p><p><img src="/2019/04/18/Dairy_2019_4_18/img1.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔：笑颜百景</title>
      <link href="/2019/04/11/Dairy_2019_4_11/"/>
      <url>/2019/04/11/Dairy_2019_4_11/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;这就像一场战斗，你手持柴刀在前面披荆斩棘，一路狂奔，后面是死神紧追不舍，跑得快就能奔到终点，跑得慢就被他一刀腰斩在路上，装进裹尸袋，擦干血迹，就像你从来没有存在过。</p><p>&emsp;&emsp;生活从来如此。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git版本控制及远程仓库的使用</title>
      <link href="/2019/04/08/GitHelpDoc/"/>
      <url>/2019/04/08/GitHelpDoc/</url>
      
        <content type="html"><![CDATA[<p>版本控制是我们工作中绕不过去一个坑。</p><span id="more"></span><h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><ul><li><h3 id="git-–version-emsp-查看Git版本"><a href="#git-–version-emsp-查看Git版本" class="headerlink" title="git –version &emsp;查看Git版本"></a>git –version &emsp;查看Git版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC&gt; git --version  </span><br><span class="line">git version 2.21.0.windows.1</span><br></pre></td></tr></table></figure></li></ul><br/><ul><li><h3 id="git-comnfig-–global-user-name-“GiottoLee”-emsp-配置全局用户名"><a href="#git-comnfig-–global-user-name-“GiottoLee”-emsp-配置全局用户名" class="headerlink" title="git comnfig –global user.name “GiottoLee” &emsp; 配置全局用户名"></a>git comnfig –global user.name “GiottoLee” &emsp; 配置全局用户名</h3></li><li><h3 id="git-comnfig-–global-user-email-“-120-x78-120-x40-111-x75-x74-108-x6f-111-107-46-99-111-x6d-“-emsp-配置全局用户名"><a href="#git-comnfig-–global-user-email-“-120-x78-120-x40-111-x75-x74-108-x6f-111-107-46-99-111-x6d-“-emsp-配置全局用户名" class="headerlink" title="git comnfig –global user.email “&#120;&#x78;&#120;&#x40;&#111;&#x75;&#x74;&#108;&#x6f;&#111;&#107;&#46;&#99;&#111;&#x6d;“ &emsp; 配置全局用户名"></a>git comnfig –global user.email “<a href="mailto:&#120;&#x78;&#120;&#x40;&#111;&#x75;&#x74;&#108;&#x6f;&#111;&#107;&#46;&#99;&#111;&#x6d;">&#120;&#x78;&#120;&#x40;&#111;&#x75;&#x74;&#108;&#x6f;&#111;&#107;&#46;&#99;&#111;&#x6d;</a>“ &emsp; 配置全局用户名</h3></li><li><h3 id="git-comfig-–list-emsp-查看当前所有项目"><a href="#git-comfig-–list-emsp-查看当前所有项目" class="headerlink" title="git comfig –list &emsp; 查看当前所有项目"></a>git comfig –list &emsp; 查看当前所有项目</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC&gt; git config --list  </span><br><span class="line">    core.symlinks=<span class="literal">false</span>  </span><br><span class="line">    core.autocrlf=<span class="literal">true</span>  </span><br><span class="line">    core.fscache=<span class="literal">true</span>  </span><br><span class="line">    color.diff=auto  </span><br><span class="line">    color.status=auto  </span><br><span class="line">    color.branch=auto  </span><br><span class="line">    color.interactive=<span class="literal">true</span>  </span><br><span class="line">    help.format=html  </span><br><span class="line">    rebase.autosquash=<span class="literal">true</span>  </span><br><span class="line">    http.sslbackend=openssl  </span><br><span class="line">    http.sslcainfo=F:/Git/mingw64/ssl/certs/  ca-bundle.crt  </span><br><span class="line">    credential.helper=manager  </span><br><span class="line">    user.name=GiottoLee  </span><br></pre></td></tr></table></figure><br/><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><ul><li><h3 id="git-init-emsp-初始化仓库"><a href="#git-init-emsp-初始化仓库" class="headerlink" title="git init &emsp; 初始化仓库"></a>git init &emsp; 初始化仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git init  </span><br><span class="line">Reinitialized existing Git repository <span class="keyword">in</span> G:/DOC/GitDoc/.git/</span><br></pre></td></tr></table></figure></li><li><h3 id="git-clone-连接-emsp-克隆仓库"><a href="#git-clone-连接-emsp-克隆仓库" class="headerlink" title="git clone [ 连接 ] &emsp; 克隆仓库"></a>git clone [ <em>连接</em> ] &emsp; 克隆仓库</h3></li></ul><br/><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><ul><li><h3 id="git-status-emsp-查看状态"><a href="#git-status-emsp-查看状态" class="headerlink" title="git status &emsp; 查看状态"></a>git status &emsp; 查看状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git status  </span><br><span class="line">On branch master  </span><br><span class="line">No commits yet  </span><br><span class="line">Untracked files:  </span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)  </span><br><span class="line">        <span class="string">&quot;Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span>  </span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)  </span><br></pre></td></tr></table></figure></li><li><h3 id="git-add-emsp-将所有修改添加至暂存区"><a href="#git-add-emsp-将所有修改添加至暂存区" class="headerlink" title="git add . &emsp;将所有修改添加至暂存区"></a>git add . &emsp;将所有修改添加至暂存区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git add .</span><br></pre></td></tr></table></figure></li><li><h3 id="git-add-File-name-emsp-将指定文件添加至暂存区"><a href="#git-add-File-name-emsp-将指定文件添加至暂存区" class="headerlink" title="git add [ File name ] &emsp;将指定文件添加至暂存区"></a>git add [ <em>File name</em> ] &emsp;将指定文件添加至暂存区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git add HowToUseGit.md</span><br></pre></td></tr></table></figure></li><li><h3 id="git-commit-m-“-备注-“-emsp-提交版本"><a href="#git-commit-m-“-备注-“-emsp-提交版本" class="headerlink" title="git commit -m “ 备注 “ &emsp; 提交版本"></a>git commit -m “ <em>备注</em> “ &emsp; 提交版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git commit -m <span class="string">&quot;Contribute how to use Git tools.&quot;</span></span><br><span class="line">[master (root-commit) 3ccc1ff] Contribute how to use Git tools.</span><br><span class="line"> 1 file changed, 55 insertions(+)</span><br><span class="line"> create mode 100644 <span class="string">&quot;Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span></span><br></pre></td></tr></table></figure></li><li><h3 id="git-log-emsp-查看历史版本"><a href="#git-log-emsp-查看历史版本" class="headerlink" title="git log &emsp; 查看历史版本"></a>git log &emsp; 查看历史版本</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git <span class="built_in">log</span></span><br><span class="line">commit 3ccc1ff91f3e2a6f9ed5908f414717893d9e3928 (HEAD -&gt; master)</span><br><span class="line">Author: GiottoLee &lt;giottolee@outlook.com&gt;</span><br><span class="line">Date:   Sun Apr 7 21:17:44 2019 +0800</span><br><span class="line"></span><br><span class="line">    Contribute how to use Git tools.</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-log-p-emsp-查看历史版本附加详细信息"><a href="#git-log-p-emsp-查看历史版本附加详细信息" class="headerlink" title="git log -p &emsp; 查看历史版本附加详细信息"></a>git log -p &emsp; 查看历史版本附加详细信息</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git <span class="built_in">log</span> -p</span><br><span class="line">commit 3ccc1ff91f3e2a6f9ed5908f414717893d9e3928 (HEAD -&gt; master)</span><br><span class="line">Author: GiottoLee &lt;giottolee@outlook.com&gt;</span><br><span class="line">Date:   Sun Apr 7 21:17:44 2019 +0800</span><br><span class="line"></span><br><span class="line">    Contribute how to use Git tools.</span><br><span class="line"></span><br><span class="line">diff --git <span class="string">&quot;a/Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span> <span class="string">&quot;b/Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span></span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..dc41cd9</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ <span class="string">&quot;b/Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span></span><br><span class="line">@@ -0,0 +1,55 @@</span><br><span class="line">+<span class="comment"># Git使用教程</span></span><br><span class="line">+</span><br><span class="line">+<span class="comment">## **配置Git**</span></span><br><span class="line">+</span><br><span class="line">+- <span class="comment">### git --version &amp;emsp;查看Git版本</span></span><br><span class="line">+&gt; PS G:\DOC&gt; git --version  </span><br><span class="line">+git version 2.21.0.windows.1</span><br><span class="line">+</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">+</span><br><span class="line">+- <span class="comment">### git add . &amp;emsp;将所有修改添加至暂存区</span></span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-status-emsp-查看当前状态"><a href="#git-status-emsp-查看当前状态" class="headerlink" title="git status &emsp; 查看当前状态"></a>git status &emsp; 查看当前状态</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">        modified:   <span class="string">&quot;Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span></span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-checkout-版本号-emsp-穿越到指定的历史节点"><a href="#git-checkout-版本号-emsp-穿越到指定的历史节点" class="headerlink" title="git checkout 版本号 &emsp; 穿越到指定的历史节点"></a>git checkout <em>版本号</em> &emsp; 穿越到指定的历史节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git checkout f921330</span><br></pre></td></tr></table></figure></li><li><h3 id="git-checkout-emsp-回到上一个版本节点"><a href="#git-checkout-emsp-回到上一个版本节点" class="headerlink" title="git checkout - &emsp; 回到上一个版本节点"></a>git checkout - &emsp; 回到上一个版本节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git checkout -</span><br></pre></td></tr></table></figure></li></ul><br/><h2 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h2><ol><li>Modified &emsp; 修改状态</li><li>Staged &emsp; 暂存状态</li><li>Committed &emsp; 提交状态</li></ol><br/><h2 id="标签Tag"><a href="#标签Tag" class="headerlink" title="标签Tag"></a>标签Tag</h2><ul><li><h3 id="git-tag-emsp-查看标签"><a href="#git-tag-emsp-查看标签" class="headerlink" title="git tag &emsp; 查看标签"></a>git tag &emsp; 查看标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git tag</span><br><span class="line">NotFinished</span><br></pre></td></tr></table></figure></li><li><h3 id="git-tag-a-标签名-m-“备注“-emsp-添加标签"><a href="#git-tag-a-标签名-m-“备注“-emsp-添加标签" class="headerlink" title="git tag -a [ 标签名 ] -m “备注“ &emsp; 添加标签"></a>git tag -a [ <em>标签名</em> ] -m “<em>备注</em>“ &emsp; 添加标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git tag -a NotFinished -m <span class="string">&quot;New content added&quot;</span></span><br></pre></td></tr></table></figure></li><li><h3 id="git-tag-a-标签名-m-“备注“-版本号-emsp-添加标签"><a href="#git-tag-a-标签名-m-“备注“-版本号-emsp-添加标签" class="headerlink" title="git tag -a [ 标签名 ] -m “备注“ [ 版本号 ] &emsp; 添加标签"></a>git tag -a [ <em>标签名</em> ] -m “<em>备注</em>“ [ <em>版本号</em> ] &emsp; 添加标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git tag -a NotFinished -m <span class="string">&quot;New content added&quot;</span> f2165</span><br></pre></td></tr></table></figure></li><li><h3 id="git-show-标签名-emsp-查看某标签的详细信息"><a href="#git-show-标签名-emsp-查看某标签的详细信息" class="headerlink" title="git show [ 标签名 ] &emsp; 查看某标签的详细信息"></a>git show [ <em>标签名</em> ] &emsp; 查看某标签的详细信息</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git show NotFinished</span><br><span class="line">tag NotFinished</span><br><span class="line">Tagger: GiottoLee &lt;giottolee@outlook.com&gt;</span><br><span class="line">Date:   Sun Apr 7 21:54:26 2019 +0800</span><br><span class="line"></span><br><span class="line">New content added</span><br><span class="line"></span><br><span class="line">commit 0c308273691037c07875a3e1239670e94d361722 (HEAD -&gt; master, tag: NotFinished)</span><br><span class="line">Author: GiottoLee &lt;giottolee@outlook.com&gt;</span><br><span class="line">Date:   Sun Apr 7 21:53:10 2019 +0800</span><br><span class="line"></span><br><span class="line">    New content added.</span><br><span class="line"></span><br><span class="line">diff --git <span class="string">&quot;a/Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span> <span class="string">&quot;b/Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span></span><br><span class="line">index dc41cd9..5f97e4b 100644</span><br><span class="line">--- <span class="string">&quot;a/Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span></span><br><span class="line">+++ <span class="string">&quot;b/Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span></span><br><span class="line">@@ -3,8 +3,10 @@</span><br></pre></td></tr></table></figure><h2 id="配置Git-1"><a href="#配置Git-1" class="headerlink" title="配置Git"></a><strong>配置Git</strong></h2><ul><li><h3 id="git-–version-emsp-查看Git版本-1"><a href="#git-–version-emsp-查看Git版本-1" class="headerlink" title="git –version &emsp;查看Git版本"></a>git –version &emsp;查看Git版本</h3></li><li><blockquote><p>PS G:\DOC&gt; git –version  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC&gt; git --version  </span><br><span class="line"> git version 2.21.0.windows.1</span><br></pre></td></tr></table></figure><br/></li></ul><ul><li><h3 id="git-comfig-–list-emsp-查看当前所有项目-1"><a href="#git-comfig-–list-emsp-查看当前所有项目-1" class="headerlink" title="git comfig –list &emsp; 查看当前所有项目"></a>git comfig –list &emsp; 查看当前所有项目</h3></li></ul><p>-&gt; PS G:\DOC&gt; git config –list  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC&gt; git config --list  </span><br><span class="line">     core.symlinks=<span class="literal">false</span></span><br><span class="line">     core.autocrlf=<span class="literal">true</span></span><br><span class="line">     core.fscache=<span class="literal">true</span></span><br><span class="line">@@ -28,14 +31,17 @@ git version 2.21.0.windows.1</span><br><span class="line">     http.sslcainfo=F:/Git/mingw64/ssl/certs/  ca-bundle.crt</span><br><span class="line">     credential.helper=manager</span><br><span class="line">     user.name=GiottoLee</span><br></pre></td></tr></table></figure> <br/><h2 id="创建仓库-1"><a href="#创建仓库-1" class="headerlink" title="创建仓库"></a><strong>创建仓库</strong></h2><ul><li><h3 id="git-init-emsp-初始化仓库-1"><a href="#git-init-emsp-初始化仓库-1" class="headerlink" title="git init &emsp; 初始化仓库"></a>git init &emsp; 初始化仓库</h3></li><li><blockquote><p>PS G:\DOC\GitDoc&gt; git init  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+PS G:\DOC\GitDoc&gt; git init  </span><br><span class="line"> Reinitialized existing Git repository <span class="keyword">in</span> G:/DOC/GitDoc/.git/</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-clone-连接-amp-emsp；-克隆仓库"><a href="#git-clone-连接-amp-emsp；-克隆仓库" class="headerlink" title="git clone [ 连接 ] &amp;emsp； 克隆仓库"></a>git clone [ <em>连接</em> ] &amp;emsp； 克隆仓库</h3></li></ul></li></ul><h2 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a><strong>基本用法</strong></h2><ul><li><h3 id="git-status-emsp-查看状态-1"><a href="#git-status-emsp-查看状态-1" class="headerlink" title="git status &emsp; 查看状态"></a>git status &emsp; 查看状态</h3></li><li><blockquote><p>PS G:\DOC\GitDoc&gt; git status  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+PS G:\DOC\GitDoc&gt; git status  </span><br><span class="line"> On branch master</span><br><span class="line"> No commits yet</span><br><span class="line"> Untracked files:</span><br><span class="line">   (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">         <span class="string">&quot;Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span></span><br><span class="line"> nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure></li></ul><p>– ### git add . &emsp;将所有修改添加至暂存区</p><ul><li><h3 id="git-add-emsp-将所有修改添加至暂存区-1"><a href="#git-add-emsp-将所有修改添加至暂存区-1" class="headerlink" title="git add . &emsp;将所有修改添加至暂存区"></a>git add . &emsp;将所有修改添加至暂存区</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+PS G:\DOC\GitDoc&gt; git add .</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-add-File-name-emsp-将指定文件添加至暂存区-1"><a href="#git-add-File-name-emsp-将指定文件添加至暂存区-1" class="headerlink" title="git add [File name] &emsp;将指定文件添加至暂存区"></a>git add [<em>File name</em>] &emsp;将指定文件添加至暂存区</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+PS G:\DOC\GitDoc&gt; git add HowToUseGit.md</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-commit-m-“备注“-emsp-提交版本"><a href="#git-commit-m-“备注“-emsp-提交版本" class="headerlink" title="git commit -m “备注“ &emsp; 提交版本"></a>git commit -m “<em>备注</em>“ &emsp; 提交版本</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+PS G:\DOC\GitDoc&gt; git commit -m <span class="string">&quot;Contribute how to use Git tools.&quot;</span></span><br><span class="line">+[master (root-commit) 3ccc1ff] Contribute how to use Git tools.</span><br><span class="line">+ 1 file changed, 55 insertions(+)</span><br><span class="line">+ create mode 100644 <span class="string">&quot;Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span></span><br></pre></td></tr></table></figure><ul><li><h3 id="git-log-emsp-查看历史版本-1"><a href="#git-log-emsp-查看历史版本-1" class="headerlink" title="git log &emsp; 查看历史版本"></a>git log &emsp; 查看历史版本</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git <span class="built_in">log</span></span><br><span class="line">commit 3ccc1ff91f3e2a6f9ed5908f414717893d9e3928 (HEAD -&gt; master)</span><br><span class="line">Author: GiottoLee &lt;giottolee@outlook.com&gt;</span><br><span class="line">Date:   Sun Apr 7 21:17:44 2019 +0800</span><br><span class="line"></span><br><span class="line">   Contribute how to use Git tools.</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-log-p-emsp-查看历史版本附加详细信息-1"><a href="#git-log-p-emsp-查看历史版本附加详细信息-1" class="headerlink" title="git log -p &emsp; 查看历史版本附加详细信息"></a>git log -p &emsp; 查看历史版本附加详细信息</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git <span class="built_in">log</span> -p</span><br><span class="line">commit 3ccc1ff91f3e2a6f9ed5908f414717893d9e3928 (HEAD -&gt; master)</span><br><span class="line">Author: GiottoLee &lt;giottolee@outlook.com&gt;</span><br><span class="line">Date:   Sun Apr 7 21:17:44 2019 +0800</span><br><span class="line"></span><br><span class="line">   Contribute how to use Git tools.</span><br><span class="line"></span><br><span class="line">diff --git <span class="string">&quot;a/Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span> <span class="string">&quot;b/Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span></span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..dc41cd9</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ <span class="string">&quot;b/Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span></span><br><span class="line">@@ -0,0 +1,55 @@</span><br><span class="line"><span class="comment"># Git使用教程</span></span><br><span class="line">+</span><br><span class="line"><span class="comment">## **配置Git**</span></span><br><span class="line">+</span><br><span class="line">+- <span class="comment">### git --version &amp;emsp;查看Git版本</span></span><br><span class="line">+&gt; PS G:\DOC&gt; git --version  </span><br><span class="line">+git version 2.21.0.windows.1</span><br><span class="line">+</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">+</span><br><span class="line">+- <span class="comment">### git add . &amp;emsp;将所有修改添加至暂存区</span></span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-status-emsp-查看当前状态-1"><a href="#git-status-emsp-查看当前状态-1" class="headerlink" title="git status &emsp; 查看当前状态"></a>git status &emsp; 查看当前状态</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line"> (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line"> (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">       modified:   <span class="string">&quot;Git\344\275\277\347\224\250\346\225\231\347\250\213.md&quot;</span></span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-checkout-版本号-emsp-穿越到指定的历史节点-1"><a href="#git-checkout-版本号-emsp-穿越到指定的历史节点-1" class="headerlink" title="git checkout 版本号 &emsp; 穿越到指定的历史节点"></a>git checkout <em>版本号</em> &emsp; 穿越到指定的历史节点</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git checkout f921330</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-checkout-emsp-回到上一个版本节点-1"><a href="#git-checkout-emsp-回到上一个版本节点-1" class="headerlink" title="git checkout - &emsp; 回到上一个版本节点"></a>git checkout - &emsp; 回到上一个版本节点</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git checkout -</span><br></pre></td></tr></table></figure><br/><h2 id="三种状态-1"><a href="#三种状态-1" class="headerlink" title="三种状态"></a><strong>三种状态</strong></h2><ol><li>Modified &amp;emsp； 修改状态</li><li>Staged &emsp; 暂存状态</li><li>Committed &emsp; 提交状态</li></ol><br/><h2 id="标签Tag-1"><a href="#标签Tag-1" class="headerlink" title="标签Tag"></a><strong>标签Tag</strong></h2><ul><li><h3 id="git-tag-a-标签名-m-“备注“"><a href="#git-tag-a-标签名-m-“备注“" class="headerlink" title="git tag -a [标签名] -m “备注“"></a>git tag -a [<em>标签名</em>] -m “<em>备注</em>“</h3></li><li><h3 id="git-checkout-标签名-emsp-回退到该标签的版本"><a href="#git-checkout-标签名-emsp-回退到该标签的版本" class="headerlink" title="git checkout [ 标签名 ] &emsp; 回退到该标签的版本"></a>git checkout [ <em>标签名</em> ] &emsp; 回退到该标签的版本</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt;git checkout NotFinished</span><br></pre></td></tr></table></figure><br/><h2 id="分支Branch"><a href="#分支Branch" class="headerlink" title="分支Branch"></a>分支Branch</h2><ul><li><h3 id="git-branch-分支名-emsp-创建分支"><a href="#git-branch-分支名-emsp-创建分支" class="headerlink" title="git branch [ 分支名 ] &emsp; 创建分支"></a>git branch [ <em>分支名</em> ] &emsp; 创建分支</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt;git branch SubLine</span><br><span class="line">Switched to branch <span class="string">&#x27;SubLine&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><h3 id="git-checkout-b-分支名-emsp-创建并切换至分支"><a href="#git-checkout-b-分支名-emsp-创建并切换至分支" class="headerlink" title="git checkout -b [ 分支名 ] &emsp; 创建并切换至分支"></a>git checkout -b [ <em>分支名</em> ] &emsp; 创建并切换至分支</h3></li><li><h3 id="git-checkout-master-emsp-回到默认分支"><a href="#git-checkout-master-emsp-回到默认分支" class="headerlink" title="git checkout master &emsp; 回到默认分支"></a>git checkout master &emsp; 回到默认分支</h3></li><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt;git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure></li><li><h3 id="git-log-–all-–graph-emsp-图示全部历史纪录"><a href="#git-log-–all-–graph-emsp-图示全部历史纪录" class="headerlink" title="git log –all –graph &emsp; 图示全部历史纪录"></a>git log –all –graph &emsp; 图示全部历史纪录</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\<span class="built_in">test</span>&gt; git <span class="built_in">log</span> --all --graph</span><br><span class="line">* commit 98e9c52b82abd46e83ed7c4d7433520b128e6edb (HEAD)</span><br><span class="line">| Author: GiottoLee &lt;giottolee@outlook.com&gt;</span><br><span class="line">| Date:   Sun Apr 7 22:44:57 2019 +0800</span><br><span class="line">|</span><br><span class="line">|     4</span><br><span class="line">|</span><br><span class="line">| * commit 0e5fb98813a701a105e8d59b56acd23abea93337 (master)</span><br><span class="line">|/  Author: GiottoLee &lt;giottolee@outlook.com&gt;</span><br><span class="line">|   Date:   Sun Apr 7 22:43:13 2019 +0800</span><br><span class="line">|</span><br><span class="line">|       3</span><br><span class="line">|</span><br><span class="line">* commit 9fcf68107bff21f89e61b06962ba93f3ec794129 (subline)</span><br><span class="line">| Author: GiottoLee &lt;giottolee@outlook.com&gt;</span><br><span class="line">| Date:   Sun Apr 7 22:43:03 2019 +0800</span><br><span class="line">|</span><br><span class="line">|     2</span><br><span class="line">|</span><br><span class="line">* commit bdcedd53fe633d870e8c2b708bf3703ae647f7de</span><br><span class="line">  Author: GiottoLee &lt;giottolee@outlook.com&gt;</span><br><span class="line">  Date:   Sun Apr 7 22:42:43 2019 +0800</span><br><span class="line"></span><br><span class="line">      First commitPS </span><br></pre></td></tr></table></figure><br/><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><ul><li><h3 id="git-merge-分支名-emsp-合并分支到当前分支"><a href="#git-merge-分支名-emsp-合并分支到当前分支" class="headerlink" title="git merge [ 分支名 ] &emsp; 合并分支到当前分支"></a>git merge [ <em>分支名</em> ] &emsp; 合并分支到当前分支</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt;git merge SubLine</span><br><span class="line">~~~</span><br><span class="line">~~~</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">//****************冲突部分********************</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="string">HEAD </span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">=======</span></span><br><span class="line"><span class="string">fixed</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&gt;&gt;&gt;&gt; subline</span></span><br><span class="line"><span class="string">//********************************************</span></span><br></pre></td></tr></table></figure><br/><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ul><li><h3 id="git-remote-add-远程名称-远程地址-emsp-设置远程仓库"><a href="#git-remote-add-远程名称-远程地址-emsp-设置远程仓库" class="headerlink" title="git remote add [ 远程名称 ] [ 远程地址 ] &emsp; 设置远程仓库"></a>git remote add [ <em>远程名称</em> ] [ <em>远程地址</em> ] &emsp; 设置远程仓库</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git remote add GitHelpDoc git@github.com:G/GitHelpDoc.git</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-remote-emsp-列出所有远程仓库"><a href="#git-remote-emsp-列出所有远程仓库" class="headerlink" title="git remote &emsp; 列出所有远程仓库"></a>git remote &emsp; 列出所有远程仓库</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git remote</span><br><span class="line">GitHelpDoc</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-push-u-远程名称-分支名-emsp-上传代码"><a href="#git-push-u-远程名称-分支名-emsp-上传代码" class="headerlink" title="git push -u [ 远程名称 ] [ 分支名 ] &emsp; 上传代码"></a>git push -u [ <em>远程名称</em> ] [ <em>分支名</em> ] &emsp; 上传代码</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git push -u GitHelpDoc master</span><br><span class="line">Warning: Permanently added the RSA host key <span class="keyword">for</span> IP address <span class="string">&#x27;52.74.223.119&#x27;</span> to the list of known hosts.</span><br><span class="line">Enumerating objects: 6, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (6/6), 1.97 KiB | 404.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 6 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1/1), <span class="keyword">done</span>.</span><br><span class="line">To github.com:GiottoLee/GitHelpDoc.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch <span class="string">&#x27;master&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;master&#x27;</span> from <span class="string">&#x27;GitHelpDoc&#x27;</span>.</span><br><span class="line">PS G:\DOC\GitDoc&gt;</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-clone-仓库地址-emsp-克隆远程仓库"><a href="#git-clone-仓库地址-emsp-克隆远程仓库" class="headerlink" title="git clone [ 仓库地址 ] &emsp; 克隆远程仓库"></a>git clone [ <em>仓库地址</em> ] &emsp; 克隆远程仓库</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git <span class="built_in">clone</span> git@github.com:G/GitHelpDoc.git</span><br></pre></td></tr></table></figure><ul><li><h3 id="git-pull-emsp-获取远程更新"><a href="#git-pull-emsp-获取远程更新" class="headerlink" title="git pull &emsp; 获取远程更新"></a>git pull &emsp; 获取远程更新</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git pull</span><br></pre></td></tr></table></figure><br/><h2 id="多人远程合作"><a href="#多人远程合作" class="headerlink" title="多人远程合作"></a>多人远程合作</h2><ul><li><h3 id="git-clone-仓库地址-FileName-emsp-克隆远程仓库到指定文件夹"><a href="#git-clone-仓库地址-FileName-emsp-克隆远程仓库到指定文件夹" class="headerlink" title="git clone [ 仓库地址 ] [ FileName ] &emsp; 克隆远程仓库到指定文件夹"></a>git clone [ <em>仓库地址</em> ] [ <em>FileName</em> ] &emsp; 克隆远程仓库到指定文件夹</h3></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS G:\DOC\GitDoc&gt; git <span class="built_in">clone</span> git@github.com:G/GitHelpDoc.git newFile</span><br></pre></td></tr></table></figure><br/><p><a href="https://github.com/GiottoLee/GitHelpDoc">Github文档下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> 版本控制 </tag>
            
            <tag> 远程仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt上位机开发：串口控制模块开发</title>
      <link href="/2019/04/08/SerialPortPart3/"/>
      <url>/2019/04/08/SerialPortPart3/</url>
      
        <content type="html"><![CDATA[<p>这个项目是18年初寒假开始的，初始想法是利用寒假时间学习Qt开发并且顺便把毕业设计做出来，后来毕业设计做出来了，这个项目也完成了，然后又投入了二战，所以分享开发的过程的Blog却一直没有时间写，现在收到了录取通知，又想起这个事情，可能思绪不太连贯了，但我还是想把这个事情做下来。</p><span id="more"></span><h2 id="创建串口调试界面"><a href="#创建串口调试界面" class="headerlink" title="创建串口调试界面"></a>创建串口调试界面</h2><p><strong>串口调试器的主要需求：</strong></p><ol><li>显示来自串口接收到的信息；</li><li>向串口发送中断；</li><li>配置串口。</li></ol><p><strong>根据需求设计UI界面</strong></p><p><img src="/SerialPortPart3/image1.jpg" alt="image"></p><p>&emsp;&emsp;其中界面的设计主要用到了<code>Qlabel</code>、<code>QTextEdit</code>、<code>QCamboBox</code>、<code>QPushButton</code>,其中较为复杂的应该是QTextEdit组件的输出格式控制。</p><h2 id="配置串口"><a href="#配置串口" class="headerlink" title="配置串口"></a>配置串口</h2><p>&emsp;&emsp;由于Qt5内置了串口类，所以我们可以通过直接调用类方法进行串口的配置，这真的是一件十分Nice的事情，之前我也有通过Keil开发过C51的串口模块，相比较而言真的是能省不少心。</p><p>&emsp;&emsp;当用户通过LogIn界面登陆进入串口界面时，此时程序已经开始查找当前可用串口，显示在端口号处。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//查找可用的串口</span></span><br><span class="line">   foreach(<span class="keyword">const</span> QSerialPortInfo &amp;info, QSerialPortInfo::<span class="built_in">availablePorts</span>())</span><br><span class="line">   &#123;</span><br><span class="line">       QSerialPort serial;</span><br><span class="line">       serial.<span class="built_in">setPort</span>(info);</span><br><span class="line">       <span class="keyword">if</span>(serial.<span class="built_in">open</span>(QIODevice::ReadWrite))</span><br><span class="line">       &#123;</span><br><span class="line">           ui-&gt;combox-&gt;<span class="built_in">addItem</span>(serial.<span class="built_in">portName</span>());</span><br><span class="line">           serial.<span class="built_in">close</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//设置波特率下拉菜单默认显示第三项</span></span><br><span class="line">   ui-&gt;baudrate-&gt;<span class="built_in">setCurrentIndex</span>(<span class="number">3</span>);</span><br><span class="line">   <span class="comment">//关闭发送按钮的使能</span></span><br><span class="line"><span class="comment">//   ui-&gt;openport-&gt;setEnabled(false);</span></span><br><span class="line">   <span class="built_in">qDebug</span>()&lt;&lt;<span class="built_in">tr</span>(<span class="string">&quot;界面设定成功！&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="打开串口"><a href="#打开串口" class="headerlink" title="打开串口"></a>打开串口</h2><p>&emsp;&emsp;点击<kbd>打开串口</kbd>，系统自动读取用户所设置的串口配置，这里需要注意的是虽然有校验位选项，但是我没有使用，所以直接使用了<code>serial-&gt;setParity(QSerialPort::NoParity)</code>。从逻辑上来讲，当用户以当前设置打开了串口，设置变不能再更改了，所以在点击<kbd>打开串口</kbd>后，应将<code>QCamboBox</code>关闭使能，然后将<code>QPushButton</code>的文字内容改成“关闭串口”。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">serial = <span class="keyword">new</span> QSerialPort;</span><br><span class="line">        <span class="comment">//设置串口名</span></span><br><span class="line">        serial-&gt;<span class="built_in">setPortName</span>(ui-&gt;combox-&gt;<span class="built_in">currentText</span>());</span><br><span class="line">        <span class="comment">//打开串口</span></span><br><span class="line">        serial-&gt;<span class="built_in">open</span>(QIODevice::ReadWrite);</span><br><span class="line">        serialInfo = serialInfo + <span class="string">&quot;Mode: ReadWrite&quot;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="comment">//设置波特率</span></span><br><span class="line">        serial-&gt;<span class="built_in">setBaudRate</span>(ui-&gt;baudrate-&gt;<span class="built_in">currentText</span>().<span class="built_in">toInt</span>());</span><br><span class="line">        <span class="comment">//设置数据位数</span></span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(ui-&gt;databit-&gt;<span class="built_in">currentIndex</span>())</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>: serial-&gt;<span class="built_in">setDataBits</span>(QSerialPort::Data5); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>: serial-&gt;<span class="built_in">setDataBits</span>(QSerialPort::Data6); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>: serial-&gt;<span class="built_in">setDataBits</span>(QSerialPort::Data7); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>: serial-&gt;<span class="built_in">setDataBits</span>(QSerialPort::Data8); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        serialInfo = serialInfo + <span class="string">&quot;Data Bit: &quot;</span> + ui-&gt;databit-&gt;<span class="built_in">currentText</span>() + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="comment">//设置奇偶校验</span></span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(ui-&gt;conparebit-&gt;<span class="built_in">currentIndex</span>())</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: serial-&gt;<span class="built_in">setParity</span>(QSerialPort::NoParity); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        serialInfo = serialInfo + <span class="string">&quot;Conpare Bit&quot;</span> + ui-&gt;conparebit-&gt;<span class="built_in">currentText</span>() + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="comment">//设置停止位</span></span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(ui-&gt;stopbit-&gt;<span class="built_in">currentIndex</span>())</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: serial-&gt;<span class="built_in">setStopBits</span>(QSerialPort::OneStop); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: serial-&gt;<span class="built_in">setStopBits</span>(QSerialPort::TwoStop); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        serialInfo = serialInfo + <span class="string">&quot;Stop Bit&quot;</span> + ui-&gt;stopbit-&gt;<span class="built_in">currentText</span>() + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="comment">//设置流控制</span></span><br><span class="line">        serial-&gt;<span class="built_in">setFlowControl</span>(QSerialPort::NoFlowControl);</span><br><span class="line">        serialInfo = serialInfo + <span class="string">&quot;FlowControl: No flow control.&quot;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭设置菜单使能</span></span><br><span class="line">        ui-&gt;combox-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">        ui-&gt;baudrate-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">        ui-&gt;databit-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">        ui-&gt;conparebit-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">        ui-&gt;stopbit-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">        ui-&gt;openport-&gt;<span class="built_in">setText</span>(<span class="built_in">tr</span>(<span class="string">&quot;关闭串口&quot;</span>));</span><br><span class="line">        ui-&gt;send-&gt;<span class="built_in">setEnabled</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接信号槽</span></span><br><span class="line">        QObject::<span class="built_in">connect</span>(serial, &amp;QSerialPort::readyRead, <span class="keyword">this</span>, &amp;usr::Read_Data);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;[usr.cpp]-[on_openport_clicked()]: System Start.&quot;</span>);</span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;[usr.cpp]-[on_openport_clicked()]&quot;</span> +<span class="string">&#x27;\n&#x27;</span> + serialInfo);</span><br></pre></td></tr></table></figure><h2 id="发送中断并获取当前光照强度"><a href="#发送中断并获取当前光照强度" class="headerlink" title="发送中断并获取当前光照强度"></a>发送中断并获取当前光照强度</h2><p>&emsp;&emsp;发送中断是获取数据的最基本的方式，获取实时数据或者定时获取数据归根结底都是基于发送中断于定时发送中断实现的。得益于Qt5串口类的封装，发送中断变得很简洁。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向单片机发送check</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usr::sendchk</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString chk = <span class="string">&quot;check&quot;</span>;</span><br><span class="line">    serial-&gt;<span class="built_in">write</span>(chk.<span class="built_in">toLatin1</span>());</span><br><span class="line">    <span class="built_in">log</span>(<span class="string">&quot;[usr.cpp]-[sendchk()]: CHECK has been sent.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时监控"><a href="#定时监控" class="headerlink" title="定时监控"></a>定时监控</h2><p>&emsp;&emsp;通过定时的向串口发送中断获取信息，来起到监控数据的功能。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usr::on_startAutoControl_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(token == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="built_in">tr</span>(<span class="string">&quot;token == false&quot;</span>);</span><br><span class="line">        ui-&gt;startAutoControl-&gt;<span class="built_in">setText</span>(<span class="built_in">tr</span>(<span class="string">&quot;暂停监控&quot;</span>));</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="built_in">tr</span>(<span class="string">&quot;暂停监控&quot;</span>);</span><br><span class="line">        token = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="built_in">tr</span>(<span class="string">&quot;token赋值为true&quot;</span>);</span><br><span class="line">        <span class="built_in">on_autoControlSwitch_stateChanged</span>(Qt::Checked);</span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;[usr.cpp]-[on_startAutoControl_clicked()]: Auto Control has been started.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(token == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="built_in">tr</span>(<span class="string">&quot;token == true&quot;</span>);</span><br><span class="line">        ui-&gt;startAutoControl-&gt;<span class="built_in">setText</span>(<span class="built_in">tr</span>(<span class="string">&quot;开始监控&quot;</span>));</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="built_in">tr</span>(<span class="string">&quot;开始监控&quot;</span>);</span><br><span class="line">        token = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="built_in">tr</span>(<span class="string">&quot;token赋值为false&quot;</span>);</span><br><span class="line">        <span class="built_in">on_autoControlSwitch_stateChanged</span>(Qt::Unchecked);</span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;[usr.cpp]-[on_startAutoControl_clicked()]: Auto Control has been stopped.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>&emsp;&emsp;定时功能使用了<code>QTimer类</code>，并且通过槽函数机制链接到<code>sendchk()函数</code>给串口发送中断。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启自动监控</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usr::on_autoControlSwitch_stateChanged</span><span class="params">(<span class="keyword">int</span> arg1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arg1 == Qt::Checked)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="built_in">tr</span>(<span class="string">&quot;timer == checked&quot;</span>);       <span class="comment">//设置定时器</span></span><br><span class="line">        timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line">        timer-&gt;<span class="built_in">setInterval</span>(<span class="number">20000</span>);               <span class="comment">//设置时间间隔</span></span><br><span class="line">        <span class="built_in">connect</span>(timer,<span class="built_in">SIGNAL</span>(<span class="built_in">timeout</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">sendchk</span>()));      <span class="comment">//链接槽函数</span></span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="built_in">tr</span>(<span class="string">&quot;Timer has been inited!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        timer-&gt;<span class="built_in">start</span>(<span class="number">1000</span>);     <span class="comment">//开始</span></span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;[usr.cpp]-[on_autoControlSwitch_stateChanged]: QTimer has been started.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arg1 == Qt::Unchecked)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="built_in">tr</span>(<span class="string">&quot;arg1 == unchecked&quot;</span>);</span><br><span class="line">        timer-&gt;<span class="built_in">stop</span>();                      <span class="comment">//暂停定时器</span></span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="built_in">tr</span>(<span class="string">&quot;已暂停定时器&quot;</span>);</span><br><span class="line">        <span class="built_in">log</span>(<span class="string">&quot;[usr.cpp]-[on_autoControlSwitch_stateChanged]: QTimer has been paused.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h2><p>&emsp;&emsp;显示数据是我在开发过程中花费时间最长的模块，原因是我不太明白Qt接收到串口信息的数据类型以及如何进行格式转换。串口接收到的数据是十六进制的信息，此处需要对其进行格式转换，但是不知为何我在使用<code>toInt()方法</code>时总是有Bug，不太明白为什么，如果有大佬知道的话，请评论区解答一下，谢谢~<br>&emsp;&emsp;所以这里提供另一种解决方案。总的逻辑是这样，首先通过寄存器<code>buf</code>暂存从串口中读取到的数据，然后通过<code>bytesToInt(buf)</code>转化成整型数据，然后再通过<code>QString::number(decbuf,10)</code>将其转化成字符串型输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将QByteArray型转换成int型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usr::bytesToInt</span><span class="params">(QByteArray bytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> addr = bytes[<span class="number">0</span>] &amp; <span class="number">0x000000FF</span>;</span><br><span class="line">    addr |= ((bytes[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0x0000FF00</span>);</span><br><span class="line">    addr |= ((bytes[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) &amp; <span class="number">0x00FF0000</span>);</span><br><span class="line">    addr |= ((bytes[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) &amp; <span class="number">0xFF000000</span>);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取接收到的数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usr::Read_Data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QByteArray buf;</span><br><span class="line">    <span class="keyword">int</span> decbuf;</span><br><span class="line">    <span class="comment">//bool ok;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取串口数据</span></span><br><span class="line">    buf = serial-&gt;<span class="built_in">readAll</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对串口数据进行格式转换</span></span><br><span class="line">    decbuf = <span class="built_in">bytesToInt</span>(buf);</span><br><span class="line">    QString strbuf = QString::<span class="built_in">number</span>(decbuf,<span class="number">10</span>);</span><br><span class="line">    QString strTime = <span class="built_in">getTime</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ifHandle == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        strbuf = strTime + <span class="string">&quot;:      光照强度为：&quot;</span> + strbuf + <span class="string">&quot;**********手动获取&quot;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="built_in">writeFile</span>(strbuf);</span><br><span class="line">        ifHandle = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        strbuf = strTime + <span class="string">&quot;:      光照强度为：&quot;</span> + strbuf + <span class="string">&quot;**********自动获取&quot;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="built_in">writeFile</span>(strbuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!buf.<span class="built_in">isEmpty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        QString str = ui-&gt;outputEdit-&gt;<span class="built_in">toPlainText</span>();</span><br><span class="line"></span><br><span class="line">        str+=strbuf + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        ui-&gt;outputEdit-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        ui-&gt;outputEdit-&gt;<span class="built_in">append</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buf.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h2><p>&emsp;&emsp;这个模块不是必要模块，有没有都不影响程序运行，只是在开发过程调试Bug中大量使用了<code>qDebug()</code>打印运行信息，最后索性将其封装成一个单独的方法，用来保存运行信息，当系统宕机时，可以查看系统日志了解系统在哪个模块出现了问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//系统日志</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usr::log</span><span class="params">(QString str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(<span class="string">&quot;log.csv&quot;</span>)</span></span>;</span><br><span class="line">    QString strTime = <span class="built_in">getTime</span>();</span><br><span class="line"></span><br><span class="line">    str = <span class="string">&#x27;\n&#x27;</span> + strTime + <span class="string">&quot;:  &quot;</span> + str;</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">open</span>(QIODevice::ReadWrite | QIODevice::Append);</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line">    out&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;write success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p>&emsp;&emsp;数据存储讲道理是应该架在数据库上的，但是我为了图方便没有使用使用数据库，只做了一张表格存储数据。说到这，上个月我去参加山大的研究生复试，面试的时候介绍我的项目，因为这个还被老师质疑了。</p><blockquote><p>我：………………（介绍我的项目）……老师，我介绍完了。<br>老师：就这个？<br>我：？？？<br>我：就这个…<br>老师：你用了什么数据库？<br>我：没用数据库…<br>老师：没用数据库？<br>我：对。<br>老师：行，就这样吧。</p></blockquote><p>&emsp;&emsp;所以说这东西还有很多东西需要继续做，如果大家有兴趣可以继续做下去。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写文件模块</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usr::writeFile</span><span class="params">(QString str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(<span class="string">&quot;data.csv&quot;</span>)</span></span>;</span><br><span class="line">    QDir dir;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;dir.<span class="built_in">currentPath</span>();</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">open</span>(QIODevice::ReadWrite | QIODevice::Append);</span><br><span class="line"></span><br><span class="line">    <span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line">    out&lt;&lt;str&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;write success&quot;</span>;</span><br><span class="line">    <span class="built_in">log</span>(<span class="string">&quot;[usr.cpp]-[writeFile(QString str)]： write success&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;这个项目本身难度不算太高，跟着这三篇Blog自己单独的做下来我认为问题不大，但这恰恰失去了Debug本身的乐趣，我至今还记得解决每一个问题时的喜悦心情，那种欢愉是copy难以企及的。<br>&emsp;&emsp;我认为程序猿最重要的学习方式就是在Coding过程中你所收获的新的解题思路以及欢愉。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>单片机代码<br><code>main.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;key.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;lcd.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;adc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">extern</span> u8 send_flag;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line">   u16 adcx;</span><br><span class="line"><span class="keyword">float</span> temp;</span><br><span class="line">delay_init();     <span class="comment">//延时函数初始化  </span></span><br><span class="line">NVIC_Configuration();  <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span></span><br><span class="line">uart_init(<span class="number">9600</span>); <span class="comment">//串口初始化为9600</span></span><br><span class="line"> LED_Init();     <span class="comment">//LED端口初始化 </span></span><br><span class="line"> Adc_Init();  <span class="comment">//ADC初始化</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(send_flag == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">send_flag = <span class="number">0</span>;</span><br><span class="line">adcx=Get_Adc_Average(ADC_Channel_1,<span class="number">10</span>);</span><br><span class="line">USART_SendData(USART1,adcx);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>usart.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span>  </span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////  </span></span><br><span class="line"><span class="comment">//如果使用ucos,则包括下面的头文件即可.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_UCOS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;includes.h&quot;</span><span class="comment">//ucos 使用  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">u8 send_flag = <span class="number">0</span>;</span><br><span class="line">u8 rev_c_flag = <span class="number">0</span>;</span><br><span class="line">u8 rev_h_flag = <span class="number">0</span>;</span><br><span class="line">u8 rev_e_flag = <span class="number">0</span>;</span><br><span class="line">u8 rev_c2_flag = <span class="number">0</span>;</span><br><span class="line">u8 rev_k_flag = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> import(__use_no_semihosting)             </span></span><br><span class="line"><span class="comment">//标准库需要的支持函数                 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">FILE</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line"><span class="keyword">int</span> handle; </span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">FILE __stdout;       </span><br><span class="line"><span class="comment">//定义_sys_exit()以避免使用半主机模式    </span></span><br><span class="line">_sys_exit(<span class="keyword">int</span> x) </span><br><span class="line">&#123; </span><br><span class="line">x = x; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//重定义fputc函数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;      </span><br><span class="line"><span class="keyword">while</span>((USART1-&gt;SR&amp;<span class="number">0X40</span>)==<span class="number">0</span>);<span class="comment">//循环发送,直到发送完毕   </span></span><br><span class="line">    USART1-&gt;DR = (u8) ch;      </span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> EN_USART1_RX   <span class="comment">//如果使能了接收</span></span></span><br><span class="line"><span class="comment">//串口1中断服务程序</span></span><br><span class="line"><span class="comment">//注意,读取USARTx-&gt;SR能避免莫名其妙的错误   </span></span><br><span class="line">u8 USART_RX_BUF[USART_REC_LEN];     <span class="comment">//接收缓冲,最大USART_REC_LEN个字节.</span></span><br><span class="line"><span class="comment">//接收状态</span></span><br><span class="line"><span class="comment">//bit15，接收完成标志</span></span><br><span class="line"><span class="comment">//bit14，接收到0x0d</span></span><br><span class="line"><span class="comment">//bit13~0，接收到的有效字节数目</span></span><br><span class="line">u16 USART_RX_STA=<span class="number">0</span>;       <span class="comment">//接收状态标记  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化IO 串口1 </span></span><br><span class="line"><span class="comment">//bound:波特率</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uart_init</span><span class="params">(u32 bound)</span></span>&#123;</span><br><span class="line">    <span class="comment">//GPIO端口设置</span></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line"> </span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA, ENABLE);<span class="comment">//使能USART1，GPIOA时钟</span></span><br><span class="line"> USART_DeInit(USART1);  <span class="comment">//复位串口1</span></span><br><span class="line"> <span class="comment">//USART1_TX   PA.9</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//PA.9</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;<span class="comment">//复用推挽输出</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure); <span class="comment">//初始化PA9</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">//USART1_RX  PA.10</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;<span class="comment">//浮空输入</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);  <span class="comment">//初始化PA10</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//Usart1 NVIC 配置</span></span><br><span class="line"></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">3</span> ;<span class="comment">//抢占优先级3</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>;<span class="comment">//子优先级3</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//IRQ通道使能</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//根据指定的参数初始化VIC寄存器</span></span><br><span class="line">  </span><br><span class="line">   <span class="comment">//USART 初始化设置</span></span><br><span class="line"></span><br><span class="line">USART_InitStructure.USART_BaudRate = bound;<span class="comment">//一般设置为9600;</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//字长为8位数据格式</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//一个停止位</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶校验位</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line"></span><br><span class="line">    USART_Init(USART1, &amp;USART_InitStructure); <span class="comment">//初始化串口</span></span><br><span class="line">    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);<span class="comment">//开启中断</span></span><br><span class="line">    USART_Cmd(USART1, ENABLE);                    <span class="comment">//使能串口 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>                <span class="comment">//串口1中断服务程序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 Res;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_TICKS_PER_SEC <span class="comment">//如果时钟节拍数定义了,说明要使用ucosII了.</span></span></span><br><span class="line">OSIntEnter();    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  <span class="comment">//接收中断(接收到的数据必须是0x0d 0x0a结尾)</span></span><br><span class="line">&#123;</span><br><span class="line">Res =USART_ReceiveData(USART1);<span class="comment">//(USART1-&gt;DR);//读取接收到的数据</span></span><br><span class="line"><span class="keyword">if</span>((rev_c_flag == <span class="number">0</span>)&amp;&amp;(rev_h_flag == <span class="number">0</span>)&amp;&amp;(rev_e_flag == <span class="number">0</span>)&amp;&amp;(rev_c2_flag == <span class="number">0</span>)&amp;&amp;(rev_k_flag == <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Res == <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">rev_c_flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((rev_c_flag == <span class="number">1</span>)&amp;&amp;(rev_h_flag == <span class="number">0</span>)&amp;&amp;(rev_e_flag == <span class="number">0</span>)&amp;&amp;(rev_c2_flag == <span class="number">0</span>)&amp;&amp;(rev_k_flag == <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Res == <span class="string">&#x27;h&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">rev_h_flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((rev_c_flag == <span class="number">1</span>)&amp;&amp;(rev_h_flag == <span class="number">1</span>)&amp;&amp;(rev_e_flag == <span class="number">0</span>)&amp;&amp;(rev_c2_flag == <span class="number">0</span>)&amp;&amp;(rev_k_flag == <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Res == <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">rev_e_flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((rev_c_flag == <span class="number">1</span>)&amp;&amp;(rev_h_flag == <span class="number">1</span>)&amp;&amp;(rev_e_flag == <span class="number">1</span>)&amp;&amp;(rev_c2_flag == <span class="number">0</span>)&amp;&amp;(rev_k_flag == <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Res == <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">rev_c2_flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((rev_c_flag == <span class="number">1</span>)&amp;&amp;(rev_h_flag == <span class="number">1</span>)&amp;&amp;(rev_e_flag == <span class="number">1</span>)&amp;&amp;(rev_c2_flag == <span class="number">1</span>)&amp;&amp;(rev_k_flag == <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Res == <span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">rev_c_flag = <span class="number">0</span>;</span><br><span class="line">rev_h_flag = <span class="number">0</span>;</span><br><span class="line">rev_e_flag = <span class="number">0</span>;</span><br><span class="line">rev_c2_flag = <span class="number">0</span>;</span><br><span class="line">rev_k_flag = <span class="number">0</span>;</span><br><span class="line">send_flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     &#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_TICKS_PER_SEC <span class="comment">//如果时钟节拍数定义了,说明要使用ucosII了.</span></span></span><br><span class="line">OSIntExit();   </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p><a href="https://github.com/GiottoLee/SerialPort">Github</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Qt </tag>
            
            <tag> 上位机 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2018年终总结</title>
      <link href="/2019/01/01/2018Report/"/>
      <url>/2019/01/01/2018Report/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&emsp;<font face="楷体"><br>据说真的有神<br>是一个孤家寡人<br>可从未见过那扇门<br>是我太孤陋寡闻<br>&emsp;</font></p></blockquote><font face="楷体"><p>&emsp;&emsp;<strong>2018年对于我来说过的就像是做了场梦一样，嗖的一声，我毕业了，我不再是学生了，我也不能买学生票了;嗖的一声，我又参加了一次研究生考试，去年打印的十张准考证还剩九张没用完，今年又多了十张;嗖的一声，我已经马上22岁了，你看，我写到这还以为自己是22呢，应该是马上23了才对，却依旧是个无法为全面建成小康社会贡献个人力量的无业游民。</strong></p></font><!---more---><p><img src="/2019/01/01/2018Report/2018-1.jpeg"></p><p>​<br>&emsp;&emsp;<font face="楷体">1月，我的大部分时间都在床上度过，自从研究生考试之后，我对自己的成绩有一种“很不理想”的把握，随后我就再没想过复试调剂的事情，一心只想先把毕业设计做完，甚至在其中找到了Debug的乐趣。每天坐在床上裹在被子里，改改程序，改改论文，玩玩游戏。那时候刚刚考完试，觉得游戏是真好玩。</font></p><p><img src="/2019/01/01/2018Report/2018-2.jpeg"></p><p>&emsp;&emsp;<font face="楷体">2月，这个月最重要的事情应该就是在年二十九那天查到自己的研考成绩吧，虽然过了国家线，但距离校线还有一点差距，这个差距在我感觉大概就是一哆嗦的问题，当时心情，有点难过，考成这个样子实在太不应该；还有点开心，居然过了国家线。大概是因为考完试我就有所预料，所以这种心情大概持续也没几天，我就继续玩游戏，写论文，还顺便做了一份简历，想着如果有个稍微好一点的公司要我我就去工作算了，每天在各种招聘网站投简历，有时候还能和HR电话唠唠嗑，人家要我去公司参加面试我还不太想动弹。对于当时的我，现在看来毫无疑问是在逃避选择。</font></p><p><img src="/2019/01/01/2018Report/2018-3.jpeg"></p><p>&emsp;&emsp;<font face="楷体">3月，我查到了我第一志愿的复试名单，也看到了校线，就差那么一两分，我看着复试分数线哭笑不得，虽然加上一两分也不太可能考得上，但还是有那么一点点失望。我还记得那年考完数学就已濒临崩溃了，明明花了最多的时间却没有得到一个应得的结果。也听到了很多朋友的建议，试着去参加调剂，但我也没有当回事，每天看看调剂系统，随便点点参加调剂，甚至接到复试通知也懒得去。现在重新看这件事情，我那时自己下意识的没有考虑调剂这条路，政审没有弄，复试也没有看书，一心想着走一步是一步，有工作就去工作，挨到最后还是决定再试一年。也是在这个月完成了毕业答辩，把自己的档案随手挂靠在了一个人事代理公司，然后开始筹划这一年的复习计划。</font></p><p><img src="/2019/01/01/2018Report/2018-4.jpeg"></p><p>&emsp;&emsp;<font face="楷体">4月，我开始调整作息，慢慢拾起自己的数学与英语，白天看看书晚上继续改论文，并且计划着自己的毕业旅行。月底在学校附近找了个房子搬了出去，准备开始自己在烟台的第五个年头。</font></p><p><img src="/2019/01/01/2018Report/2018-5.jpeg"></p><p>&emsp;&emsp;<font face="楷体">5月，是我这一年最开心也是最难过的一段时间—毕业旅行与毕业。学校春假(其实我每天都是假)和琪琪去西安走了一圈，胡辣汤很好喝，但我最喜欢羊肉泡馍，尤其是走了一天腰酸背痛之后的那一口热汤。从西安回来后，陆陆续续的开始与身边的朋友告别，最后一次聚餐，最后一次拍毕业照，也可能是最后一次，作为一个学生。</font></p><p><img src="/2019/01/01/2018Report/2018-6.jpg"></p><p>&emsp;&emsp;<font face="楷体">6月，勇士夺冠。我顺利拿到了自己的毕业证与学位证，正式加入了无业游民的大家庭。如果说5月是毕业季的预热，那么6月就是我们对学校的一次正式告别。我跑回宿舍和舍友一起在最后打扫卫生，并且看着他们一个一个离开。我认为这是一件具有仪式感的事情，我的大学是从宿舍开始的，最后也应该在宿舍结束我的大学生活。后来还去了淳哥岛上呆了两天，感受了一下渔村的环境，大概因为心境依旧浮躁，我还是喜欢城市多一些。</font></p><p><img src="/2019/01/01/2018Report/2018-7.JPG"></p><p>&emsp;&emsp;<font face="楷体">7月，考辛斯加盟勇士。在学校所有事情都已经结束以后，我去了北京，开始了大概一个半月的暑期集训，这段时间让我习惯了在遍布小动物的环境下的生活，蚰蜒、老鼠、蜘蛛、蚯蚓、壁虎，我见过或者我没见过的，这一个多月我都算是相过面了。</font></p><p><img src="/2019/01/01/2018Report/2018-8.JPG"></p><p>&emsp;&emsp;<font face="楷体">8月，北京天气断断续续下了大概有一个周的雨，学校环境变得十分潮湿，宿舍更不用说，每天晚上坐在想是撒了水的床铺上，唯一想要的就是回家，还有第二天的数学课。</font></p><p><img src="/2019/01/01/2018Report/2018-9.jpg"></p><p>&emsp;&emsp;<font face="楷体">9月初，回到烟台，准备继续复习，事实上也没有准备，就是继续复习，还有大把的书没有看，大把的题还没有做，直到这时，我对数学依旧似懂非懂。但是身体的疲惫正在慢慢显示出来，上火、感冒接踵而至。心情变得浮躁，当我看书的时候，书上的字符无时无刻不在我眼里扭曲、变形。</font></p><p><img src="/2019/01/01/2018Report/2018-10.jpg"></p><p>&emsp;&emsp;<font face="楷体">10月，金庸先生去世。金庸先生告诉我各有因缘莫羡人。每个人都有各自际遇，与其羡慕别人，不如把当下做好。</font></p><p><img src="/2019/01/01/2018Report/2018-11.jpg"></p><p>&emsp;&emsp;<font face="楷体">11月，回家现场确认，排队的人真的很多，围着海关培训基地的院子绕了半圈，站在门口脑子里不由自主的想考试真的马上就要来了，表面云淡风轻，其实心里慌的不行。后来回到烟台，花了五块钱买了一盆含羞草，准备每天浇浇水看看它的变化，说是一盆，其实它比我喝水的一次性杯子还小，我考试在家呆了六天，现在它已经快死了，我甚至有些难过。</font></p><p><img src="/2019/01/01/2018Report/2018-12.jpg"></p><p>&emsp;&emsp;<font face="楷体">12月，临近考试有些手忙脚乱，今年英语没有复习，只背了单词，做了五套真题，大部分时间给了数学与专业课，如果今年有哪一科略崩的话，我认为只能是英语了。考试那两天是最痛苦的两天，自己把自己压的喘不过气，还好坚持考完了，第二天我认为可以得到一个还不错的结果。今年心态又略微发生了改变，接受了自己直接去工作的可能性，趁早实现财务自由。考完回到烟台，休息了两天，然后接着看看书，敲敲代码，应付机考。买了第一台胶片双反，仪式感真是一种很奇妙的东西，每一次按下开门都是对时间和情感郑重其事的搁置。</font></p><p><img src="/2019/01/01/2018Report/2018-13.jpg"></p><hr><p>&emsp;&emsp;<font face="楷体"><strong>2018这一年对我来说，有来自各方面的压力，也有各方面复杂的情感杂糅，但也有最开心的日常。不知道最后结果会是怎么样，但这件事情的的确确对我产生了许多良性的改变，更积极的主动思考、更客观的考虑问题，更善于控制自己的行为，这些同样是这件事情带给我的成长。有人说结果不重要，奋斗过程更重要，我无法欣然接受，结果当然是最重要的，但过程也不是浪费时间的徒然。就像在弥漫着春天气息的风中，一只蝴蝶翩然飞舞。仅仅一瞬间，感觉到蝴蝶的翅膀碰到了自己干涩的嘴唇。可是，蹭在他唇上的蝴蝶的翅粉，在数年后依然闪闪发光。</strong></font></p><p>&emsp;&emsp;<font face="楷体"><strong>2019年，走出校园，闯入社会，或许面对着来自各个方向的不如意，但追求自由的梦想想必还是不会放下。行为自由、经济自由与思想自由，自由从来不容易，自由从来不是一个姿态，一个手势，自由是永恒地克服重力，挣扎向上飞行。</strong> ​​​</font></p><p>&emsp;&emsp;<font face="楷体"><strong>最后，是例行这一年里拍过最喜欢的十张照片。</strong></font></p><p><img src="/2019/01/01/2018Report/s1.jpg"></p><p><img src="/2019/01/01/2018Report/s2.jpg"></p><p><img src="/2019/01/01/2018Report/s3.jpg"></p><p><img src="/2019/01/01/2018Report/s4.jpg"></p><p><img src="/2019/01/01/2018Report/s5.jpg"></p><p><img src="/2019/01/01/2018Report/s6.jpg"></p><p><img src="/2019/01/01/2018Report/s7.jpg"></p><p><img src="/2019/01/01/2018Report/s8.jpg"></p><p><img src="/2019/01/01/2018Report/s9.jpg"></p><p><img src="/2019/01/01/2018Report/s10.jpg"></p><blockquote><p>&emsp;<font face="楷体"><br>出发啦，不要问那路在哪<br>迎风向前是唯一的方法<br>&emsp;</font></p></blockquote><p>&emsp;&emsp;<font face="楷体" >对于生活，我们不是英雄，但我必须面对你。</font></p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt上位机开发：管理员登陆模块开发</title>
      <link href="/2018/01/22/SerialPortPart2/"/>
      <url>/2018/01/22/SerialPortPart2/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;从今天开始，我们开始我们的上位机开发大师之路。</p><span id="more"></span><p>&emsp;&emsp;首先我们要先创建我们的第一个工程。文件-&gt;新建文件或项目或者使用快捷键Ctrl+N。</p><p><img src="/2018/01/22/SerialPortPart2/image1.png" alt="image1"></p><p>&emsp;&emsp;这里我们选择Application-&gt;Qt WidgetsApplication。</p><p><img src="/2018/01/22/SerialPortPart2/image2.png" alt="image2"></p><p>&emsp;&emsp;下一步之后我们要给我们的项目起一个名字，这里我起名叫做serialport，选择我们的项目路径，需要注意的是项目路径这里不允许有中文，如果有中文项目构建过程中会报错。</p><p><img src="/2018/01/22/SerialPortPart2/image3.png" alt="image3"></p><p>&emsp;&emsp;下一步选择编译器，由于在昨天的环境搭建中，我只安装了MinGw一种编译环境，所以这里也只有这一个Desktop Qt 5.10.0 MinGW32 bit，如果你在之前的安装过程中还选择了其他编译器的话，这里会显示多个编译器。</p><p><img src="/2018/01/22/SerialPortPart2/image4.png" alt="image"></p><p>&emsp;&emsp;下一步，基类我们选择QWidget，类名改为login。原因是因为我想在串口调试助手的基础上添加管理员登陆的安全验证，所以我们以login作为我们的初始界面。（这里我忘记改了-。-||）</p><p><img src="/2018/01/22/SerialPortPart2/image5.png" alt="image5"></p><p>&emsp;&emsp;创建完成后我们发现Qt自动生成了cpp文件和头文件，到这一步我们的项目初创成功。</p><h1 id="2-创建多窗口"><a href="#2-创建多窗口" class="headerlink" title="2.创建多窗口"></a>2.创建多窗口</h1><p>&emsp;&emsp;双击Forms文件夹下的ui文件，我们在用户界面上添加我们需要用到的组件。</p><p><img src="/2018/01/22/SerialPortPart2/image6.png" alt="image"></p><p>&emsp;&emsp;我要实现的功能是当用户输入正确的口令，点击Log in时，我们这个程序才会跳转到串口工具的界面，点击Cancel直接退出程序。</p><h2 id="2-1-Cancel功能"><a href="#2-1-Cancel功能" class="headerlink" title="2.1 Cancel功能"></a>2.1 Cancel功能</h2><p>&emsp;&emsp;我们从最简单的开始，实现Cancel的关闭功能。</p><p>&emsp;&emsp;实现关闭功能，不需要敲代码，我们只需要在Signals &amp; Slots Editor手动选择一下就好了。</p><p><img src="/2018/01/22/SerialPortPart2/image7.png" alt="image7"></p><p>​    发送者是Cancel这个pushButton的对象名，信号选择clicked（），接收者选择Widget，槽函数选择close（）。这样就实现了Cancel功能。</p><h2 id="2-2-Log-in功能"><a href="#2-2-Log-in功能" class="headerlink" title="2.2  Log in功能"></a>2.2  Log in功能</h2><p>&emsp;&emsp;我们要实现登陆功能，首先我们要另外创建一个界面（usr），当我们从Login界面输入账号密码，验证正确后，即可进入usr界面操作，所以我们先来看一下创建新界面的步骤。</p><p>&emsp;&emsp;文件-&gt;新建文件或项目</p><p><img src="/2018/01/22/SerialPortPart2/image8.png" alt="image8"></p><p>&emsp;&emsp;这个类可以帮助我们在创建窗口程序的基础上将cpp文件和头文件一起创建出来。</p><p>&emsp;&emsp;之后，选择Dialogwithout Buttons，按键什么的我们自己添加就可以了。</p><p><img src="/2018/01/22/SerialPortPart2/image9.png" alt="image"></p><p>&emsp;&emsp;然后我们起个名，就叫usr好了。</p><p>&emsp;&emsp;之后下一步、下一步…就可以完成创建了。</p><h1 id="3-用户验证"><a href="#3-用户验证" class="headerlink" title="3.用户验证"></a>3.用户验证</h1><p>&emsp;&emsp;下面我们来做用户验证的部分，从现在开始就要开始敲代码了，右键Login按键，选择转到槽，然后选择clicked（），按键事件的函数Qt就为我们自动创建好了。</p><p>&emsp;&emsp;首先我们要在login.h里创建usr窗口的对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LOGIN_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGIN_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Widget</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_pushButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">    usr *Usr=<span class="keyword">new</span> usr;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOGIN_H</span></span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接下来的代码要执行的操作就是验证账号密码，如果正确则跳转usr窗口，如果不正确，发出警告。另外，我们不管平时用QQ还是用微信登陆，密码都是不显示的小黑点，这里我们也设置一下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;login.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ui_login.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;QMessageBox&quot;</span></span></span><br><span class="line"> </span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QWidget</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    ui-&gt;password-&gt;<span class="built_in">setEchoMode</span>(QLineEdit::Password);<span class="comment">//当输入密码时，显示为*******</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Widget::on_pushButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    this-&gt;hide();</span></span><br><span class="line"><span class="comment">    Usr-&gt;show();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;ui-&gt;usrname-&gt;<span class="built_in">text</span>().<span class="built_in">trimmed</span>() == <span class="built_in">tr</span>(<span class="string">&quot;admin&quot;</span>) &amp;&amp;</span><br><span class="line">           <span class="keyword">this</span>-&gt;ui-&gt;password-&gt;<span class="built_in">text</span>().<span class="built_in">trimmed</span>()== <span class="built_in">tr</span>(<span class="string">&quot;root&quot;</span>))  <span class="comment">//去除lineEdit内的用户名和密码进行校验</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//登陆成功后显示对话框</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;<span class="built_in">hide</span>();</span><br><span class="line">            Usr-&gt;<span class="built_in">show</span>();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//用户输入存在错误</span></span><br><span class="line">            QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>,<span class="built_in">tr</span>(<span class="string">&quot;waring&quot;</span>),<span class="built_in">tr</span>(<span class="string">&quot;your passward is wrong&quot;</span>),QMessageBox::Yes);</span><br><span class="line">            ui-&gt;usrname-&gt;<span class="built_in">clear</span>();  <span class="comment">//清空姓名usrname</span></span><br><span class="line">            ui-&gt;password-&gt;<span class="built_in">clear</span>();  <span class="comment">//清空密码passward</span></span><br><span class="line">            ui-&gt;usrname-&gt;<span class="built_in">setFocus</span>();  <span class="comment">//将鼠标重新定位到usrname</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们Ctrl+B构建运行一下</p><font color="pink"><p>插入栓插入…<br>解放播放传导系统 准备接续…<br>探针插入 完毕<br>神经同调装置在基准范围内<br>第一次接触…<br>插入栓注水…<br>主电源连接完毕…<br>开始进行第二次接触…<br>交互界面连接…<br>思考形态以中文作为基准，进行思维连接…<br>连接没有异常<br>同步率为 1000.0000%%<br>第一锁定器解除…<br>第二锁定器解除…<br>移往播放口…</p></font><p>&emsp;&emsp;密码正确—&gt;跳转usr窗口</p><p><img src="/2018/01/22/SerialPortPart2/image11.png" alt="image"></p><p>&emsp;&emsp;密码错误—&gt;警告</p><p><img src="/2018/01/22/SerialPortPart2/image12.png" alt="image12"></p><p>&emsp;&emsp;至此，登陆界面完成！</p><hr>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Qt </tag>
            
            <tag> 上位机 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt上位机开发：Qt5的环境搭建</title>
      <link href="/2018/01/21/SerialPortPart1/"/>
      <url>/2018/01/21/SerialPortPart1/</url>
      
        <content type="html"><![CDATA[<p>今年马上就要毕业，开始着手准备自己的毕业设计，当时一时脑热毕设方向选择了嵌入式设备开发，终端部分已经基本做好了，但是却始终找不到适应我需求的串口调试助手，所以决定自己撸一下Qt，自己写一个上位机，同时把开发过程写在这里，供大家参考指正。</p><span id="more"></span><h1 id="2-Qt版本的选择"><a href="#2-Qt版本的选择" class="headerlink" title="2. Qt版本的选择"></a>2. Qt版本的选择</h1><p>Qt的版本种类比较多，我选择的是Qt5的版本，原因是因为Qt5自带串口类，Qt以前的版本中，没有提供官方的对RS232串口的支持，编写串口程序很不方便。而Qt5版本中，官方自带了Qserialport模块，这极大地方便了我们的开发过程。</p><p>就Qt的编译环境也有两种，一种是MinGw，一种是MSVC。</p><p>MinGW这种编译环境是在Qt的安装包中捆绑安装配置好的，属于傻瓜式配置过程，而MSVC需要在安装Qt后，</p><p>再安装Visual Studio C++Compiler，过程并比较复杂，如无特殊需求，我认为选择MinGW版本就好。</p><h1 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3. 环境搭建"></a>3. 环境搭建</h1><h2 id="3-1-Qt的下载"><a href="#3-1-Qt的下载" class="headerlink" title="3.1 Qt的下载"></a>3.1 Qt的下载</h2><p>Qt我推荐是从官网（<a href="https://www.qt.io/download">https://www.qt.io/download</a>）下载。</p><p>选择OpenSource下载。</p><p><img src="/2018/01/21/SerialPortPart1/image1.png"></p><p>此时会要求你填写一些信息和注册一个账号，就随便填一填就可以下载了。在这里要吐槽一下这里要求注册填写的密码，密码要求至少含有三种格式的字符，要有大写、小写还有标点符号，简直反人类-。-+</p><p>但是这里注册的账号密码不要忘记，安装的过程中我们还要用。</p><h2 id="3-2-Qt的安装"><a href="#3-2-Qt的安装" class="headerlink" title="3.2 Qt的安装"></a>3.2 Qt的安装</h2><p>下载完之后安装包的大小是2.3G，作为一个安装包，还是挺大的了。</p><p><img src="/2018/01/21/SerialPortPart1/image2.png"></p><p>我们双击打开，首先肯定是例行的安全警告，毫无疑问看都不看直接确定。</p><p>看一下版本是最新的5.10，嗯，没错-&gt;下一步~</p><p><img src="/2018/01/21/SerialPortPart1/image3.png"></p><p>到了这一步就要用到我们之前注册的账号，登陆一下然后下一步~需要注意的是这一步有一定的几率会提示你无法connect，倒杯茶休息一会，再试试就差不多可以了。</p><p><img src="/2018/01/21/SerialPortPart1/image4.png"></p><p>然后是设置你的安装路径，你开心就好，没什么可说的，不过需要注意的是我在使用Qt开发的过程中发现，Qt在对项目构建的时候，如果项目路径存在中文，就会出bug，我不太确定Qt的安装路径出现中文会怎样，不过为了一劳永逸，尽量还是不要有中文吧。</p><p><img src="/2018/01/21/SerialPortPart1/image5.png"></p><p>这一步十分重要！十分重要！我就不说三遍！</p><p><img src="/2018/01/21/SerialPortPart1/image6.png"></p><p>这个安装包类似Visual Studio的安装过程，可以自己选择性的安装工具，这里我选择了MinGW 5.3.0 32bit和Sources。</p><p><img src="/2018/01/21/SerialPortPart1/image7.png"></p><p>在Tools里我选择了MinGW 5.3.0，我们只选择这三项就足够了，我第一次安装中把所有的插件都安装了，安装完大约是12G，这里我觉得没有必要，安装了多种编译环境，在开发时还会经常需要选择编译器，有时候还会提示qmake.exe出错，我不太清楚什么原因，我猜是因为它把编译器搞混了，也可能是因为我没有手动设置（欢迎大佬指正）。</p><p>之后就是下一步、下一步……直到安装完成，安装速度挺慢的，耐心等一下就好。</p><p>明天我们正式开始上位机开发。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
            <tag> Qt </tag>
            
            <tag> 上位机 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2017年度总结</title>
      <link href="/2017/01/01/2017Report/"/>
      <url>/2017/01/01/2017Report/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&emsp;<font face="楷体"><br>宁折不弯，笑面大川<br>端得就像猛虎一样蹿山跳涧<br>一马平川美梦难圆<br>不摔跟头怎又可知路途艰险。</font><br>&emsp; </p></blockquote><font face="楷体"><p><strong>2017年对于我来说什么都没有发生，也可以说发生了许多事。学会时刻准备着迎接生活带给你的大部分痛苦，对于那些排山倒海的不如意，你必须有所准备。</strong><br></font></p><span id="more"></span><p><img src="/2017/01/01/2017Report/2017-1.jpg"></p><p><font face="楷体" >2月，大概刚过完年的没几天，当我在电脑前喝了半打可乐后，我对于2017这一年贴上了老套而又俗不可耐的标签—“我要考研”。</font></p><p><img src="/2017/01/01/2017Report/2017-2.jpg"></p><p><font face="楷体">临近三月，黑晨皓给我发来了大概半年前在烟台扫街的照片。黒晨皓说他想要拍出一种孤独都市夜游人的感觉。仔细想想我其实很少会有孤独的感觉，相反我觉得很多事情我一个人做会更有效率。比如买东西，比如去运动。每当我做好下一天的规划时，我的心里有十万个百万个不愿意因为迁就而做出改变。<br></font></p><p><img src="/2017/01/01/2017Report/2017-3.jpg"></p><p><font face="楷体">3月，结束了大学里的最后一次院赛，结果说不上有多好，但也都在意料之中，从第一年的止步小组赛，到第二年的十六强，再到今年八强。无所谓结果，至少我们也没有退步。<br></font></p><p>![](.//2017Report/2017-4.jpeg” width=70% &gt;</p><p><font face="楷体">4月，因为没有找到固定的自习教室，遂决定搬出去住。这是我第一次在外面租房子住，舍友是黒晨皓还有南校密友老板，还有em…一个女生。在这一个月里，我开始走上了数学这条不归路。从基础开始看，这件事一直持续到了考试的前一个晚上。也是在这个月，我背完了我人生中的第一本单词书。<br></font></p><p><img src="/2017/01/01/2017Report/2017-5.2.jpeg"></p><p><font face="楷体">5月，又去看了一次五月天的演唱会。陈信宏依旧是那个只有他自己能驾驭的住的非主流发型; 怪兽依旧是站在左手边的升降台上solo…什么都没有变，也什么都变了。<br></font></p><p><img src="/2017/01/01/2017Report/2017-6.jpeg"></p><p><font face="楷体">6月，又是一年毕业季。送走了几个大四的学长，恍恍惚惚我们已经不再是18岁的少年，转眼成了半只脚踏入社会的死大四的。也是从这一刻开始，我们肩抗日月，头顶星辰，怀中抱着彩虹色的憧憬，跌跌撞撞的闯入了三教的大门。<br></font></p><p><img src="/2017/01/01/2017Report/2017-7.jpeg"></p><p><font face="楷体">7月，我结束了自己在外修仙的生活，回到了宿舍，准备结束大学里的最后一门考试。这门课本来我是不必选的，但是考虑到当时对于考研学校的选择，我就抱着姑且听一听的心态选了概率论这门课。现在想想，当时还真是挺姑且的。<br></font></p><p><img src="/2017/01/01/2017Report/2017-8.jpeg"></p><p><font face="楷体">7月，经过与学院、企业的协商无果，我们被发配莱芜实训。我不敢说自己见到了人的劣根性，但我确实对这个世界有了更深切的体会。<br></font></p><p><img src="/2017/01/01/2017Report/2017-9.jpeg"></p><p><font face="楷体">8月，在莱芜的这一个多月里，逐渐习惯了这里的清汤寡水，也逐渐习惯了这里食堂师父随心所欲的做饭技巧。想到这里，含在嘴里想要一吐为快的话太多，反而不知从何说起，既然如此，我也不说了。青山不改水长流，你我还是别再见了吧。<br></font></p><p><img src="/2017/01/01/2017Report/2017-10.jpeg"></p><p><font face="楷体">9月，天气转凉，啃完了一整本数据结构。记得当时在二叉树的非递归算法那里卡住了，从早上九点多一直看到晚上十点，等于是看了一天的代码。后来我一个星期没有看专业课。感谢当时没放弃的你。<br></font></p><p><img src="/2017/01/01/2017Report/2017-11.jpeg"></p><p><font face="楷体">10月，超哥带着我们完成了上一个项目的收尾，把所有该交的报告交了，该写的东西也写了。归校心切。<br></font></p><p><img src="/2017/01/01/2017Report/2017-12.jpeg"></p><p><font face="楷体">11月，时隔四个月回到学校，却有种恍如隔世的感觉。七餐四楼的鸭血粉丝汤关门了，今乡缘的大排饭也没有了，修了四年的北门也终于打开了，食堂又涨价了…</font></p><p><img src="/2017/01/01/2017Report/2017-13.jpeg"></p><p><font face="楷体">12月，时间走到十二月，就像是上紧了发条的铁皮青蛙，一步作两步，两步作四步的向前飞奔，转眼就到了考试的日子。考政治前一天晚上我居然也失眠了，梦里总是梦见自己考试迟到了，两点多惊醒一次，三点惊醒一次。为此，我还特地找了好几个人叫我起床。最后的结果，不能说很好，但也算不上很糟糕。人事已尽，天命不归，实非吾过。</font></p><hr><font face="楷体"><p><strong>记得在我刚刚做出决定的时候，我在自己的微信上写下了“腹中贮书一万卷，不肯低头在草莽”的字句。现在回过头看，也不过是一时的荷尔蒙失控。是啊，腹中贮书一万卷，当然有权力不为草莽低头。可我没有啊，能做的依旧只有努力，努力，还是努力。这一年里，我不止一次想起要放弃，但却一次不敢停止。因为我怕我怀里这口气一旦吐出，就再也提不起来。不是不能停，而是不敢停。</strong><br><strong>想到了自己从年初的时候开始，一路披荆斩棘、丢盔卸甲的走到现在，虽然满手满脚的泥泞，但心里的骄傲和愿景一个都没有丢，总觉得这些话应该讲给你听。因为，我答应了十八岁的自己不会变。</strong></p></font><hr><font face="楷体"><p><strong>最后，是例行这一年里拍过最喜欢的十张照片。</strong><br><strong>（我这一年可能也就拍了这十张照片）</strong></p></font><p><img src="/2017/01/01/2017Report/s1.jpg"></p><p><img src="/2017/01/01/2017Report/s2.jpg"></p><p><img src="/2017/01/01/2017Report/s3.jpg"></p><p><img src="/2017/01/01/2017Report/s4.jpeg"></p><p><img src="/2017/01/01/2017Report/s5.jpeg"></p><p><img src="/2017/01/01/2017Report/s6.jpeg"></p><p><img src="/2017/01/01/2017Report/s7.jpeg"></p><p><img src="/2017/01/01/2017Report/s8.jpg"></p><p><img src="/2017/01/01/2017Report/s9.jpeg"></p><p><img src="/2017/01/01/2017Report/s10.jpeg"></p><blockquote><p>&emsp; <font face="楷体"><br>三十二天难离恨天，登峰尚且恐难相见。<br>执着狼旗八千铁骑，坚持就是你的武器。</font><br>&emsp; </p></blockquote><font face="楷体"><p><strong>痛饮这一世漂泊与君同行皆为景色。</strong></p></font>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2016年终总结</title>
      <link href="/2016/01/01/2016Report/"/>
      <url>/2016/01/01/2016Report/</url>
      
        <content type="html"><![CDATA[<font face="楷体" ><p><strong>我的2016年依旧是普普通通的一年</strong></p></font><blockquote><p>&emsp;<font face="楷体" ><br>现实走在前头，期许永远在后，我高举起惨白的手，请你们先走。</font></p></blockquote><font face="楷体" ><p>年初回到学校，忙着补考，补考之后因为一些小事情，送走了两个舍友，现在想想有时候生活的确是不公平的。</p></font><span id="more"></span><p><img src="/2016/01/01/2016Report/2016-1.jpeg"></p><font face="楷体" ><p>五月，第一次作为学长参与了大学最后一次校运会工作，没有兴奋感，也没有什么使命感，脑子里满满的都是时间过的可真快。</p></font><p><img src="/2016/01/01/2016Report/2016-2.jpeg"></p><font face="楷体" ><p>七月，难得的赶上花粥与驳倒来到烟台这个逼仄的小地方办LiveHouse，又是很难得的四个单身狗都有时间。这也是我大二学年的倒数第二件大事，也是四狗最后一次大型集体活动。</p></font><p><img src="/2016/01/01/2016Report/2016-3.jpeg"></p><font face="楷体" ><p>八月，送一个智障去加拿大学习，眼看着他从200多斤瘦到150斤，也是觉得万分神奇。</p></font><p><img src="/2016/01/01/2016Report/2016-4.1.jpg"></p><font face="楷体"><p>八月，我妈问我假期出去玩吧，我说行啊，反正好多年没一起出去了。去哪？厦门西安大理你选一个吧。最后因为到处天气都很热，遂决定云南。结局就是当了一个多星期的苦力。大理真的很漂亮，但是我还是喜欢成都多一点。</p></font><p><img src="/2016/01/01/2016Report/2016-5.jpg"></p><font face="楷体"><p>还是八月，从兖州出发去往北京看五月天的演唱会。还记得当时因为买的黄牛票而一路忐忑，如果只是我一个的话，我是无所谓的，直到走进鸟巢。位置虽然是看台，却是离舞台最近的看台。运气一直在眷顾我，这从考高中那年就开始了。</p></font><p><img src="/2016/01/01/2016Report/2016-6.jpg"></p><font face="楷体"><p>九月，正式成为即将被大学生活抛弃的那一撮人，大三。帮学弟学妹们纳新，办新生见面会，全团大会，换届，直到正式退出。感谢遇见</p></font><p><img src="/2016/01/01/2016Report/2016-7.jpeg"></p><font face="楷体"><p>十二月，黑黑因为某些不可说的原因，离开学校开始四处旅行的生活。我还记得大一那年，他对我说 :我帮你拍照片吧。直到他离开烟台，这事也没什么着落。祝你以后一帆风顺，长风万里吧。</p></font><p><img src="/2016/01/01/2016Report/2016-8.jpeg"></p><font face="楷体"><hr><p>2016年终于就这么过来了，没什么大波大折，也没什么惊心动魄，唯独我在这平凡的一年见证了别人不平凡的生活，恰似今朝零落人，回首往昔繁华日。有时候我们说话都喜欢用终于，就像终于放假了，终于毕业了，终于离开这里了，终于过年了，仿佛任何的告别都像是一种解脱。最后我们才发现，那些自以为是的如释重负，才是让人想念的东西。没什么会等你。就像所有的曲终人散和分道扬镳，到最后可惜的不是离散，而是没有好好地和那些告别。</p></font><font face="楷体"><p>大师兄说世人都笑屠龙幼稚，中二无情，可偏偏人生在世，硬要活成一个热血沸腾的傻逼。 所以当你看到另一个故事，想起你也做过年少轻狂的荒唐事，尝过这世间情爱的苦，你哭你笑都是在挥别过去的自己，这是关于成长的故事……如果其中有你，那么它对得起所有的赞誉。</p></font><hr><font face="楷体"><p>最后，是例行这一年里拍过最喜欢的十张照片。</p></font><br><p><img src="/2016/01/01/2016Report/s1.jpg"></p><p><img src="/2016/01/01/2016Report/s2.jpg"></p><p><img src="/2016/01/01/2016Report/s3.JPG"></p><p><img src="/2016/01/01/2016Report/s4.jpg"></p><p><img src="/2016/01/01/2016Report/s5.jpg"></p><p><img src="/2016/01/01/2016Report/s6.jpg"></p><p><img src="/2016/01/01/2016Report/s7.jpeg"></p><p><img src="/2016/01/01/2016Report/s8.jpg"></p><p><img src="/2016/01/01/2016Report/s9.jpg"></p><p><img src="/2016/01/01/2016Report/s10.jpg"></p><font face="楷体"><p>过去只会退后，记忆不会挽留，他微微皱了破碎眉头，让他脚步停留。</p></font>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
